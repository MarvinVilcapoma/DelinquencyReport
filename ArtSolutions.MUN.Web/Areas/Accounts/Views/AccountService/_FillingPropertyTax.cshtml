@model ArtSolutions.MUN.Web.Areas.Accounts.Models.AccountServiceFillingModel
@using ArtSolutions.MUN.Web.Areas.Accounts.Models
@using LocalResource = ArtSolutions.MUN.Web.Resources.AccountService
@using GlobalResource = ArtSolutions.MUN.Web.Resources.Global
@using PropertyResource = ArtSolutions.MUN.Web.Resources.AccountProperty

@{
    Layout = null;
    var isViewMode = ViewBag.IsViewMode;
    decimal FinalTotal = ((Model.CollectionFillingPropertyTaxModel != null && Model.CollectionFillingPropertyTaxModel.AccountPropertyList != null && Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Count > 0 ? Model.CollectionFillingPropertyTaxModel.AccountPropertyList.FirstOrDefault().TotalValue ?? 0 : 0) - (Model.CollectionFillingPropertyTaxModel.ExemptionAmount == null ? 0 : Model.CollectionFillingPropertyTaxModel.ExemptionAmount.Value));
    Model.CollectionFillingPropertyTaxModel.TotalValue = FinalTotal;
}
<style>
    .table-striped > tbody > tr:nth-of-type(2n+1) {
        background-color: transparent !important;
    }
</style>

@using (Ajax.BeginForm("SaveFillingPropertyTax", "AccountService", new AjaxOptions { HttpMethod = "POST", OnSuccess = "FillingSuccessCallback(data)" }, new { role = "form", id = "frmFillingPropertyTax", @class = "form-horizontal", data_ajax_mode = "replace-with" }))
{

    <div class="modal-body no-padding">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                @if (isViewMode == null)
                {
                    if (ViewBag.IsSummary == null)
                    {
                        <h5> @LocalResource.PopupFillingTitle @Model.ServicePeriod </h5>
                    }
                    else
                    {
                        <h5> @LocalResource.PopupFillingTitle @Model.ServiceName</h5>
                    }
                }
                else
                {
                    if (ViewBag.IsSummary == null)
                    {
                        <h5> @LocalResource.ViewFilingForTitle @Model.ServicePeriod </h5>
                    }
                    else
                    {
                        <h5> @LocalResource.ViewFilingForTitle @Model.ServiceName</h5>
                    }
                }

                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@GlobalResource.Close</span></button>
            </div>
            <div class="ibox-content">
                @if (Model.CollectionFillingPropertyTaxModel != null && Model.CollectionFillingPropertyTaxModel.ID > 0 && Model.CollectionFillingPropertyTaxModel.IsEditPermission == 1)
                {

                    <div class="row form-group">
                        <div class="col-lg-12 right">
                            <button id="btnDeletePropertyTax" style="float:right;" type="button" class="btn btn-danger DeleteFillingPropertyTax m-l">@GlobalResource.Delete</button>
                            <button id="btnEditPropertyTax" style="float:right;" type="button" class="btn btn-primary editFillingPropertyTax">@GlobalResource.Edit</button>
                            @Html.HiddenFor(d => d.ServiceName)
                            @Html.HiddenFor(d => d.ServicePeriod)
                            @Html.Hidden("IsSummary", (bool?)ViewBag.IsSummary)
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-md-6 col-lg-6">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">
                                @GlobalResource.FilingDate
                                @if (isViewMode != true)
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            <div class="col-lg-8">
                                @Html.TextBox("FillingDate", (Model.FillingDate == null ? null : Model.FillingDate.Value.ToString("d")), new { @class = "form-control fillingDate required textblur", tabindex = 1 })
                                @Html.ValidationMessageFor(x => x.FillingDate)
                                @Html.Hidden("ApplyToAllYear", true)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6">
                        @if (isViewMode == true)
                        {
                            <div class="form-group">
                                <label class="col-lg-4 control-label">@GlobalResource.ReFillingDate</label>
                                <div class="col-lg-8">
                                    @Html.TextBox("ReFillingDate", (Model.ReFillingDate == null ? null : Model.ReFillingDate.Value.ToString("d")), new { @class = "form-control ReFillingDate required textblur", disabled = true, tabindex = 2 })
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 col-lg-6">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">
                                @LocalResource.MovementType
                            </label>
                            <div class="col-lg-8">
                                @Html.DropDownListFor(d => d.CollectionFillingPropertyTaxModel.MovementTypeID, Model.CollectionFillingPropertyTaxModel.MovementTypeList, GlobalResource.DropDownSelectMessage, new { @class = "form-control select2dropdown MovementTypeID", tabindex = 3 })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">
                                @GlobalResource.Note
                            </label>
                            <div class="col-lg-8">
                                @Html.TextAreaFor(x => x.CollectionFillingPropertyTaxModel.Notes, new { @class = "form-control", rows = "3", tabindex = 4 })
                            </div>
                        </div>
                    </div>
                </div>

                @if (Model.CollectionFillingPropertyTaxModel.AccountPropertyList != null && Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Count > 0)
                {
                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.PropertyAccountID)
                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.PropertyNumber)
                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.RigthNumber)

                    <div class="table-responsive m-t">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.TerrainArea)</th>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.TerrainValue)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class='col-lg-6 text-right'>
                                        @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.Area, new { @class = "form-control Area Currencyinputdecimal text-right", @readonly = true, @Value = Model.CollectionFillingPropertyTaxModel.Area.HasValue ? Model.CollectionFillingPropertyTaxModel.Area.Value.ToString(Common.DecimalPoints) : "" })
                                    </td>
                                    <td class='col-lg-6 text-right'>
                                        @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.TerrainValue, new { @class = "form-control required text-right Currencyinputdecimal FillingPropertyTax TerrainValue clearPropertyTax", @Value = Model.CollectionFillingPropertyTaxModel.TerrainValue.HasValue ? Model.CollectionFillingPropertyTaxModel.TerrainValue.Value.ToString(Common.DecimalPoints) : 0.ToString(Common.DecimalPoints) })
                                        @Html.ValidationMessageFor(d => d.CollectionFillingPropertyTaxModel.TerrainValue)
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.ConstructionArea)</th>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.ConstructionValue)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Where(d => d.MaterialTypeID == 1).Count() > 0)
                                {
                                    for (int i = 0; i < Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Where(d => d.MaterialTypeID == 1).Count(); i++)
                                    {
                                        if (Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].MaterialTypeID.Value == 1)
                                        {
                                            <tr>
                                                <td class='col-lg-6 text-right'>
                                                    @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionArea, new { @class = "form-control text-right Currencyinputdecimal ConstructionArea", @readonly = true, @Value = Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionArea.ToString(Common.DecimalPoints) })
                                                </td>
                                                <td class='col-lg-6 text-right'>
                                                    @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue, new { @class = "form-control required text-right Currencyinputdecimal FillingPropertyTax ContructionValue clearPropertyTax", @Value = Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue.HasValue ? Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue.Value.ToString(Common.DecimalPoints) : 0.ToString(Common.DecimalPoints) })
                                                    @Html.ValidationMessageFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue)
                                                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionID)
                                                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].MaterialTypeID)
                                                </td>

                                            </tr>
                                        }
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td class="text-center" colspan="2">
                                            @GlobalResource.NoDataMessage
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.ComplementaryArea)</th>
                                    <th class="col-lg-6 text-right">@Html.Raw(@PropertyResource.ComplementaryValue)</th>
                                </tr>
                            </thead>
                            <tbody>

                                @if (Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Where(d => d.MaterialTypeID == 2).Count() > 0)
                                {
                                   
                                    for (int i = 0; i < Model.CollectionFillingPropertyTaxModel.AccountPropertyList.Count(); i++)
                                    {
                                        if (Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].MaterialTypeID.Value == 2)
                                        {
                                            <tr>
                                                <td class='col-lg-6 text-right'>
                                                    @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionArea, new { @class = "form-control text-right Currencyinputdecimal ConstructionArea", @readonly = true, @Value = Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionArea.ToString(Common.DecimalPoints) })
                                                </td>
                                                <td class='col-lg-6 text-right'>
                                                    @Html.TextBoxFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue, new { @class = "form-control required text-right Currencyinputdecimal FillingPropertyTax ContructionValue clearPropertyTax", @Value = Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue.HasValue ? Model.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue.Value.ToString(Common.DecimalPoints) : 0.ToString(Common.DecimalPoints) })
                                                    @Html.ValidationMessageFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ContructionValue)
                                                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].ConstructionID)
                                                    @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.AccountPropertyList[i].MaterialTypeID)
                                                </td>
                                            </tr>                                            

                                        }
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td class="text-center" colspan="2">
                                            @GlobalResource.NoDataMessage
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td class="col-lg-6- no-borders">
                                        <label class="form-control text-right no-borders">@GlobalResource.Total</label>
                                    </td>
                                    <td class="col-lg-6">
                                        @Html.TextBox("txtTotal", FinalTotal.ToString(Common.DecimalPoints), new { @class = "form-control text-right clearPropertyTax Currencyinputdecimal", @id = "txtTotal", ReadOnly = "true" })
                                        @Html.HiddenFor(d => d.CollectionFillingPropertyTaxModel.TotalValue, new { @id= "TotalValue" })
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                    </div>
                }

                @if (isViewMode == null)
                {
                    @*Upload File Control*@
                    <div class="row form-group">
                        <div class="col-lg-12">
                            <label class="control-label"> @GlobalResource.Documents </label>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-lg-12">
                            <div id="attachmentDropzone" class="dropzone">
                                <div id="attachmentPreview" class="dropzone-previews">
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (isViewMode != null)
                {
                    <div class="row form-group">
                        <label class="col-lg-4 control-label">@GlobalResource.AttachmentsFiles</label>
                        <div class="col-lg-8">
                            <ul class="list-unstyled project-files m-t-sm">
                                @if (Model.CollectionFillingPropertyTaxModel.CollectionFillingImagesList.Count > 0)
                                {
                                    foreach (var item in Model.CollectionFillingPropertyTaxModel.CollectionFillingImagesList)
                                    {
                                        string ext = System.IO.Path.GetExtension(item.FileName);
                                        string cssclass = "fa-file";
                                        <li class="text-description-field">
                                            <a href='@Url.Content("~/File/DownloadFile?id=" + item.ImageID)'>
                                                @if ((".xlsx .xls").Contains(ext))
                                                {
                                                    cssclass = "fa-file-excel-o";
                                                }
                                                else if (ext.Contains(".pdf"))
                                                {
                                                    cssclass = "fa-file-pdf-o";
                                                }
                                                else if ((".docx,.doc").Contains(ext))
                                                {
                                                    cssclass = "fa-file-word-o";
                                                }
                                                else if ((".jpg,.jpeg,.gif,.png,.bmp").Contains(ext))
                                                {
                                                    cssclass = "fa-file-image-o";
                                                }
                                                else if ((".flv,.wmv,.mp4,.mp3,.mpeg").Contains(ext))
                                                {
                                                    cssclass = "fa-file-Video-o";
                                                }
                                                <i class="fa @cssclass m-r-xxs">
                                                </i>
                                                &nbsp;@item.FileName
                                            </a>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li>
                                        @GlobalResource.NoDataMessage
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button id="btnAddPropertyTax" type="submit" class="btn btn-primary" data-mode="add" onclick="return SavePropertyTax();" tabindex="6">@GlobalResource.Add</button>
        <button id="btnCancel" type="button" class="btn btn-white closemodal" data-dismiss="modal" tabindex="7">@GlobalResource.Cancel</button>
    </div>

    @*Hidden Fields*@
    <input type="hidden" id="AccountServiceCollectionDetailId" name="AccountServiceCollectionDetailId" value="@Model.AccountServiceCollectionDetailId" />
    <input type="hidden" id="GroupID" name="GroupID" value="@Model.GroupID" />
    <input type="hidden" id="RowVersion" name="RowVersion" />
    <input type="hidden" id="ImageIds" name="CollectionFillingPropertyTaxModel.CommaSeperatedImageIDs" />
    @Html.HiddenFor(m => m.RowVersion64)
    @Html.HiddenFor(m => m.ExceptionValue)
}