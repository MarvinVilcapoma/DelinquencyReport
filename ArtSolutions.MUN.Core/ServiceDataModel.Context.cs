//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ServiceDataModelContainer : DbContext
    {
        public ServiceDataModelContainer()
            : base("name=ServiceDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<MUNSERCollectionFieldGet_Result> MUNSERCollectionFieldGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERCollectionFieldGet_Result>("MUNSERCollectionFieldGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNSERCollectionRuleGet_Result> MUNSERCollectionRuleGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERCollectionRuleGet_Result>("MUNSERCollectionRuleGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNSERCollectionTypeGet_Result> MUNSERCollectionTypeGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERCollectionTypeGet_Result>("MUNSERCollectionTypeGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNSERFrequencyGet_Result> MUNSERFrequencyGet(string language, Nullable<bool> isServiceFrequency)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var isServiceFrequencyParameter = isServiceFrequency.HasValue ?
                new ObjectParameter("IsServiceFrequency", isServiceFrequency) :
                new ObjectParameter("IsServiceFrequency", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFrequencyGet_Result>("MUNSERFrequencyGet", languageParameter, isServiceFrequencyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERServiceCollectionRuleExist(string collectionRuleName, string languageID, Nullable<int> iD)
        {
            var collectionRuleNameParameter = collectionRuleName != null ?
                new ObjectParameter("CollectionRuleName", collectionRuleName) :
                new ObjectParameter("CollectionRuleName", typeof(string));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERServiceCollectionRuleExist", collectionRuleNameParameter, languageIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERServiceExist(string serviceName, Nullable<int> companyId, string languageID, Nullable<int> iD)
        {
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERServiceExist", serviceNameParameter, companyIdParameter, languageIDParameter, iDParameter);
        }
    
        public virtual int MUNSERServiceInsert(Nullable<int> companyID, Nullable<int> serviceTypeID, Nullable<int> groupID, string serviceName, string locale, string description, string code, Nullable<int> filingTypeTableID, Nullable<int> filingTypeID, Nullable<bool> useFixedFillingDueDate, Nullable<int> fillingDueDays, Nullable<bool> useFixedPaymentDueDate, Nullable<int> paymentDueDays, Nullable<bool> useFixedPaymentGracePeriod, Nullable<int> paymentGracePeriod, Nullable<bool> useFixedDiscountDate, Nullable<int> discountDueDays, Nullable<int> frequencyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> sort, Nullable<bool> isPublic, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> collectionTemplateID, Nullable<int> printTemplateID, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string mUNSERServiceExceptionJSON, string customField1, string customField2, string customField3, string customDateField, Nullable<bool> allowDuplicateCustomField1, Nullable<bool> allowDuplicateCustomField2, Nullable<bool> allowDuplicateCustomField3, Nullable<bool> allowDuplicateCustomDateField, string totalValueLabel, Nullable<bool> autoCreation, Nullable<bool> multipleServicesPerYear, string accountTypeIDs, Nullable<int> filingFormID, Nullable<int> filingDueType, Nullable<int> paymentDueType, Nullable<int> discountDueType, Nullable<int> paymentGraceType, string customField4, Nullable<bool> allowDuplicateCustomField4, string customField5, Nullable<bool> allowDuplicateCustomField5, ObjectParameter serviceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var filingTypeTableIDParameter = filingTypeTableID.HasValue ?
                new ObjectParameter("FilingTypeTableID", filingTypeTableID) :
                new ObjectParameter("FilingTypeTableID", typeof(int));
    
            var filingTypeIDParameter = filingTypeID.HasValue ?
                new ObjectParameter("FilingTypeID", filingTypeID) :
                new ObjectParameter("FilingTypeID", typeof(int));
    
            var useFixedFillingDueDateParameter = useFixedFillingDueDate.HasValue ?
                new ObjectParameter("UseFixedFillingDueDate", useFixedFillingDueDate) :
                new ObjectParameter("UseFixedFillingDueDate", typeof(bool));
    
            var fillingDueDaysParameter = fillingDueDays.HasValue ?
                new ObjectParameter("FillingDueDays", fillingDueDays) :
                new ObjectParameter("FillingDueDays", typeof(int));
    
            var useFixedPaymentDueDateParameter = useFixedPaymentDueDate.HasValue ?
                new ObjectParameter("UseFixedPaymentDueDate", useFixedPaymentDueDate) :
                new ObjectParameter("UseFixedPaymentDueDate", typeof(bool));
    
            var paymentDueDaysParameter = paymentDueDays.HasValue ?
                new ObjectParameter("PaymentDueDays", paymentDueDays) :
                new ObjectParameter("PaymentDueDays", typeof(int));
    
            var useFixedPaymentGracePeriodParameter = useFixedPaymentGracePeriod.HasValue ?
                new ObjectParameter("UseFixedPaymentGracePeriod", useFixedPaymentGracePeriod) :
                new ObjectParameter("UseFixedPaymentGracePeriod", typeof(bool));
    
            var paymentGracePeriodParameter = paymentGracePeriod.HasValue ?
                new ObjectParameter("PaymentGracePeriod", paymentGracePeriod) :
                new ObjectParameter("PaymentGracePeriod", typeof(int));
    
            var useFixedDiscountDateParameter = useFixedDiscountDate.HasValue ?
                new ObjectParameter("UseFixedDiscountDate", useFixedDiscountDate) :
                new ObjectParameter("UseFixedDiscountDate", typeof(bool));
    
            var discountDueDaysParameter = discountDueDays.HasValue ?
                new ObjectParameter("DiscountDueDays", discountDueDays) :
                new ObjectParameter("DiscountDueDays", typeof(int));
    
            var frequencyIDParameter = frequencyID.HasValue ?
                new ObjectParameter("FrequencyID", frequencyID) :
                new ObjectParameter("FrequencyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var collectionTemplateIDParameter = collectionTemplateID.HasValue ?
                new ObjectParameter("CollectionTemplateID", collectionTemplateID) :
                new ObjectParameter("CollectionTemplateID", typeof(int));
    
            var printTemplateIDParameter = printTemplateID.HasValue ?
                new ObjectParameter("PrintTemplateID", printTemplateID) :
                new ObjectParameter("PrintTemplateID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var mUNSERServiceExceptionJSONParameter = mUNSERServiceExceptionJSON != null ?
                new ObjectParameter("MUNSERServiceExceptionJSON", mUNSERServiceExceptionJSON) :
                new ObjectParameter("MUNSERServiceExceptionJSON", typeof(string));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var customField2Parameter = customField2 != null ?
                new ObjectParameter("CustomField2", customField2) :
                new ObjectParameter("CustomField2", typeof(string));
    
            var customField3Parameter = customField3 != null ?
                new ObjectParameter("CustomField3", customField3) :
                new ObjectParameter("CustomField3", typeof(string));
    
            var customDateFieldParameter = customDateField != null ?
                new ObjectParameter("CustomDateField", customDateField) :
                new ObjectParameter("CustomDateField", typeof(string));
    
            var allowDuplicateCustomField1Parameter = allowDuplicateCustomField1.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField1", allowDuplicateCustomField1) :
                new ObjectParameter("AllowDuplicateCustomField1", typeof(bool));
    
            var allowDuplicateCustomField2Parameter = allowDuplicateCustomField2.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField2", allowDuplicateCustomField2) :
                new ObjectParameter("AllowDuplicateCustomField2", typeof(bool));
    
            var allowDuplicateCustomField3Parameter = allowDuplicateCustomField3.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField3", allowDuplicateCustomField3) :
                new ObjectParameter("AllowDuplicateCustomField3", typeof(bool));
    
            var allowDuplicateCustomDateFieldParameter = allowDuplicateCustomDateField.HasValue ?
                new ObjectParameter("AllowDuplicateCustomDateField", allowDuplicateCustomDateField) :
                new ObjectParameter("AllowDuplicateCustomDateField", typeof(bool));
    
            var totalValueLabelParameter = totalValueLabel != null ?
                new ObjectParameter("TotalValueLabel", totalValueLabel) :
                new ObjectParameter("TotalValueLabel", typeof(string));
    
            var autoCreationParameter = autoCreation.HasValue ?
                new ObjectParameter("AutoCreation", autoCreation) :
                new ObjectParameter("AutoCreation", typeof(bool));
    
            var multipleServicesPerYearParameter = multipleServicesPerYear.HasValue ?
                new ObjectParameter("MultipleServicesPerYear", multipleServicesPerYear) :
                new ObjectParameter("MultipleServicesPerYear", typeof(bool));
    
            var accountTypeIDsParameter = accountTypeIDs != null ?
                new ObjectParameter("AccountTypeIDs", accountTypeIDs) :
                new ObjectParameter("AccountTypeIDs", typeof(string));
    
            var filingFormIDParameter = filingFormID.HasValue ?
                new ObjectParameter("FilingFormID", filingFormID) :
                new ObjectParameter("FilingFormID", typeof(int));
    
            var filingDueTypeParameter = filingDueType.HasValue ?
                new ObjectParameter("FilingDueType", filingDueType) :
                new ObjectParameter("FilingDueType", typeof(int));
    
            var paymentDueTypeParameter = paymentDueType.HasValue ?
                new ObjectParameter("PaymentDueType", paymentDueType) :
                new ObjectParameter("PaymentDueType", typeof(int));
    
            var discountDueTypeParameter = discountDueType.HasValue ?
                new ObjectParameter("DiscountDueType", discountDueType) :
                new ObjectParameter("DiscountDueType", typeof(int));
    
            var paymentGraceTypeParameter = paymentGraceType.HasValue ?
                new ObjectParameter("PaymentGraceType", paymentGraceType) :
                new ObjectParameter("PaymentGraceType", typeof(int));
    
            var customField4Parameter = customField4 != null ?
                new ObjectParameter("CustomField4", customField4) :
                new ObjectParameter("CustomField4", typeof(string));
    
            var allowDuplicateCustomField4Parameter = allowDuplicateCustomField4.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField4", allowDuplicateCustomField4) :
                new ObjectParameter("AllowDuplicateCustomField4", typeof(bool));
    
            var customField5Parameter = customField5 != null ?
                new ObjectParameter("CustomField5", customField5) :
                new ObjectParameter("CustomField5", typeof(string));
    
            var allowDuplicateCustomField5Parameter = allowDuplicateCustomField5.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField5", allowDuplicateCustomField5) :
                new ObjectParameter("AllowDuplicateCustomField5", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERServiceInsert", companyIDParameter, serviceTypeIDParameter, groupIDParameter, serviceNameParameter, localeParameter, descriptionParameter, codeParameter, filingTypeTableIDParameter, filingTypeIDParameter, useFixedFillingDueDateParameter, fillingDueDaysParameter, useFixedPaymentDueDateParameter, paymentDueDaysParameter, useFixedPaymentGracePeriodParameter, paymentGracePeriodParameter, useFixedDiscountDateParameter, discountDueDaysParameter, frequencyIDParameter, startDateParameter, endDateParameter, effectiveFromParameter, effectiveToParameter, sortParameter, isPublicParameter, isActiveParameter, isDeletedParameter, collectionTemplateIDParameter, printTemplateIDParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, mUNSERServiceExceptionJSONParameter, customField1Parameter, customField2Parameter, customField3Parameter, customDateFieldParameter, allowDuplicateCustomField1Parameter, allowDuplicateCustomField2Parameter, allowDuplicateCustomField3Parameter, allowDuplicateCustomDateFieldParameter, totalValueLabelParameter, autoCreationParameter, multipleServicesPerYearParameter, accountTypeIDsParameter, filingFormIDParameter, filingDueTypeParameter, paymentDueTypeParameter, discountDueTypeParameter, paymentGraceTypeParameter, customField4Parameter, allowDuplicateCustomField4Parameter, customField5Parameter, allowDuplicateCustomField5Parameter, serviceID);
        }
    
        public virtual ObjectResult<MUNSERServiceCalculationDateGet_Result> MUNSERServiceCalculationDateGet(Nullable<int> iD, Nullable<int> fiscalYearID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCalculationDateGet_Result>("MUNSERServiceCalculationDateGet", iDParameter, fiscalYearIDParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceCollectionRuleDetailGet_Result> MUNSERServiceCollectionRuleDetailGet(Nullable<int> serviceID, Nullable<int> companyID, string language, Nullable<int> iD, Nullable<int> serviceCollectionRuleID, Nullable<bool> isDeleted)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var serviceCollectionRuleIDParameter = serviceCollectionRuleID.HasValue ?
                new ObjectParameter("ServiceCollectionRuleID", serviceCollectionRuleID) :
                new ObjectParameter("ServiceCollectionRuleID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCollectionRuleDetailGet_Result>("MUNSERServiceCollectionRuleDetailGet", serviceIDParameter, companyIDParameter, languageParameter, iDParameter, serviceCollectionRuleIDParameter, isDeletedParameter);
        }
    
        public virtual int MUNSERServiceUpdate(Nullable<int> iD, Nullable<int> companyID, Nullable<int> serviceTypeID, Nullable<int> groupID, string serviceName, string locale, string description, string code, Nullable<int> filingTypeTableID, Nullable<int> filingTypeID, Nullable<bool> useFixedFillingDueDate, Nullable<int> fillingDueDays, Nullable<bool> useFixedPaymentDueDate, Nullable<int> paymentDueDays, Nullable<bool> useFixedPaymentGracePeriod, Nullable<int> paymentGracePeriod, Nullable<bool> useFixedDiscountDate, Nullable<int> discountDueDays, Nullable<int> frequencyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> sort, Nullable<bool> isPublic, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<bool> isLocked, Nullable<bool> isTestMode, Nullable<int> collectionTemplateID, Nullable<int> printTemplateID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string mUNSERServiceExceptionJSON, string customField1, string customField2, string customField3, string customDateField, Nullable<bool> allowDuplicateCustomField1, Nullable<bool> allowDuplicateCustomField2, Nullable<bool> allowDuplicateCustomField3, Nullable<bool> allowDuplicateCustomDateField, string totalValueLabel, Nullable<bool> autoCreation, Nullable<bool> multipleServicesPerYear, string accountTypeIDs, Nullable<int> filingFormID, Nullable<int> filingDueType, Nullable<int> paymentDueType, Nullable<int> discountDueType, Nullable<int> paymentGraceType, string customField4, Nullable<bool> allowDuplicateCustomField4, string customField5, Nullable<bool> allowDuplicateCustomField5)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var filingTypeTableIDParameter = filingTypeTableID.HasValue ?
                new ObjectParameter("FilingTypeTableID", filingTypeTableID) :
                new ObjectParameter("FilingTypeTableID", typeof(int));
    
            var filingTypeIDParameter = filingTypeID.HasValue ?
                new ObjectParameter("FilingTypeID", filingTypeID) :
                new ObjectParameter("FilingTypeID", typeof(int));
    
            var useFixedFillingDueDateParameter = useFixedFillingDueDate.HasValue ?
                new ObjectParameter("UseFixedFillingDueDate", useFixedFillingDueDate) :
                new ObjectParameter("UseFixedFillingDueDate", typeof(bool));
    
            var fillingDueDaysParameter = fillingDueDays.HasValue ?
                new ObjectParameter("FillingDueDays", fillingDueDays) :
                new ObjectParameter("FillingDueDays", typeof(int));
    
            var useFixedPaymentDueDateParameter = useFixedPaymentDueDate.HasValue ?
                new ObjectParameter("UseFixedPaymentDueDate", useFixedPaymentDueDate) :
                new ObjectParameter("UseFixedPaymentDueDate", typeof(bool));
    
            var paymentDueDaysParameter = paymentDueDays.HasValue ?
                new ObjectParameter("PaymentDueDays", paymentDueDays) :
                new ObjectParameter("PaymentDueDays", typeof(int));
    
            var useFixedPaymentGracePeriodParameter = useFixedPaymentGracePeriod.HasValue ?
                new ObjectParameter("UseFixedPaymentGracePeriod", useFixedPaymentGracePeriod) :
                new ObjectParameter("UseFixedPaymentGracePeriod", typeof(bool));
    
            var paymentGracePeriodParameter = paymentGracePeriod.HasValue ?
                new ObjectParameter("PaymentGracePeriod", paymentGracePeriod) :
                new ObjectParameter("PaymentGracePeriod", typeof(int));
    
            var useFixedDiscountDateParameter = useFixedDiscountDate.HasValue ?
                new ObjectParameter("UseFixedDiscountDate", useFixedDiscountDate) :
                new ObjectParameter("UseFixedDiscountDate", typeof(bool));
    
            var discountDueDaysParameter = discountDueDays.HasValue ?
                new ObjectParameter("DiscountDueDays", discountDueDays) :
                new ObjectParameter("DiscountDueDays", typeof(int));
    
            var frequencyIDParameter = frequencyID.HasValue ?
                new ObjectParameter("FrequencyID", frequencyID) :
                new ObjectParameter("FrequencyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var isTestModeParameter = isTestMode.HasValue ?
                new ObjectParameter("IsTestMode", isTestMode) :
                new ObjectParameter("IsTestMode", typeof(bool));
    
            var collectionTemplateIDParameter = collectionTemplateID.HasValue ?
                new ObjectParameter("CollectionTemplateID", collectionTemplateID) :
                new ObjectParameter("CollectionTemplateID", typeof(int));
    
            var printTemplateIDParameter = printTemplateID.HasValue ?
                new ObjectParameter("PrintTemplateID", printTemplateID) :
                new ObjectParameter("PrintTemplateID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var mUNSERServiceExceptionJSONParameter = mUNSERServiceExceptionJSON != null ?
                new ObjectParameter("MUNSERServiceExceptionJSON", mUNSERServiceExceptionJSON) :
                new ObjectParameter("MUNSERServiceExceptionJSON", typeof(string));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var customField2Parameter = customField2 != null ?
                new ObjectParameter("CustomField2", customField2) :
                new ObjectParameter("CustomField2", typeof(string));
    
            var customField3Parameter = customField3 != null ?
                new ObjectParameter("CustomField3", customField3) :
                new ObjectParameter("CustomField3", typeof(string));
    
            var customDateFieldParameter = customDateField != null ?
                new ObjectParameter("CustomDateField", customDateField) :
                new ObjectParameter("CustomDateField", typeof(string));
    
            var allowDuplicateCustomField1Parameter = allowDuplicateCustomField1.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField1", allowDuplicateCustomField1) :
                new ObjectParameter("AllowDuplicateCustomField1", typeof(bool));
    
            var allowDuplicateCustomField2Parameter = allowDuplicateCustomField2.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField2", allowDuplicateCustomField2) :
                new ObjectParameter("AllowDuplicateCustomField2", typeof(bool));
    
            var allowDuplicateCustomField3Parameter = allowDuplicateCustomField3.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField3", allowDuplicateCustomField3) :
                new ObjectParameter("AllowDuplicateCustomField3", typeof(bool));
    
            var allowDuplicateCustomDateFieldParameter = allowDuplicateCustomDateField.HasValue ?
                new ObjectParameter("AllowDuplicateCustomDateField", allowDuplicateCustomDateField) :
                new ObjectParameter("AllowDuplicateCustomDateField", typeof(bool));
    
            var totalValueLabelParameter = totalValueLabel != null ?
                new ObjectParameter("TotalValueLabel", totalValueLabel) :
                new ObjectParameter("TotalValueLabel", typeof(string));
    
            var autoCreationParameter = autoCreation.HasValue ?
                new ObjectParameter("AutoCreation", autoCreation) :
                new ObjectParameter("AutoCreation", typeof(bool));
    
            var multipleServicesPerYearParameter = multipleServicesPerYear.HasValue ?
                new ObjectParameter("MultipleServicesPerYear", multipleServicesPerYear) :
                new ObjectParameter("MultipleServicesPerYear", typeof(bool));
    
            var accountTypeIDsParameter = accountTypeIDs != null ?
                new ObjectParameter("AccountTypeIDs", accountTypeIDs) :
                new ObjectParameter("AccountTypeIDs", typeof(string));
    
            var filingFormIDParameter = filingFormID.HasValue ?
                new ObjectParameter("FilingFormID", filingFormID) :
                new ObjectParameter("FilingFormID", typeof(int));
    
            var filingDueTypeParameter = filingDueType.HasValue ?
                new ObjectParameter("FilingDueType", filingDueType) :
                new ObjectParameter("FilingDueType", typeof(int));
    
            var paymentDueTypeParameter = paymentDueType.HasValue ?
                new ObjectParameter("PaymentDueType", paymentDueType) :
                new ObjectParameter("PaymentDueType", typeof(int));
    
            var discountDueTypeParameter = discountDueType.HasValue ?
                new ObjectParameter("DiscountDueType", discountDueType) :
                new ObjectParameter("DiscountDueType", typeof(int));
    
            var paymentGraceTypeParameter = paymentGraceType.HasValue ?
                new ObjectParameter("PaymentGraceType", paymentGraceType) :
                new ObjectParameter("PaymentGraceType", typeof(int));
    
            var customField4Parameter = customField4 != null ?
                new ObjectParameter("CustomField4", customField4) :
                new ObjectParameter("CustomField4", typeof(string));
    
            var allowDuplicateCustomField4Parameter = allowDuplicateCustomField4.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField4", allowDuplicateCustomField4) :
                new ObjectParameter("AllowDuplicateCustomField4", typeof(bool));
    
            var customField5Parameter = customField5 != null ?
                new ObjectParameter("CustomField5", customField5) :
                new ObjectParameter("CustomField5", typeof(string));
    
            var allowDuplicateCustomField5Parameter = allowDuplicateCustomField5.HasValue ?
                new ObjectParameter("AllowDuplicateCustomField5", allowDuplicateCustomField5) :
                new ObjectParameter("AllowDuplicateCustomField5", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERServiceUpdate", iDParameter, companyIDParameter, serviceTypeIDParameter, groupIDParameter, serviceNameParameter, localeParameter, descriptionParameter, codeParameter, filingTypeTableIDParameter, filingTypeIDParameter, useFixedFillingDueDateParameter, fillingDueDaysParameter, useFixedPaymentDueDateParameter, paymentDueDaysParameter, useFixedPaymentGracePeriodParameter, paymentGracePeriodParameter, useFixedDiscountDateParameter, discountDueDaysParameter, frequencyIDParameter, startDateParameter, endDateParameter, effectiveFromParameter, effectiveToParameter, sortParameter, isPublicParameter, isActiveParameter, isDeletedParameter, isLockedParameter, isTestModeParameter, collectionTemplateIDParameter, printTemplateIDParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, mUNSERServiceExceptionJSONParameter, customField1Parameter, customField2Parameter, customField3Parameter, customDateFieldParameter, allowDuplicateCustomField1Parameter, allowDuplicateCustomField2Parameter, allowDuplicateCustomField3Parameter, allowDuplicateCustomDateFieldParameter, totalValueLabelParameter, autoCreationParameter, multipleServicesPerYearParameter, accountTypeIDsParameter, filingFormIDParameter, filingDueTypeParameter, paymentDueTypeParameter, discountDueTypeParameter, paymentGraceTypeParameter, customField4Parameter, allowDuplicateCustomField4Parameter, customField5Parameter, allowDuplicateCustomField5Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERServiceUpdateFinanceItemId(Nullable<int> iD, Nullable<int> companyID, Nullable<int> fINItemID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fINItemIDParameter = fINItemID.HasValue ?
                new ObjectParameter("FINItemID", fINItemID) :
                new ObjectParameter("FINItemID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERServiceUpdateFinanceItemId", iDParameter, companyIDParameter, fINItemIDParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERServicePrintTemplateGet_Result> MUNSERServicePrintTemplateGet(Nullable<int> iD, Nullable<int> companyID, Nullable<int> documentTypeID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServicePrintTemplateGet_Result>("MUNSERServicePrintTemplateGet", iDParameter, companyIDParameter, documentTypeIDParameter, languageParameter);
        }
    
        public virtual int MUNSERServiceCollectionTemplateInsert(Nullable<int> companyID, string name, string description, Nullable<bool> isDeleteD, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> modifiedDate, Nullable<System.Guid> modifiedUserID, string locale, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeleteDParameter = isDeleteD.HasValue ?
                new ObjectParameter("IsDeleteD", isDeleteD) :
                new ObjectParameter("IsDeleteD", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERServiceCollectionTemplateInsert", companyIDParameter, nameParameter, descriptionParameter, isDeleteDParameter, isActiveParameter, createdDateParameter, createdUserIDParameter, modifiedDateParameter, modifiedUserIDParameter, localeParameter, iD);
        }
    
        public virtual int MUNSERServiceCollectionTemplateUpdate(Nullable<int> iD, Nullable<int> companyID, string name, string description, Nullable<bool> isDeleteD, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> modifiedDate, Nullable<System.Guid> modifiedUserID, string locale, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeleteDParameter = isDeleteD.HasValue ?
                new ObjectParameter("IsDeleteD", isDeleteD) :
                new ObjectParameter("IsDeleteD", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERServiceCollectionTemplateUpdate", iDParameter, companyIDParameter, nameParameter, descriptionParameter, isDeleteDParameter, isActiveParameter, createdDateParameter, createdUserIDParameter, modifiedDateParameter, modifiedUserIDParameter, localeParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceCollectionTemplateGet_Result> MUNSERServiceCollectionTemplateGet(Nullable<int> iD, Nullable<int> companyID, string locale, Nullable<bool> isActive, string filterText)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCollectionTemplateGet_Result>("MUNSERServiceCollectionTemplateGet", iDParameter, companyIDParameter, localeParameter, isActiveParameter, filterTextParameter);
        }
    
        public virtual int MUNSERServiceCollectionTemplateUpdateStatus(Nullable<int> iD, Nullable<int> companyID, Nullable<bool> isActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERServiceCollectionTemplateUpdateStatus", iDParameter, companyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceGetByCollectionField_Result> MUNSERServiceGetByCollectionField(Nullable<int> companyID, Nullable<int> collectionFieldID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var collectionFieldIDParameter = collectionFieldID.HasValue ?
                new ObjectParameter("CollectionFieldID", collectionFieldID) :
                new ObjectParameter("CollectionFieldID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceGetByCollectionField_Result>("MUNSERServiceGetByCollectionField", companyIDParameter, collectionFieldIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERPaymentPlanUpdateStatus(Nullable<int> companyID, Nullable<int> iD, Nullable<bool> isActive, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERPaymentPlanUpdateStatus", companyIDParameter, iDParameter, isActiveParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceExceptionGet_Result> MUNSERServiceExceptionGet(Nullable<int> iD, Nullable<int> serviceID, Nullable<int> companyID, string locale)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceExceptionGet_Result>("MUNSERServiceExceptionGet", iDParameter, serviceIDParameter, companyIDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceCollectionTemplateDetailGet_Result> MUNSERServiceCollectionTemplateDetailGet(Nullable<int> iD, Nullable<int> companyID, Nullable<int> collectionTemplateID, string locale)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var collectionTemplateIDParameter = collectionTemplateID.HasValue ?
                new ObjectParameter("CollectionTemplateID", collectionTemplateID) :
                new ObjectParameter("CollectionTemplateID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCollectionTemplateDetailGet_Result>("MUNSERServiceCollectionTemplateDetailGet", iDParameter, companyIDParameter, collectionTemplateIDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceCollectionTemplateGetWithPaging_Result> MUNSERServiceCollectionTemplateGetWithPaging(Nullable<int> companyID, string language, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCollectionTemplateGetWithPaging_Result>("MUNSERServiceCollectionTemplateGetWithPaging", companyIDParameter, languageParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNGrantListGet_Result> MUNGrantListGet(Nullable<int> companyID, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNGrantListGet_Result>("MUNGrantListGet", companyIDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceCollectionRuleGet_Result> MUNSERServiceCollectionRuleGet(Nullable<int> serviceID, Nullable<int> companyID, string language, Nullable<int> iD, Nullable<bool> isDeleted)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceCollectionRuleGet_Result>("MUNSERServiceCollectionRuleGet", serviceIDParameter, companyIDParameter, languageParameter, iDParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceGetWithPaging_Result> MUNSERServiceGetWithPaging(Nullable<int> iD, Nullable<int> companyID, string language, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder, Nullable<int> groupID, Nullable<int> serviceTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceGetWithPaging_Result>("MUNSERServiceGetWithPaging", iDParameter, companyIDParameter, languageParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter, groupIDParameter, serviceTypeIDParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceGet_Result> MUNSERServiceGet(Nullable<int> companyID, string language, Nullable<int> serviceTypeID, Nullable<int> groupID, Nullable<int> iD, Nullable<bool> isGetByEffectiveDate, string filingTypeID, Nullable<int> accountTypeID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isGetByEffectiveDateParameter = isGetByEffectiveDate.HasValue ?
                new ObjectParameter("IsGetByEffectiveDate", isGetByEffectiveDate) :
                new ObjectParameter("IsGetByEffectiveDate", typeof(bool));
    
            var filingTypeIDParameter = filingTypeID != null ?
                new ObjectParameter("FilingTypeID", filingTypeID) :
                new ObjectParameter("FilingTypeID", typeof(string));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceGet_Result>("MUNSERServiceGet", companyIDParameter, languageParameter, serviceTypeIDParameter, groupIDParameter, iDParameter, isGetByEffectiveDateParameter, filingTypeIDParameter, accountTypeIDParameter);
        }
    
        public virtual ObjectResult<MUNSERPaymentPlanGetWithPaging_Result> MUNSERPaymentPlanGetWithPaging(Nullable<int> companyID, string locale, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERPaymentPlanGetWithPaging_Result>("MUNSERPaymentPlanGetWithPaging", companyIDParameter, localeParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<MUNSERPaymentPlanGet_Result> MUNSERPaymentPlanGet(Nullable<int> companyID, string locale, Nullable<int> iD, Nullable<System.DateTime> date, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERPaymentPlanGet_Result>("MUNSERPaymentPlanGet", companyIDParameter, localeParameter, iDParameter, dateParameter, isActiveParameter);
        }
    
        public virtual int MUNSERPaymentPlanInsert(Nullable<int> companyID, string locale, string name, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<decimal> instalmentPercentage, Nullable<decimal> interestPercentage, Nullable<decimal> lateInterestPercentage, Nullable<int> months, Nullable<bool> isEditable, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter paymentPlanID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var instalmentPercentageParameter = instalmentPercentage.HasValue ?
                new ObjectParameter("InstalmentPercentage", instalmentPercentage) :
                new ObjectParameter("InstalmentPercentage", typeof(decimal));
    
            var interestPercentageParameter = interestPercentage.HasValue ?
                new ObjectParameter("InterestPercentage", interestPercentage) :
                new ObjectParameter("InterestPercentage", typeof(decimal));
    
            var lateInterestPercentageParameter = lateInterestPercentage.HasValue ?
                new ObjectParameter("LateInterestPercentage", lateInterestPercentage) :
                new ObjectParameter("LateInterestPercentage", typeof(decimal));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var isEditableParameter = isEditable.HasValue ?
                new ObjectParameter("IsEditable", isEditable) :
                new ObjectParameter("IsEditable", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERPaymentPlanInsert", companyIDParameter, localeParameter, nameParameter, effectiveFromParameter, effectiveToParameter, instalmentPercentageParameter, interestPercentageParameter, lateInterestPercentageParameter, monthsParameter, isEditableParameter, isActiveParameter, isDeletedParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, paymentPlanID);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERPaymentPlanUpdate(Nullable<int> iD, Nullable<int> companyID, string locale, string name, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<decimal> instalmentPercentage, Nullable<decimal> interestPercentage, Nullable<decimal> lateInterestPercentage, Nullable<int> months, Nullable<bool> isEditable, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var instalmentPercentageParameter = instalmentPercentage.HasValue ?
                new ObjectParameter("InstalmentPercentage", instalmentPercentage) :
                new ObjectParameter("InstalmentPercentage", typeof(decimal));
    
            var interestPercentageParameter = interestPercentage.HasValue ?
                new ObjectParameter("InterestPercentage", interestPercentage) :
                new ObjectParameter("InterestPercentage", typeof(decimal));
    
            var lateInterestPercentageParameter = lateInterestPercentage.HasValue ?
                new ObjectParameter("LateInterestPercentage", lateInterestPercentage) :
                new ObjectParameter("LateInterestPercentage", typeof(decimal));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var isEditableParameter = isEditable.HasValue ?
                new ObjectParameter("IsEditable", isEditable) :
                new ObjectParameter("IsEditable", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERPaymentPlanUpdate", iDParameter, companyIDParameter, localeParameter, nameParameter, effectiveFromParameter, effectiveToParameter, instalmentPercentageParameter, interestPercentageParameter, lateInterestPercentageParameter, monthsParameter, isEditableParameter, isActiveParameter, isDeletedParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceGetForFACTU_Result> MUNSERServiceGetForFACTU(Nullable<int> companyID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceGetForFACTU_Result>("MUNSERServiceGetForFACTU", companyIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceGetForCobros_Result> MUNSERServiceGetForCobros(Nullable<int> companyID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceGetForCobros_Result>("MUNSERServiceGetForCobros", companyIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceListGet_Result> MUNSERServiceListGet(Nullable<int> companyID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceListGet_Result>("MUNSERServiceListGet", companyIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSchedulerEmailGetWithPaging_Result> MUNSchedulerEmailGetWithPaging(Nullable<int> iD, Nullable<int> companyID, string language, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSchedulerEmailGetWithPaging_Result>("MUNSchedulerEmailGetWithPaging", iDParameter, companyIDParameter, languageParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int MUNSchedulerEmailInsert(Nullable<int> companyID, string email, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter schedulerEmailID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSchedulerEmailInsert", companyIDParameter, emailParameter, isActiveParameter, isDeletedParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, schedulerEmailID);
        }
    
        public virtual int MUNSchedulerEmailUpdate(Nullable<int> iD, Nullable<int> companyID, string email, Nullable<bool> isActive, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSchedulerEmailUpdate", iDParameter, companyIDParameter, emailParameter, isActiveParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSchedulerEmailGet_Result> MUNSchedulerEmailGet(Nullable<int> companyID, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSchedulerEmailGet_Result>("MUNSchedulerEmailGet", companyIDParameter, iDParameter);
        }
    
        public virtual int MUNSchedulerEmaileDelete(Nullable<int> iD, string reason, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSchedulerEmaileDelete", iDParameter, reasonParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    }
}
