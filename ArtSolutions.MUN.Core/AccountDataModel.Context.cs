//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AccountDataModelContainer : DbContext
    {
        public AccountDataModelContainer()
            : base("name=AccountDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<MUNAccountAddressesUpdate_Result> MUNAccountAddressesUpdate(Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountAddressesUpdate_Result>("MUNAccountAddressesUpdate", modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNAccountContactsUpdate_Result> MUNAccountContactsUpdate(Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountContactsUpdate_Result>("MUNAccountContactsUpdate", modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNCompanyCurrenciesGet_Result> MUNCompanyCurrenciesGet(Nullable<int> companyID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCompanyCurrenciesGet_Result>("MUNCompanyCurrenciesGet", companyIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNCountryStateGet_Result> MUNCountryStateGet(Nullable<int> countryID, string language)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCountryStateGet_Result>("MUNCountryStateGet", countryIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNCountryGet_Result> MUNCountryGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCountryGet_Result>("MUNCountryGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNSUPSupportTableValueGet_Result> MUNSUPSupportTableValueGet(Nullable<int> companyID, Nullable<int> tableID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSUPSupportTableValueGet_Result>("MUNSUPSupportTableValueGet", companyIDParameter, tableIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountFilesUpdate_Result> MUNAccountFilesUpdate(Nullable<int> fileID, Nullable<int> accountID, Nullable<int> companyID, Nullable<int> fileTypeID, Nullable<int> fileTypeTableID, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fileTypeIDParameter = fileTypeID.HasValue ?
                new ObjectParameter("FileTypeID", fileTypeID) :
                new ObjectParameter("FileTypeID", typeof(int));
    
            var fileTypeTableIDParameter = fileTypeTableID.HasValue ?
                new ObjectParameter("FileTypeTableID", fileTypeTableID) :
                new ObjectParameter("FileTypeTableID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountFilesUpdate_Result>("MUNAccountFilesUpdate", fileIDParameter, accountIDParameter, companyIDParameter, fileTypeIDParameter, fileTypeTableIDParameter, isActiveParameter, isDeletedParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNAccountPhonesUpdate_Result> MUNAccountPhonesUpdate(Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPhonesUpdate_Result>("MUNAccountPhonesUpdate", modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNCurrencyGet_Result> MUNCurrencyGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCurrencyGet_Result>("MUNCurrencyGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountUpdate_Result> MUNAccountUpdate(Nullable<int> iD, string registerNumber, Nullable<int> accountTypeID, Nullable<int> isBusiness, Nullable<int> parentID, string displayName, string printCheckAs, string businessDescription, Nullable<int> currencyID, string currencyISOCode, string notes, string website, string taxNumber, string treasuryNumber, string stateNumber, Nullable<System.DateTime> initialDate, Nullable<bool> isActive, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, Nullable<bool> isSponsor)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerNumberParameter = registerNumber != null ?
                new ObjectParameter("RegisterNumber", registerNumber) :
                new ObjectParameter("RegisterNumber", typeof(string));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var isBusinessParameter = isBusiness.HasValue ?
                new ObjectParameter("IsBusiness", isBusiness) :
                new ObjectParameter("IsBusiness", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var printCheckAsParameter = printCheckAs != null ?
                new ObjectParameter("PrintCheckAs", printCheckAs) :
                new ObjectParameter("PrintCheckAs", typeof(string));
    
            var businessDescriptionParameter = businessDescription != null ?
                new ObjectParameter("BusinessDescription", businessDescription) :
                new ObjectParameter("BusinessDescription", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyISOCodeParameter = currencyISOCode != null ?
                new ObjectParameter("CurrencyISOCode", currencyISOCode) :
                new ObjectParameter("CurrencyISOCode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("InitialDate", initialDate) :
                new ObjectParameter("InitialDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var isSponsorParameter = isSponsor.HasValue ?
                new ObjectParameter("IsSponsor", isSponsor) :
                new ObjectParameter("IsSponsor", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountUpdate_Result>("MUNAccountUpdate", iDParameter, registerNumberParameter, accountTypeIDParameter, isBusinessParameter, parentIDParameter, displayNameParameter, printCheckAsParameter, businessDescriptionParameter, currencyIDParameter, currencyISOCodeParameter, notesParameter, websiteParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, initialDateParameter, isActiveParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, isSponsorParameter);
        }
    
        public virtual int MUNSERAccountServiceCollectionDetailInsert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceCollectionDetailInsert");
        }
    
        public virtual int MUNSERFillingPaymentCalculation(Nullable<int> accountServiceCollectionDetailID, Nullable<System.Guid> createdUserID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isFutureCalculation)
        {
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isFutureCalculationParameter = isFutureCalculation.HasValue ?
                new ObjectParameter("IsFutureCalculation", isFutureCalculation) :
                new ObjectParameter("IsFutureCalculation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingPaymentCalculation", accountServiceCollectionDetailIDParameter, createdUserIDParameter, modifiedUserIDParameter, createdDateParameter, modifiedDateParameter, isFutureCalculationParameter);
        }
    
        public virtual ObjectResult<MUNSERFiscalYearGet_Result> MUNSERFiscalYearGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFiscalYearGet_Result>("MUNSERFiscalYearGet");
        }
    
        public virtual ObjectResult<MUNAccountGetWithPaging_Result> MUNAccountGetWithPaging(Nullable<int> companyID, string language, Nullable<bool> status, Nullable<int> accountTypeID, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGetWithPaging_Result>("MUNAccountGetWithPaging", companyIDParameter, languageParameter, statusParameter, accountTypeIDParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int MUNAccountBusinessUpdate(Nullable<int> accountID, string registerNumber, Nullable<int> companyID, Nullable<int> accountTypeID, Nullable<int> isBusiness, Nullable<int> parentID, string displayName, string printCheckAs, string businessDescription, Nullable<int> currencyID, string currencyISOCode, string notes, string website, string taxNumber, string treasuryNumber, string stateNumber, Nullable<System.DateTime> initialDate, Nullable<bool> isActive, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string legalName, string dBAName, Nullable<int> nAICSCodeID, Nullable<int> nAICSCodeIDTable, Nullable<int> businessTypeID, Nullable<int> businessTypeTableID, Nullable<int> zoneID, Nullable<int> zoneTableID, string aRPEDescription, Nullable<System.Guid> inactiveByUserID, Nullable<System.DateTime> inactiveDate, byte[] original_RowVersion, Nullable<bool> isSponsor, Nullable<bool> exemptFromIVA, string referenceID, string banacioIdentifica)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var registerNumberParameter = registerNumber != null ?
                new ObjectParameter("RegisterNumber", registerNumber) :
                new ObjectParameter("RegisterNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var isBusinessParameter = isBusiness.HasValue ?
                new ObjectParameter("IsBusiness", isBusiness) :
                new ObjectParameter("IsBusiness", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var printCheckAsParameter = printCheckAs != null ?
                new ObjectParameter("PrintCheckAs", printCheckAs) :
                new ObjectParameter("PrintCheckAs", typeof(string));
    
            var businessDescriptionParameter = businessDescription != null ?
                new ObjectParameter("BusinessDescription", businessDescription) :
                new ObjectParameter("BusinessDescription", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyISOCodeParameter = currencyISOCode != null ?
                new ObjectParameter("CurrencyISOCode", currencyISOCode) :
                new ObjectParameter("CurrencyISOCode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("InitialDate", initialDate) :
                new ObjectParameter("InitialDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var dBANameParameter = dBAName != null ?
                new ObjectParameter("DBAName", dBAName) :
                new ObjectParameter("DBAName", typeof(string));
    
            var nAICSCodeIDParameter = nAICSCodeID.HasValue ?
                new ObjectParameter("NAICSCodeID", nAICSCodeID) :
                new ObjectParameter("NAICSCodeID", typeof(int));
    
            var nAICSCodeIDTableParameter = nAICSCodeIDTable.HasValue ?
                new ObjectParameter("NAICSCodeIDTable", nAICSCodeIDTable) :
                new ObjectParameter("NAICSCodeIDTable", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessTypeTableIDParameter = businessTypeTableID.HasValue ?
                new ObjectParameter("BusinessTypeTableID", businessTypeTableID) :
                new ObjectParameter("BusinessTypeTableID", typeof(int));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            var zoneTableIDParameter = zoneTableID.HasValue ?
                new ObjectParameter("ZoneTableID", zoneTableID) :
                new ObjectParameter("ZoneTableID", typeof(int));
    
            var aRPEDescriptionParameter = aRPEDescription != null ?
                new ObjectParameter("ARPEDescription", aRPEDescription) :
                new ObjectParameter("ARPEDescription", typeof(string));
    
            var inactiveByUserIDParameter = inactiveByUserID.HasValue ?
                new ObjectParameter("InactiveByUserID", inactiveByUserID) :
                new ObjectParameter("InactiveByUserID", typeof(System.Guid));
    
            var inactiveDateParameter = inactiveDate.HasValue ?
                new ObjectParameter("InactiveDate", inactiveDate) :
                new ObjectParameter("InactiveDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var isSponsorParameter = isSponsor.HasValue ?
                new ObjectParameter("IsSponsor", isSponsor) :
                new ObjectParameter("IsSponsor", typeof(bool));
    
            var exemptFromIVAParameter = exemptFromIVA.HasValue ?
                new ObjectParameter("ExemptFromIVA", exemptFromIVA) :
                new ObjectParameter("ExemptFromIVA", typeof(bool));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var banacioIdentificaParameter = banacioIdentifica != null ?
                new ObjectParameter("BanacioIdentifica", banacioIdentifica) :
                new ObjectParameter("BanacioIdentifica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountBusinessUpdate", accountIDParameter, registerNumberParameter, companyIDParameter, accountTypeIDParameter, isBusinessParameter, parentIDParameter, displayNameParameter, printCheckAsParameter, businessDescriptionParameter, currencyIDParameter, currencyISOCodeParameter, notesParameter, websiteParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, initialDateParameter, isActiveParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, legalNameParameter, dBANameParameter, nAICSCodeIDParameter, nAICSCodeIDTableParameter, businessTypeIDParameter, businessTypeTableIDParameter, zoneIDParameter, zoneTableIDParameter, aRPEDescriptionParameter, inactiveByUserIDParameter, inactiveDateParameter, original_RowVersionParameter, isSponsorParameter, exemptFromIVAParameter, referenceIDParameter, banacioIdentificaParameter);
        }
    
        public virtual int MUNAccountIndividualUpdate(Nullable<int> accountID, string registerNumber, Nullable<int> companyID, Nullable<int> accountTypeID, Nullable<int> isBusiness, Nullable<int> parentID, string displayName, string printCheckAs, string businessDescription, Nullable<int> currencyID, string currencyISOCode, string notes, string website, string taxNumber, string treasuryNumber, string stateNumber, Nullable<System.DateTime> initialDate, Nullable<bool> isActive, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, Nullable<int> salutationID, Nullable<int> salutationTableID, string firstName, string middleName, string lastName, string secondLastName, Nullable<int> suffixID, Nullable<int> suffixTableID, Nullable<System.Guid> inactiveByUserID, Nullable<System.DateTime> inactiveDate, byte[] original_RowVersion, Nullable<bool> isSponsor, Nullable<bool> exemptFromIVA, string referenceID, string banacioIdentifica, Nullable<int> iDTypeID, Nullable<int> iDTypeIDTableID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var registerNumberParameter = registerNumber != null ?
                new ObjectParameter("RegisterNumber", registerNumber) :
                new ObjectParameter("RegisterNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var isBusinessParameter = isBusiness.HasValue ?
                new ObjectParameter("IsBusiness", isBusiness) :
                new ObjectParameter("IsBusiness", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var printCheckAsParameter = printCheckAs != null ?
                new ObjectParameter("PrintCheckAs", printCheckAs) :
                new ObjectParameter("PrintCheckAs", typeof(string));
    
            var businessDescriptionParameter = businessDescription != null ?
                new ObjectParameter("BusinessDescription", businessDescription) :
                new ObjectParameter("BusinessDescription", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyISOCodeParameter = currencyISOCode != null ?
                new ObjectParameter("CurrencyISOCode", currencyISOCode) :
                new ObjectParameter("CurrencyISOCode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("InitialDate", initialDate) :
                new ObjectParameter("InitialDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var salutationIDParameter = salutationID.HasValue ?
                new ObjectParameter("SalutationID", salutationID) :
                new ObjectParameter("SalutationID", typeof(int));
    
            var salutationTableIDParameter = salutationTableID.HasValue ?
                new ObjectParameter("SalutationTableID", salutationTableID) :
                new ObjectParameter("SalutationTableID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var secondLastNameParameter = secondLastName != null ?
                new ObjectParameter("SecondLastName", secondLastName) :
                new ObjectParameter("SecondLastName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var suffixTableIDParameter = suffixTableID.HasValue ?
                new ObjectParameter("SuffixTableID", suffixTableID) :
                new ObjectParameter("SuffixTableID", typeof(int));
    
            var inactiveByUserIDParameter = inactiveByUserID.HasValue ?
                new ObjectParameter("InactiveByUserID", inactiveByUserID) :
                new ObjectParameter("InactiveByUserID", typeof(System.Guid));
    
            var inactiveDateParameter = inactiveDate.HasValue ?
                new ObjectParameter("InactiveDate", inactiveDate) :
                new ObjectParameter("InactiveDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var isSponsorParameter = isSponsor.HasValue ?
                new ObjectParameter("IsSponsor", isSponsor) :
                new ObjectParameter("IsSponsor", typeof(bool));
    
            var exemptFromIVAParameter = exemptFromIVA.HasValue ?
                new ObjectParameter("ExemptFromIVA", exemptFromIVA) :
                new ObjectParameter("ExemptFromIVA", typeof(bool));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var banacioIdentificaParameter = banacioIdentifica != null ?
                new ObjectParameter("BanacioIdentifica", banacioIdentifica) :
                new ObjectParameter("BanacioIdentifica", typeof(string));
    
            var iDTypeIDParameter = iDTypeID.HasValue ?
                new ObjectParameter("IDTypeID", iDTypeID) :
                new ObjectParameter("IDTypeID", typeof(int));
    
            var iDTypeIDTableIDParameter = iDTypeIDTableID.HasValue ?
                new ObjectParameter("IDTypeIDTableID", iDTypeIDTableID) :
                new ObjectParameter("IDTypeIDTableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountIndividualUpdate", accountIDParameter, registerNumberParameter, companyIDParameter, accountTypeIDParameter, isBusinessParameter, parentIDParameter, displayNameParameter, printCheckAsParameter, businessDescriptionParameter, currencyIDParameter, currencyISOCodeParameter, notesParameter, websiteParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, initialDateParameter, isActiveParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, salutationIDParameter, salutationTableIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, secondLastNameParameter, suffixIDParameter, suffixTableIDParameter, inactiveByUserIDParameter, inactiveDateParameter, original_RowVersionParameter, isSponsorParameter, exemptFromIVAParameter, referenceIDParameter, banacioIdentificaParameter, iDTypeIDParameter, iDTypeIDTableIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountContactsGet_Result> MUNAccountContactsGet(Nullable<int> iD, Nullable<int> accountID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountContactsGet_Result>("MUNAccountContactsGet", iDParameter, accountIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountFilesGet_Result> MUNAccountFilesGet(Nullable<int> fileID, Nullable<int> accountID, string language)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountFilesGet_Result>("MUNAccountFilesGet", fileIDParameter, accountIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountEmailsGet_Result> MUNAccountEmailsGet(Nullable<int> iD, Nullable<int> accountID, Nullable<int> emailTypeID, Nullable<int> emailTypeTableID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var emailTypeIDParameter = emailTypeID.HasValue ?
                new ObjectParameter("EmailTypeID", emailTypeID) :
                new ObjectParameter("EmailTypeID", typeof(int));
    
            var emailTypeTableIDParameter = emailTypeTableID.HasValue ?
                new ObjectParameter("EmailTypeTableID", emailTypeTableID) :
                new ObjectParameter("EmailTypeTableID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountEmailsGet_Result>("MUNAccountEmailsGet", iDParameter, accountIDParameter, emailTypeIDParameter, emailTypeTableIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountPhonesGet_Result> MUNAccountPhonesGet(Nullable<int> iD, Nullable<int> accountID, Nullable<int> phoneTypeID, Nullable<int> phoneTypeTableID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var phoneTypeIDParameter = phoneTypeID.HasValue ?
                new ObjectParameter("PhoneTypeID", phoneTypeID) :
                new ObjectParameter("PhoneTypeID", typeof(int));
    
            var phoneTypeTableIDParameter = phoneTypeTableID.HasValue ?
                new ObjectParameter("PhoneTypeTableID", phoneTypeTableID) :
                new ObjectParameter("PhoneTypeTableID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPhonesGet_Result>("MUNAccountPhonesGet", iDParameter, accountIDParameter, phoneTypeIDParameter, phoneTypeTableIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceTypeGet_Result> MUNSERServiceTypeGet(Nullable<int> companyID, string language, Nullable<int> groupID, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceTypeGet_Result>("MUNSERServiceTypeGet", companyIDParameter, languageParameter, groupIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNSERServiceTypeGroupGet_Result> MUNSERServiceTypeGroupGet(Nullable<int> companyID, string language, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERServiceTypeGroupGet_Result>("MUNSERServiceTypeGroupGet", companyIDParameter, languageParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNAccountBusinessGet_Result> MUNAccountBusinessGet(Nullable<int> accountID, Nullable<int> iSSubAccount, string language, string filterText)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iSSubAccountParameter = iSSubAccount.HasValue ?
                new ObjectParameter("ISSubAccount", iSSubAccount) :
                new ObjectParameter("ISSubAccount", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountBusinessGet_Result>("MUNAccountBusinessGet", accountIDParameter, iSSubAccountParameter, languageParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<MUNAccountGetByRegistrationInformation_Result> MUNAccountGetByRegistrationInformation(string taxNumber, string treasuryNumber, string stateNumber, Nullable<int> iD)
        {
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGetByRegistrationInformation_Result>("MUNAccountGetByRegistrationInformation", taxNumberParameter, treasuryNumberParameter, stateNumberParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNSERFiscalYearGetByService_Result> MUNSERFiscalYearGetByService(Nullable<int> serviceID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFiscalYearGetByService_Result>("MUNSERFiscalYearGetByService", serviceIDParameter);
        }
    
        public virtual int MUNAccountBusinessInsert(ObjectParameter registerNumber, Nullable<int> companyID, Nullable<int> accountTypeID, Nullable<int> isBusiness, Nullable<int> parentID, string displayName, string printCheckAs, string businessDescription, Nullable<int> currencyID, string currencyISOCode, string notes, string website, string taxNumber, string treasuryNumber, string stateNumber, Nullable<System.DateTime> initialDate, Nullable<bool> isActive, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string legalName, string dBAName, Nullable<int> nAICSCodeID, Nullable<int> nAICSCodeIDTable, Nullable<int> businessTypeID, Nullable<int> businessTypeTableID, Nullable<int> zoneID, Nullable<int> zoneTableID, string aRPEDescription, Nullable<bool> isSponsor, Nullable<bool> exemptFromIVA, string referenceID, string banacioIdentifica, ObjectParameter accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var isBusinessParameter = isBusiness.HasValue ?
                new ObjectParameter("IsBusiness", isBusiness) :
                new ObjectParameter("IsBusiness", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var printCheckAsParameter = printCheckAs != null ?
                new ObjectParameter("PrintCheckAs", printCheckAs) :
                new ObjectParameter("PrintCheckAs", typeof(string));
    
            var businessDescriptionParameter = businessDescription != null ?
                new ObjectParameter("BusinessDescription", businessDescription) :
                new ObjectParameter("BusinessDescription", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyISOCodeParameter = currencyISOCode != null ?
                new ObjectParameter("CurrencyISOCode", currencyISOCode) :
                new ObjectParameter("CurrencyISOCode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("InitialDate", initialDate) :
                new ObjectParameter("InitialDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var dBANameParameter = dBAName != null ?
                new ObjectParameter("DBAName", dBAName) :
                new ObjectParameter("DBAName", typeof(string));
    
            var nAICSCodeIDParameter = nAICSCodeID.HasValue ?
                new ObjectParameter("NAICSCodeID", nAICSCodeID) :
                new ObjectParameter("NAICSCodeID", typeof(int));
    
            var nAICSCodeIDTableParameter = nAICSCodeIDTable.HasValue ?
                new ObjectParameter("NAICSCodeIDTable", nAICSCodeIDTable) :
                new ObjectParameter("NAICSCodeIDTable", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessTypeTableIDParameter = businessTypeTableID.HasValue ?
                new ObjectParameter("BusinessTypeTableID", businessTypeTableID) :
                new ObjectParameter("BusinessTypeTableID", typeof(int));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            var zoneTableIDParameter = zoneTableID.HasValue ?
                new ObjectParameter("ZoneTableID", zoneTableID) :
                new ObjectParameter("ZoneTableID", typeof(int));
    
            var aRPEDescriptionParameter = aRPEDescription != null ?
                new ObjectParameter("ARPEDescription", aRPEDescription) :
                new ObjectParameter("ARPEDescription", typeof(string));
    
            var isSponsorParameter = isSponsor.HasValue ?
                new ObjectParameter("IsSponsor", isSponsor) :
                new ObjectParameter("IsSponsor", typeof(bool));
    
            var exemptFromIVAParameter = exemptFromIVA.HasValue ?
                new ObjectParameter("ExemptFromIVA", exemptFromIVA) :
                new ObjectParameter("ExemptFromIVA", typeof(bool));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var banacioIdentificaParameter = banacioIdentifica != null ?
                new ObjectParameter("BanacioIdentifica", banacioIdentifica) :
                new ObjectParameter("BanacioIdentifica", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountBusinessInsert", registerNumber, companyIDParameter, accountTypeIDParameter, isBusinessParameter, parentIDParameter, displayNameParameter, printCheckAsParameter, businessDescriptionParameter, currencyIDParameter, currencyISOCodeParameter, notesParameter, websiteParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, initialDateParameter, isActiveParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, legalNameParameter, dBANameParameter, nAICSCodeIDParameter, nAICSCodeIDTableParameter, businessTypeIDParameter, businessTypeTableIDParameter, zoneIDParameter, zoneTableIDParameter, aRPEDescriptionParameter, isSponsorParameter, exemptFromIVAParameter, referenceIDParameter, banacioIdentificaParameter, accountID);
        }
    
        public virtual int MUNAccountIndividualInsert(ObjectParameter registerNumber, Nullable<int> companyID, Nullable<int> accountTypeID, Nullable<int> isBusiness, Nullable<int> parentID, string displayName, string printCheckAs, string businessDescription, Nullable<int> currencyID, string currencyISOCode, string notes, string website, string taxNumber, string treasuryNumber, string stateNumber, Nullable<System.DateTime> initialDate, Nullable<bool> isActive, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, Nullable<int> salutationID, Nullable<int> salutationTableID, string firstName, string middleName, string lastName, string secondLastName, Nullable<int> suffixID, Nullable<int> suffixTableID, Nullable<bool> isSponsor, Nullable<bool> exemptFromIVA, string referenceID, string banacioIdentifica, Nullable<int> iDTypeID, Nullable<int> iDTypeIDTableID, ObjectParameter accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var isBusinessParameter = isBusiness.HasValue ?
                new ObjectParameter("IsBusiness", isBusiness) :
                new ObjectParameter("IsBusiness", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var printCheckAsParameter = printCheckAs != null ?
                new ObjectParameter("PrintCheckAs", printCheckAs) :
                new ObjectParameter("PrintCheckAs", typeof(string));
    
            var businessDescriptionParameter = businessDescription != null ?
                new ObjectParameter("BusinessDescription", businessDescription) :
                new ObjectParameter("BusinessDescription", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyISOCodeParameter = currencyISOCode != null ?
                new ObjectParameter("CurrencyISOCode", currencyISOCode) :
                new ObjectParameter("CurrencyISOCode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var initialDateParameter = initialDate.HasValue ?
                new ObjectParameter("InitialDate", initialDate) :
                new ObjectParameter("InitialDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var salutationIDParameter = salutationID.HasValue ?
                new ObjectParameter("SalutationID", salutationID) :
                new ObjectParameter("SalutationID", typeof(int));
    
            var salutationTableIDParameter = salutationTableID.HasValue ?
                new ObjectParameter("SalutationTableID", salutationTableID) :
                new ObjectParameter("SalutationTableID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var secondLastNameParameter = secondLastName != null ?
                new ObjectParameter("SecondLastName", secondLastName) :
                new ObjectParameter("SecondLastName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var suffixTableIDParameter = suffixTableID.HasValue ?
                new ObjectParameter("SuffixTableID", suffixTableID) :
                new ObjectParameter("SuffixTableID", typeof(int));
    
            var isSponsorParameter = isSponsor.HasValue ?
                new ObjectParameter("IsSponsor", isSponsor) :
                new ObjectParameter("IsSponsor", typeof(bool));
    
            var exemptFromIVAParameter = exemptFromIVA.HasValue ?
                new ObjectParameter("ExemptFromIVA", exemptFromIVA) :
                new ObjectParameter("ExemptFromIVA", typeof(bool));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var banacioIdentificaParameter = banacioIdentifica != null ?
                new ObjectParameter("BanacioIdentifica", banacioIdentifica) :
                new ObjectParameter("BanacioIdentifica", typeof(string));
    
            var iDTypeIDParameter = iDTypeID.HasValue ?
                new ObjectParameter("IDTypeID", iDTypeID) :
                new ObjectParameter("IDTypeID", typeof(int));
    
            var iDTypeIDTableIDParameter = iDTypeIDTableID.HasValue ?
                new ObjectParameter("IDTypeIDTableID", iDTypeIDTableID) :
                new ObjectParameter("IDTypeIDTableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountIndividualInsert", registerNumber, companyIDParameter, accountTypeIDParameter, isBusinessParameter, parentIDParameter, displayNameParameter, printCheckAsParameter, businessDescriptionParameter, currencyIDParameter, currencyISOCodeParameter, notesParameter, websiteParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, initialDateParameter, isActiveParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, salutationIDParameter, salutationTableIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, secondLastNameParameter, suffixIDParameter, suffixTableIDParameter, isSponsorParameter, exemptFromIVAParameter, referenceIDParameter, banacioIdentificaParameter, iDTypeIDParameter, iDTypeIDTableIDParameter, accountID);
        }
    
        public virtual ObjectResult<MUNAccountGetForSupportTable_Result> MUNAccountGetForSupportTable(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGetForSupportTable_Result>("MUNAccountGetForSupportTable", accountIDParameter);
        }
    
        public virtual int MUNAccountSupportTableInsert(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountSupportTableInsert", accountIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountIndividualGet_Result> MUNAccountIndividualGet(string locale, Nullable<int> accountID)
        {
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountIndividualGet_Result>("MUNAccountIndividualGet", localeParameter, accountIDParameter);
        }
    
        public virtual int MUNSERAccountServiceCollectionDetailUpdate(Nullable<int> accountServiceCollectionID, Nullable<int> companyId, Nullable<decimal> amountSubjectToTax, Nullable<decimal> principal, Nullable<decimal> penalties, Nullable<decimal> charges, Nullable<decimal> interest, Nullable<decimal> tax, Nullable<decimal> discount, Nullable<decimal> discountPercentage, Nullable<decimal> balance, Nullable<decimal> paidAmount, Nullable<bool> isPayed, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var amountSubjectToTaxParameter = amountSubjectToTax.HasValue ?
                new ObjectParameter("AmountSubjectToTax", amountSubjectToTax) :
                new ObjectParameter("AmountSubjectToTax", typeof(decimal));
    
            var principalParameter = principal.HasValue ?
                new ObjectParameter("Principal", principal) :
                new ObjectParameter("Principal", typeof(decimal));
    
            var penaltiesParameter = penalties.HasValue ?
                new ObjectParameter("Penalties", penalties) :
                new ObjectParameter("Penalties", typeof(decimal));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var isPayedParameter = isPayed.HasValue ?
                new ObjectParameter("IsPayed", isPayed) :
                new ObjectParameter("IsPayed", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceCollectionDetailUpdate", accountServiceCollectionIDParameter, companyIdParameter, amountSubjectToTaxParameter, principalParameter, penaltiesParameter, chargesParameter, interestParameter, taxParameter, discountParameter, discountPercentageParameter, balanceParameter, paidAmountParameter, isPayedParameter, isActiveParameter, isDeletedParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetForInvoice_Result> MUNSERAccountServiceGetForInvoice(Nullable<int> accountServiceID, string language)
        {
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetForInvoice_Result>("MUNSERAccountServiceGetForInvoice", accountServiceIDParameter, languageParameter);
        }
    
        public virtual int MUNSERAccountServiceCollectionPaymentUpdate(Nullable<int> fINInvoiceID, Nullable<decimal> amountPaid, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var fINInvoiceIDParameter = fINInvoiceID.HasValue ?
                new ObjectParameter("FINInvoiceID", fINInvoiceID) :
                new ObjectParameter("FINInvoiceID", typeof(int));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(decimal));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceCollectionPaymentUpdate", fINInvoiceIDParameter, amountPaidParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingLicenseInsert_Result> MUNSERFillingLicenseInsert(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> grossVolume, Nullable<decimal> exemptionAmount, Nullable<decimal> percentageValue, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingLicenseImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var grossVolumeParameter = grossVolume.HasValue ?
                new ObjectParameter("GrossVolume", grossVolume) :
                new ObjectParameter("GrossVolume", typeof(decimal));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var percentageValueParameter = percentageValue.HasValue ?
                new ObjectParameter("PercentageValue", percentageValue) :
                new ObjectParameter("PercentageValue", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingLicenseImageIDsParameter = commaSeperatedFillingLicenseImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingLicenseImageIDs", commaSeperatedFillingLicenseImageIDs) :
                new ObjectParameter("CommaSeperatedFillingLicenseImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingLicenseInsert_Result>("MUNSERFillingLicenseInsert", companyIDParameter, accountServiceCollectionIDParameter, grossVolumeParameter, exemptionAmountParameter, percentageValueParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingLicenseImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERFiscalYearGetByAccount_Result> MUNSERFiscalYearGetByAccount(Nullable<int> accountID, Nullable<int> companyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFiscalYearGetByAccount_Result>("MUNSERFiscalYearGetByAccount", accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDetailGetNotFiled_Result> MUNSERAccountServiceCollectionDetailGetNotFiled(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDetailGetNotFiled_Result>("MUNSERAccountServiceCollectionDetailGetNotFiled", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceNotFiled_Result> MUNSERAccountServiceNotFiled(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> fiscalYearID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceNotFiled_Result>("MUNSERAccountServiceNotFiled", companyIDParameter, accountIDParameter, fiscalYearIDParameter, languageParameter);
        }
    
        public virtual int MUNSERFiscalYearGetNotFiledByAccount(Nullable<int> accountID, Nullable<int> companyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFiscalYearGetNotFiledByAccount", accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetNotFiled_Result> MUNSERAccountServiceGetNotFiled(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> fiscalYearID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetNotFiled_Result>("MUNSERAccountServiceGetNotFiled", companyIDParameter, accountIDParameter, fiscalYearIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDetailGetSummary_Result> MUNSERAccountServiceCollectionDetailGetSummary(Nullable<int> companyID, string language, string licenseNumber, Nullable<int> accountID, string filterText, Nullable<int> accountServiceID, Nullable<bool> isServiceTypeGroupIsTax)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var isServiceTypeGroupIsTaxParameter = isServiceTypeGroupIsTax.HasValue ?
                new ObjectParameter("IsServiceTypeGroupIsTax", isServiceTypeGroupIsTax) :
                new ObjectParameter("IsServiceTypeGroupIsTax", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDetailGetSummary_Result>("MUNSERAccountServiceCollectionDetailGetSummary", companyIDParameter, languageParameter, licenseNumberParameter, accountIDParameter, filterTextParameter, accountServiceIDParameter, isServiceTypeGroupIsTaxParameter);
        }
    
        public virtual ObjectResult<MUNSERFiscalYearGetByAccountNotFiled_Result> MUNSERFiscalYearGetByAccountNotFiled(Nullable<int> accountID, Nullable<int> companyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFiscalYearGetByAccountNotFiled_Result>("MUNSERFiscalYearGetByAccountNotFiled", accountIDParameter, companyIDParameter);
        }
    
        public virtual int MUNSERAccountServiceSalesDocumentInsert(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> accountServiceId, Nullable<decimal> total, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, string language, ObjectParameter saleDocumentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountServiceIdParameter = accountServiceId.HasValue ?
                new ObjectParameter("AccountServiceId", accountServiceId) :
                new ObjectParameter("AccountServiceId", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceSalesDocumentInsert", companyIDParameter, accountIDParameter, accountServiceIdParameter, totalParameter, createdUserIDParameter, createdDateParameter, languageParameter, saleDocumentID);
        }
    
        public virtual ObjectResult<MUNSERAccountServicePaymentDetailGetNotPaid_Result> MUNSERAccountServicePaymentDetailGetNotPaid(Nullable<int> companyID, Nullable<int> accountServiceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServicePaymentDetailGetNotPaid_Result>("MUNSERAccountServicePaymentDetailGetNotPaid", companyIDParameter, accountServiceIDParameter);
        }
    
        public virtual ObjectResult<MUNCOLPrintTemplateGet_Result> MUNCOLPrintTemplateGet(Nullable<int> iD, Nullable<int> companyID, Nullable<int> documentTypeID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLPrintTemplateGet_Result>("MUNCOLPrintTemplateGet", iDParameter, companyIDParameter, documentTypeIDParameter, languageParameter);
        }
    
        public virtual int MUNSERAccountServiceNoteInsert(Nullable<int> companyID, Nullable<int> accountServiceID, string note, string createdBy, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceNoteInsert", companyIDParameter, accountServiceIDParameter, noteParameter, createdByParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<string> MUNAccountGetForExist(Nullable<int> companyID, string taxNumber, string treasuryNumber, string stateNumber, Nullable<int> iD, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var treasuryNumberParameter = treasuryNumber != null ?
                new ObjectParameter("TreasuryNumber", treasuryNumber) :
                new ObjectParameter("TreasuryNumber", typeof(string));
    
            var stateNumberParameter = stateNumber != null ?
                new ObjectParameter("StateNumber", stateNumber) :
                new ObjectParameter("StateNumber", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MUNAccountGetForExist", companyIDParameter, taxNumberParameter, treasuryNumberParameter, stateNumberParameter, iDParameter, result);
        }
    
        public virtual int MUNSERAccountServicePrint(Nullable<int> companyID, Nullable<int> iD, Nullable<System.DateTime> printDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var printDateParameter = printDate.HasValue ?
                new ObjectParameter("PrintDate", printDate) :
                new ObjectParameter("PrintDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServicePrint", companyIDParameter, iDParameter, printDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceTypeGetNotPaid_Result> MUNSERAccountServiceTypeGetNotPaid(Nullable<int> accountID, Nullable<bool> checkActivePaymentPlan, Nullable<int> companyId, string language)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var checkActivePaymentPlanParameter = checkActivePaymentPlan.HasValue ?
                new ObjectParameter("CheckActivePaymentPlan", checkActivePaymentPlan) :
                new ObjectParameter("CheckActivePaymentPlan", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceTypeGetNotPaid_Result>("MUNSERAccountServiceTypeGetNotPaid", accountIDParameter, checkActivePaymentPlanParameter, companyIdParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERFiscalYearGetByServiceNotInAccount_Result> MUNSERFiscalYearGetByServiceNotInAccount(Nullable<int> serviceID, Nullable<int> accountID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFiscalYearGetByServiceNotInAccount_Result>("MUNSERFiscalYearGetByServiceNotInAccount", serviceIDParameter, accountIDParameter);
        }
    
        public virtual int MUNSERAccountServiceExtensionInsert(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> months, Nullable<decimal> grossVolume, Nullable<decimal> exemptionAmount, Nullable<decimal> total, Nullable<decimal> creditAmount, Nullable<int> imageID, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var grossVolumeParameter = grossVolume.HasValue ?
                new ObjectParameter("GrossVolume", grossVolume) :
                new ObjectParameter("GrossVolume", typeof(decimal));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceExtensionInsert", companyIDParameter, accountServiceIDParameter, startDateParameter, endDateParameter, monthsParameter, grossVolumeParameter, exemptionAmountParameter, totalParameter, creditAmountParameter, imageIDParameter, isActiveParameter, isDeletedParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, iD);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceExtensionGet_Result> MUNSERAccountServiceExtensionGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceExtensionGet_Result>("MUNSERAccountServiceExtensionGet", companyIDParameter, accountServiceIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNSERAccountPaymentPlanUpdateStatus(Nullable<int> companyID, Nullable<int> iD, Nullable<bool> isActive, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNSERAccountPaymentPlanUpdateStatus", companyIDParameter, iDParameter, isActiveParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServicePaymentPlanGet_Result> MUNSERAccountServicePaymentPlanGet(Nullable<int> companyID, string locale, Nullable<int> accountID, Nullable<int> accountPaymentPlanID, Nullable<int> accountServiceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountPaymentPlanIDParameter = accountPaymentPlanID.HasValue ?
                new ObjectParameter("AccountPaymentPlanID", accountPaymentPlanID) :
                new ObjectParameter("AccountPaymentPlanID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServicePaymentPlanGet_Result>("MUNSERAccountServicePaymentPlanGet", companyIDParameter, localeParameter, accountIDParameter, accountPaymentPlanIDParameter, accountServiceIDParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingTaxInsert_Result> MUNSERFillingTaxInsert(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> formIVUTreasury, Nullable<decimal> purchasesImportsResale, Nullable<decimal> importsUse, Nullable<decimal> useofInventory, Nullable<decimal> totalUseSubjectIVU, Nullable<decimal> taxableFurnitureSale, Nullable<decimal> taxableServicesSale, Nullable<decimal> taxableAdmissions, Nullable<decimal> taxableItemsReturns, Nullable<decimal> totalTaxableSales, Nullable<decimal> exemptFurnitureSale, Nullable<decimal> exemptServicesSale, Nullable<decimal> exemptAdmissions, Nullable<decimal> exemptReturns, Nullable<decimal> totalExemptSales, Nullable<decimal> creditSaleProperty, Nullable<decimal> creditUncollectibleAccounts, Nullable<decimal> taxCreditPaid, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingTaxImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var formIVUTreasuryParameter = formIVUTreasury.HasValue ?
                new ObjectParameter("FormIVUTreasury", formIVUTreasury) :
                new ObjectParameter("FormIVUTreasury", typeof(decimal));
    
            var purchasesImportsResaleParameter = purchasesImportsResale.HasValue ?
                new ObjectParameter("PurchasesImportsResale", purchasesImportsResale) :
                new ObjectParameter("PurchasesImportsResale", typeof(decimal));
    
            var importsUseParameter = importsUse.HasValue ?
                new ObjectParameter("ImportsUse", importsUse) :
                new ObjectParameter("ImportsUse", typeof(decimal));
    
            var useofInventoryParameter = useofInventory.HasValue ?
                new ObjectParameter("UseofInventory", useofInventory) :
                new ObjectParameter("UseofInventory", typeof(decimal));
    
            var totalUseSubjectIVUParameter = totalUseSubjectIVU.HasValue ?
                new ObjectParameter("TotalUseSubjectIVU", totalUseSubjectIVU) :
                new ObjectParameter("TotalUseSubjectIVU", typeof(decimal));
    
            var taxableFurnitureSaleParameter = taxableFurnitureSale.HasValue ?
                new ObjectParameter("TaxableFurnitureSale", taxableFurnitureSale) :
                new ObjectParameter("TaxableFurnitureSale", typeof(decimal));
    
            var taxableServicesSaleParameter = taxableServicesSale.HasValue ?
                new ObjectParameter("TaxableServicesSale", taxableServicesSale) :
                new ObjectParameter("TaxableServicesSale", typeof(decimal));
    
            var taxableAdmissionsParameter = taxableAdmissions.HasValue ?
                new ObjectParameter("TaxableAdmissions", taxableAdmissions) :
                new ObjectParameter("TaxableAdmissions", typeof(decimal));
    
            var taxableItemsReturnsParameter = taxableItemsReturns.HasValue ?
                new ObjectParameter("TaxableItemsReturns", taxableItemsReturns) :
                new ObjectParameter("TaxableItemsReturns", typeof(decimal));
    
            var totalTaxableSalesParameter = totalTaxableSales.HasValue ?
                new ObjectParameter("TotalTaxableSales", totalTaxableSales) :
                new ObjectParameter("TotalTaxableSales", typeof(decimal));
    
            var exemptFurnitureSaleParameter = exemptFurnitureSale.HasValue ?
                new ObjectParameter("ExemptFurnitureSale", exemptFurnitureSale) :
                new ObjectParameter("ExemptFurnitureSale", typeof(decimal));
    
            var exemptServicesSaleParameter = exemptServicesSale.HasValue ?
                new ObjectParameter("ExemptServicesSale", exemptServicesSale) :
                new ObjectParameter("ExemptServicesSale", typeof(decimal));
    
            var exemptAdmissionsParameter = exemptAdmissions.HasValue ?
                new ObjectParameter("ExemptAdmissions", exemptAdmissions) :
                new ObjectParameter("ExemptAdmissions", typeof(decimal));
    
            var exemptReturnsParameter = exemptReturns.HasValue ?
                new ObjectParameter("ExemptReturns", exemptReturns) :
                new ObjectParameter("ExemptReturns", typeof(decimal));
    
            var totalExemptSalesParameter = totalExemptSales.HasValue ?
                new ObjectParameter("TotalExemptSales", totalExemptSales) :
                new ObjectParameter("TotalExemptSales", typeof(decimal));
    
            var creditSalePropertyParameter = creditSaleProperty.HasValue ?
                new ObjectParameter("CreditSaleProperty", creditSaleProperty) :
                new ObjectParameter("CreditSaleProperty", typeof(decimal));
    
            var creditUncollectibleAccountsParameter = creditUncollectibleAccounts.HasValue ?
                new ObjectParameter("CreditUncollectibleAccounts", creditUncollectibleAccounts) :
                new ObjectParameter("CreditUncollectibleAccounts", typeof(decimal));
    
            var taxCreditPaidParameter = taxCreditPaid.HasValue ?
                new ObjectParameter("TaxCreditPaid", taxCreditPaid) :
                new ObjectParameter("TaxCreditPaid", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingTaxImageIDsParameter = commaSeperatedFillingTaxImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingTaxImageIDs", commaSeperatedFillingTaxImageIDs) :
                new ObjectParameter("CommaSeperatedFillingTaxImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingTaxInsert_Result>("MUNSERFillingTaxInsert", companyIDParameter, accountServiceCollectionIDParameter, formIVUTreasuryParameter, purchasesImportsResaleParameter, importsUseParameter, useofInventoryParameter, totalUseSubjectIVUParameter, taxableFurnitureSaleParameter, taxableServicesSaleParameter, taxableAdmissionsParameter, taxableItemsReturnsParameter, totalTaxableSalesParameter, exemptFurnitureSaleParameter, exemptServicesSaleParameter, exemptAdmissionsParameter, exemptReturnsParameter, totalExemptSalesParameter, creditSalePropertyParameter, creditUncollectibleAccountsParameter, taxCreditPaidParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingTaxImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDebtGet_Result> MUNSERAccountServiceCollectionDebtGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, Nullable<bool> onlyAdjustment, string language, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var onlyAdjustmentParameter = onlyAdjustment.HasValue ?
                new ObjectParameter("OnlyAdjustment", onlyAdjustment) :
                new ObjectParameter("OnlyAdjustment", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDebtGet_Result>("MUNSERAccountServiceCollectionDebtGet", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, onlyAdjustmentParameter, languageParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingLicenseUpdate_Result> MUNSERFillingLicenseUpdate(Nullable<int> fillingLicenseId, Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> grossVolume, Nullable<decimal> exemptionAmount, Nullable<decimal> percentageValue, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingLicenseImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var fillingLicenseIdParameter = fillingLicenseId.HasValue ?
                new ObjectParameter("fillingLicenseId", fillingLicenseId) :
                new ObjectParameter("fillingLicenseId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var grossVolumeParameter = grossVolume.HasValue ?
                new ObjectParameter("GrossVolume", grossVolume) :
                new ObjectParameter("GrossVolume", typeof(decimal));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var percentageValueParameter = percentageValue.HasValue ?
                new ObjectParameter("PercentageValue", percentageValue) :
                new ObjectParameter("PercentageValue", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingLicenseImageIDsParameter = commaSeperatedFillingLicenseImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingLicenseImageIDs", commaSeperatedFillingLicenseImageIDs) :
                new ObjectParameter("CommaSeperatedFillingLicenseImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingLicenseUpdate_Result>("MUNSERFillingLicenseUpdate", fillingLicenseIdParameter, companyIDParameter, accountServiceCollectionIDParameter, grossVolumeParameter, exemptionAmountParameter, percentageValueParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingLicenseImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingTaxUpdate_Result> MUNSERFillingTaxUpdate(Nullable<int> fillingTaxId, Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> formIVUTreasury, Nullable<decimal> purchasesImportsResale, Nullable<decimal> importsUse, Nullable<decimal> useofInventory, Nullable<decimal> totalUseSubjectIVU, Nullable<decimal> taxableFurnitureSale, Nullable<decimal> taxableServicesSale, Nullable<decimal> taxableAdmissions, Nullable<decimal> taxableItemsReturns, Nullable<decimal> totalTaxableSales, Nullable<decimal> exemptFurnitureSale, Nullable<decimal> exemptServicesSale, Nullable<decimal> exemptAdmissions, Nullable<decimal> exemptReturns, Nullable<decimal> totalExemptSales, Nullable<decimal> creditSaleProperty, Nullable<decimal> creditUncollectibleAccounts, Nullable<decimal> taxCreditPaid, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingTaxImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var fillingTaxIdParameter = fillingTaxId.HasValue ?
                new ObjectParameter("fillingTaxId", fillingTaxId) :
                new ObjectParameter("fillingTaxId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var formIVUTreasuryParameter = formIVUTreasury.HasValue ?
                new ObjectParameter("FormIVUTreasury", formIVUTreasury) :
                new ObjectParameter("FormIVUTreasury", typeof(decimal));
    
            var purchasesImportsResaleParameter = purchasesImportsResale.HasValue ?
                new ObjectParameter("PurchasesImportsResale", purchasesImportsResale) :
                new ObjectParameter("PurchasesImportsResale", typeof(decimal));
    
            var importsUseParameter = importsUse.HasValue ?
                new ObjectParameter("ImportsUse", importsUse) :
                new ObjectParameter("ImportsUse", typeof(decimal));
    
            var useofInventoryParameter = useofInventory.HasValue ?
                new ObjectParameter("UseofInventory", useofInventory) :
                new ObjectParameter("UseofInventory", typeof(decimal));
    
            var totalUseSubjectIVUParameter = totalUseSubjectIVU.HasValue ?
                new ObjectParameter("TotalUseSubjectIVU", totalUseSubjectIVU) :
                new ObjectParameter("TotalUseSubjectIVU", typeof(decimal));
    
            var taxableFurnitureSaleParameter = taxableFurnitureSale.HasValue ?
                new ObjectParameter("TaxableFurnitureSale", taxableFurnitureSale) :
                new ObjectParameter("TaxableFurnitureSale", typeof(decimal));
    
            var taxableServicesSaleParameter = taxableServicesSale.HasValue ?
                new ObjectParameter("TaxableServicesSale", taxableServicesSale) :
                new ObjectParameter("TaxableServicesSale", typeof(decimal));
    
            var taxableAdmissionsParameter = taxableAdmissions.HasValue ?
                new ObjectParameter("TaxableAdmissions", taxableAdmissions) :
                new ObjectParameter("TaxableAdmissions", typeof(decimal));
    
            var taxableItemsReturnsParameter = taxableItemsReturns.HasValue ?
                new ObjectParameter("TaxableItemsReturns", taxableItemsReturns) :
                new ObjectParameter("TaxableItemsReturns", typeof(decimal));
    
            var totalTaxableSalesParameter = totalTaxableSales.HasValue ?
                new ObjectParameter("TotalTaxableSales", totalTaxableSales) :
                new ObjectParameter("TotalTaxableSales", typeof(decimal));
    
            var exemptFurnitureSaleParameter = exemptFurnitureSale.HasValue ?
                new ObjectParameter("ExemptFurnitureSale", exemptFurnitureSale) :
                new ObjectParameter("ExemptFurnitureSale", typeof(decimal));
    
            var exemptServicesSaleParameter = exemptServicesSale.HasValue ?
                new ObjectParameter("ExemptServicesSale", exemptServicesSale) :
                new ObjectParameter("ExemptServicesSale", typeof(decimal));
    
            var exemptAdmissionsParameter = exemptAdmissions.HasValue ?
                new ObjectParameter("ExemptAdmissions", exemptAdmissions) :
                new ObjectParameter("ExemptAdmissions", typeof(decimal));
    
            var exemptReturnsParameter = exemptReturns.HasValue ?
                new ObjectParameter("ExemptReturns", exemptReturns) :
                new ObjectParameter("ExemptReturns", typeof(decimal));
    
            var totalExemptSalesParameter = totalExemptSales.HasValue ?
                new ObjectParameter("TotalExemptSales", totalExemptSales) :
                new ObjectParameter("TotalExemptSales", typeof(decimal));
    
            var creditSalePropertyParameter = creditSaleProperty.HasValue ?
                new ObjectParameter("CreditSaleProperty", creditSaleProperty) :
                new ObjectParameter("CreditSaleProperty", typeof(decimal));
    
            var creditUncollectibleAccountsParameter = creditUncollectibleAccounts.HasValue ?
                new ObjectParameter("CreditUncollectibleAccounts", creditUncollectibleAccounts) :
                new ObjectParameter("CreditUncollectibleAccounts", typeof(decimal));
    
            var taxCreditPaidParameter = taxCreditPaid.HasValue ?
                new ObjectParameter("TaxCreditPaid", taxCreditPaid) :
                new ObjectParameter("TaxCreditPaid", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingTaxImageIDsParameter = commaSeperatedFillingTaxImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingTaxImageIDs", commaSeperatedFillingTaxImageIDs) :
                new ObjectParameter("CommaSeperatedFillingTaxImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingTaxUpdate_Result>("MUNSERFillingTaxUpdate", fillingTaxIdParameter, companyIDParameter, accountServiceCollectionIDParameter, formIVUTreasuryParameter, purchasesImportsResaleParameter, importsUseParameter, useofInventoryParameter, totalUseSubjectIVUParameter, taxableFurnitureSaleParameter, taxableServicesSaleParameter, taxableAdmissionsParameter, taxableItemsReturnsParameter, totalTaxableSalesParameter, exemptFurnitureSaleParameter, exemptServicesSaleParameter, exemptAdmissionsParameter, exemptReturnsParameter, totalExemptSalesParameter, creditSalePropertyParameter, creditUncollectibleAccountsParameter, taxCreditPaidParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingTaxImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingLicenseGet_Result> MUNSERAccountServiceCollectionFillingLicenseGet(Nullable<int> companyId, Nullable<int> accountServiceCollectionID, Nullable<int> fillingLicenseID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var fillingLicenseIDParameter = fillingLicenseID.HasValue ?
                new ObjectParameter("FillingLicenseID", fillingLicenseID) :
                new ObjectParameter("FillingLicenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingLicenseGet_Result>("MUNSERAccountServiceCollectionFillingLicenseGet", companyIdParameter, accountServiceCollectionIDParameter, fillingLicenseIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingTaxGet_Result> MUNSERAccountServiceCollectionFillingTaxGet(Nullable<int> companyId, Nullable<int> accountServiceCollectionID, Nullable<int> fillingTaxID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var fillingTaxIDParameter = fillingTaxID.HasValue ?
                new ObjectParameter("FillingTaxID", fillingTaxID) :
                new ObjectParameter("FillingTaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingTaxGet_Result>("MUNSERAccountServiceCollectionFillingTaxGet", companyIdParameter, accountServiceCollectionIDParameter, fillingTaxIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionPaymentGet_Result> MUNSERAccountServiceCollectionPaymentGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, string language, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionPaymentGet_Result>("MUNSERAccountServiceCollectionPaymentGet", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, languageParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> MUNAccountGetIsSponsor(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> accountType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("MUNAccountGetIsSponsor", companyIDParameter, accountIDParameter, accountTypeParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingLicenseImagesGet_Result> MUNSERAccountServiceCollectionFillingLicenseImagesGet(Nullable<int> fillingID)
        {
            var fillingIDParameter = fillingID.HasValue ?
                new ObjectParameter("FillingID", fillingID) :
                new ObjectParameter("FillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingLicenseImagesGet_Result>("MUNSERAccountServiceCollectionFillingLicenseImagesGet", fillingIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingTaxImagesGet_Result> MUNSERAccountServiceCollectionFillingTaxImagesGet(Nullable<int> fillingID)
        {
            var fillingIDParameter = fillingID.HasValue ?
                new ObjectParameter("FillingID", fillingID) :
                new ObjectParameter("FillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingTaxImagesGet_Result>("MUNSERAccountServiceCollectionFillingTaxImagesGet", fillingIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountGetAsPeople_Result> MUNAccountGetAsPeople(Nullable<int> companyID, Nullable<int> accountType, string accountID, string filterText, Nullable<bool> isActive, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGetAsPeople_Result>("MUNAccountGetAsPeople", companyIDParameter, accountTypeParameter, accountIDParameter, filterTextParameter, isActiveParameter, pageIndexParameter, pageSizeParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetAsObject_Result> MUNSERAccountServiceGetAsObject(Nullable<int> companyID, Nullable<int> accountServiceID, string language, string filterText, Nullable<int> licenceGroupId, Nullable<int> iVUServiceId, Nullable<int> accountID, Nullable<int> fiscalYearID, Nullable<bool> showAll, Nullable<bool> isLock, Nullable<int> iD, Nullable<bool> isPost)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var licenceGroupIdParameter = licenceGroupId.HasValue ?
                new ObjectParameter("LicenceGroupId", licenceGroupId) :
                new ObjectParameter("LicenceGroupId", typeof(int));
    
            var iVUServiceIdParameter = iVUServiceId.HasValue ?
                new ObjectParameter("IVUServiceId", iVUServiceId) :
                new ObjectParameter("IVUServiceId", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            var isLockParameter = isLock.HasValue ?
                new ObjectParameter("IsLock", isLock) :
                new ObjectParameter("IsLock", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isPostParameter = isPost.HasValue ?
                new ObjectParameter("IsPost", isPost) :
                new ObjectParameter("IsPost", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetAsObject_Result>("MUNSERAccountServiceGetAsObject", companyIDParameter, accountServiceIDParameter, languageParameter, filterTextParameter, licenceGroupIdParameter, iVUServiceIdParameter, accountIDParameter, fiscalYearIDParameter, showAllParameter, isLockParameter, iDParameter, isPostParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNAccountPropertyUpdateStatus(Nullable<int> companyID, Nullable<int> iD, Nullable<bool> isActive, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNAccountPropertyUpdateStatus", companyIDParameter, iDParameter, isActiveParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingUnitImagesGet_Result> MUNSERAccountServiceCollectionFillingUnitImagesGet(Nullable<int> fillingID)
        {
            var fillingIDParameter = fillingID.HasValue ?
                new ObjectParameter("FillingID", fillingID) :
                new ObjectParameter("FillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingUnitImagesGet_Result>("MUNSERAccountServiceCollectionFillingUnitImagesGet", fillingIDParameter);
        }
    
        public virtual ObjectResult<MUNREPJournalDetailInvoiceItemGet_Result> MUNREPJournalDetailInvoiceItemGet(Nullable<int> companyID, string locale, Nullable<bool> isNoFilingType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var isNoFilingTypeParameter = isNoFilingType.HasValue ?
                new ObjectParameter("IsNoFilingType", isNoFilingType) :
                new ObjectParameter("IsNoFilingType", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNREPJournalDetailInvoiceItemGet_Result>("MUNREPJournalDetailInvoiceItemGet", companyIDParameter, localeParameter, isNoFilingTypeParameter);
        }
    
        public virtual int MUNSERAccountServiceIssue(Nullable<int> companyID, Nullable<int> iD, Nullable<System.DateTime> issueDate, Nullable<System.Guid> issuedBy, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issuedByParameter = issuedBy.HasValue ?
                new ObjectParameter("IssuedBy", issuedBy) :
                new ObjectParameter("IssuedBy", typeof(System.Guid));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceIssue", companyIDParameter, iDParameter, issueDateParameter, issuedByParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNAccountTypeGet_Result> MUNAccountTypeGet(Nullable<System.Guid> applicationID, string language)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountTypeGet_Result>("MUNAccountTypeGet", applicationIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingMeasuredWaterGet_Result> MUNSERAccountServiceCollectionFillingMeasuredWaterGet(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<int> fillingMeasuredWaterID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var fillingMeasuredWaterIDParameter = fillingMeasuredWaterID.HasValue ?
                new ObjectParameter("FillingMeasuredWaterID", fillingMeasuredWaterID) :
                new ObjectParameter("FillingMeasuredWaterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingMeasuredWaterGet_Result>("MUNSERAccountServiceCollectionFillingMeasuredWaterGet", companyIDParameter, accountServiceCollectionIDParameter, fillingMeasuredWaterIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingMeasuredWaterImagesGet_Result> MUNSERAccountServiceCollectionFillingMeasuredWaterImagesGet(Nullable<int> fillingID)
        {
            var fillingIDParameter = fillingID.HasValue ?
                new ObjectParameter("FillingID", fillingID) :
                new ObjectParameter("FillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingMeasuredWaterImagesGet_Result>("MUNSERAccountServiceCollectionFillingMeasuredWaterImagesGet", fillingIDParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingMeasuredWaterUpdate_Result> MUNSERFillingMeasuredWaterUpdate(Nullable<int> fillingMeasuredWaterID, Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> previousMeasure, Nullable<decimal> actualMeasure, Nullable<decimal> waterConsumption, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> fillingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingMeasuredWaterImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var fillingMeasuredWaterIDParameter = fillingMeasuredWaterID.HasValue ?
                new ObjectParameter("FillingMeasuredWaterID", fillingMeasuredWaterID) :
                new ObjectParameter("FillingMeasuredWaterID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var previousMeasureParameter = previousMeasure.HasValue ?
                new ObjectParameter("PreviousMeasure", previousMeasure) :
                new ObjectParameter("PreviousMeasure", typeof(decimal));
    
            var actualMeasureParameter = actualMeasure.HasValue ?
                new ObjectParameter("ActualMeasure", actualMeasure) :
                new ObjectParameter("ActualMeasure", typeof(decimal));
    
            var waterConsumptionParameter = waterConsumption.HasValue ?
                new ObjectParameter("WaterConsumption", waterConsumption) :
                new ObjectParameter("WaterConsumption", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingMeasuredWaterImageIDsParameter = commaSeperatedFillingMeasuredWaterImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingMeasuredWaterImageIDs", commaSeperatedFillingMeasuredWaterImageIDs) :
                new ObjectParameter("CommaSeperatedFillingMeasuredWaterImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingMeasuredWaterUpdate_Result>("MUNSERFillingMeasuredWaterUpdate", fillingMeasuredWaterIDParameter, companyIDParameter, accountServiceCollectionIDParameter, previousMeasureParameter, actualMeasureParameter, waterConsumptionParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, fillingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingMeasuredWaterImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingMeasuredWaterInsert_Result> MUNSERFillingMeasuredWaterInsert(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> previousMeasure, Nullable<decimal> actualMeasure, Nullable<decimal> waterConsumption, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> fillingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingMeasuredWaterImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var previousMeasureParameter = previousMeasure.HasValue ?
                new ObjectParameter("PreviousMeasure", previousMeasure) :
                new ObjectParameter("PreviousMeasure", typeof(decimal));
    
            var actualMeasureParameter = actualMeasure.HasValue ?
                new ObjectParameter("ActualMeasure", actualMeasure) :
                new ObjectParameter("ActualMeasure", typeof(decimal));
    
            var waterConsumptionParameter = waterConsumption.HasValue ?
                new ObjectParameter("WaterConsumption", waterConsumption) :
                new ObjectParameter("WaterConsumption", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingMeasuredWaterImageIDsParameter = commaSeperatedFillingMeasuredWaterImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingMeasuredWaterImageIDs", commaSeperatedFillingMeasuredWaterImageIDs) :
                new ObjectParameter("CommaSeperatedFillingMeasuredWaterImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingMeasuredWaterInsert_Result>("MUNSERFillingMeasuredWaterInsert", companyIDParameter, accountServiceCollectionIDParameter, previousMeasureParameter, actualMeasureParameter, waterConsumptionParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, fillingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingMeasuredWaterImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingPropertyTaxImagesGet_Result> MUNSERAccountServiceCollectionFillingPropertyTaxImagesGet(Nullable<int> fillingID)
        {
            var fillingIDParameter = fillingID.HasValue ?
                new ObjectParameter("FillingID", fillingID) :
                new ObjectParameter("FillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingPropertyTaxImagesGet_Result>("MUNSERAccountServiceCollectionFillingPropertyTaxImagesGet", fillingIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountGet_Result> MUNAccountGet(Nullable<int> companyID, string accountID, Nullable<int> accountType, string displayName, string taxNumber, string phoneNumber, string filterText, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGet_Result>("MUNAccountGet", companyIDParameter, accountIDParameter, accountTypeParameter, displayNameParameter, taxNumberParameter, phoneNumberParameter, filterTextParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGet_Result> MUNSERAccountServiceGet(Nullable<int> companyID, Nullable<int> accountServiceID, string language, string filterText, Nullable<int> accountID, Nullable<int> fiscalYearID, Nullable<bool> isLock)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var isLockParameter = isLock.HasValue ?
                new ObjectParameter("IsLock", isLock) :
                new ObjectParameter("IsLock", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGet_Result>("MUNSERAccountServiceGet", companyIDParameter, accountServiceIDParameter, languageParameter, filterTextParameter, accountIDParameter, fiscalYearIDParameter, isLockParameter);
        }
    
        public virtual ObjectResult<MUNAccountAddressesGet_Result> MUNAccountAddressesGet(Nullable<int> iD, Nullable<int> accountID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountAddressesGet_Result>("MUNAccountAddressesGet", iDParameter, accountIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNCountryStateCityGet_Result> MUNCountryStateCityGet(Nullable<int> countryID, Nullable<int> stateID, string language)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCountryStateCityGet_Result>("MUNCountryStateCityGet", countryIDParameter, stateIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNCountryStateCityTownGet_Result> MUNCountryStateCityTownGet(Nullable<int> countryID, Nullable<int> stateID, Nullable<int> cityID, string language)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCountryStateCityTownGet_Result>("MUNCountryStateCityTownGet", countryIDParameter, stateIDParameter, cityIDParameter, languageParameter);
        }
    
        public virtual int MUNIMPAccountServiceImport(Nullable<int> companyID, string propertyNumber, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImport", companyIDParameter, propertyNumberParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportPayment(Nullable<int> companyID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string numberPrefix, string accountServicePaymentDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var accountServicePaymentDetailJsonParameter = accountServicePaymentDetailJson != null ?
                new ObjectParameter("AccountServicePaymentDetailJson", accountServicePaymentDetailJson) :
                new ObjectParameter("AccountServicePaymentDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPayment", companyIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, numberPrefixParameter, accountServicePaymentDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual ObjectResult<MUNAccountGetForSearch_Result> MUNAccountGetForSearch(Nullable<int> companyID, string accountTypeIDs, Nullable<int> accountID, string searchText, Nullable<bool> isActive, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountTypeIDsParameter = accountTypeIDs != null ?
                new ObjectParameter("AccountTypeIDs", accountTypeIDs) :
                new ObjectParameter("AccountTypeIDs", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountGetForSearch_Result>("MUNAccountGetForSearch", companyIDParameter, accountTypeIDsParameter, accountIDParameter, searchTextParameter, isActiveParameter, pageIndexParameter, pageSizeParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNAccountPropertyGetForSearch_Result> MUNAccountPropertyGetForSearch(Nullable<int> companyID, string searchText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyGetForSearch_Result>("MUNAccountPropertyGetForSearch", companyIDParameter, searchTextParameter, pageIndexParameter, pageSizeParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNSERAccountPropertyRightGetNotPaid_Result> MUNSERAccountPropertyRightGetNotPaid(Nullable<int> accountPropertyID, Nullable<bool> checkActivePaymentPlan, Nullable<int> companyId, string language)
        {
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var checkActivePaymentPlanParameter = checkActivePaymentPlan.HasValue ?
                new ObjectParameter("CheckActivePaymentPlan", checkActivePaymentPlan) :
                new ObjectParameter("CheckActivePaymentPlan", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountPropertyRightGetNotPaid_Result>("MUNSERAccountPropertyRightGetNotPaid", accountPropertyIDParameter, checkActivePaymentPlanParameter, companyIdParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionPropertyTaxDetailGetNotPaid_Result> MUNSERAccountServiceCollectionPropertyTaxDetailGetNotPaid(Nullable<int> accountPropertyID, Nullable<int> serviceTypeID, Nullable<int> accountPropertyRightID, Nullable<System.DateTime> paymentDate, Nullable<int> companyId, string language)
        {
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var accountPropertyRightIDParameter = accountPropertyRightID.HasValue ?
                new ObjectParameter("AccountPropertyRightID", accountPropertyRightID) :
                new ObjectParameter("AccountPropertyRightID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionPropertyTaxDetailGetNotPaid_Result>("MUNSERAccountServiceCollectionPropertyTaxDetailGetNotPaid", accountPropertyIDParameter, serviceTypeIDParameter, accountPropertyRightIDParameter, paymentDateParameter, companyIdParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyConstructionDetailGet_Result> MUNAccountPropertyConstructionDetailGet(Nullable<int> companyID, string locale, Nullable<int> iD, Nullable<int> propertyAccountID, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var propertyAccountIDParameter = propertyAccountID.HasValue ?
                new ObjectParameter("PropertyAccountID", propertyAccountID) :
                new ObjectParameter("PropertyAccountID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyConstructionDetailGet_Result>("MUNAccountPropertyConstructionDetailGet", companyIDParameter, localeParameter, iDParameter, propertyAccountIDParameter, isActiveParameter);
        }
    
        public virtual int MUNSERAccountServiceExemptionBulkInsert(Nullable<int> companyID, Nullable<int> accountServiceID, string accountServiceCollectionDetailID, Nullable<decimal> exemptionAmount, string adjustmentReason, string locale, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID != null ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(string));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceExemptionBulkInsert", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, exemptionAmountParameter, adjustmentReasonParameter, localeParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceDiscountGet_Result> MUNSERAccountServiceDiscountGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceDiscountGet_Result>("MUNSERAccountServiceDiscountGet", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, languageParameter);
        }
    
        public virtual int MUNIMPAccountServiceImportPropertyTaxPayment(Nullable<int> companyID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string numberPrefix, string accountServicePaymentDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var accountServicePaymentDetailJsonParameter = accountServicePaymentDetailJson != null ?
                new ObjectParameter("AccountServicePaymentDetailJson", accountServicePaymentDetailJson) :
                new ObjectParameter("AccountServicePaymentDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPropertyTaxPayment", companyIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, numberPrefixParameter, accountServicePaymentDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportPropertyTax(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPropertyTax", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingUnitGet_Result> MUNSERAccountServiceCollectionFillingUnitGet(Nullable<int> companyId, Nullable<int> accountServiceCollectionID, Nullable<int> fillingUnitID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var fillingUnitIDParameter = fillingUnitID.HasValue ?
                new ObjectParameter("FillingUnitID", fillingUnitID) :
                new ObjectParameter("FillingUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingUnitGet_Result>("MUNSERAccountServiceCollectionFillingUnitGet", companyIdParameter, accountServiceCollectionIDParameter, fillingUnitIDParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingUnitInsert_Result> MUNSERFillingUnitInsert(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> value, Nullable<decimal> unitCost, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingUnitImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var unitCostParameter = unitCost.HasValue ?
                new ObjectParameter("UnitCost", unitCost) :
                new ObjectParameter("UnitCost", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingUnitImageIDsParameter = commaSeperatedFillingUnitImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingUnitImageIDs", commaSeperatedFillingUnitImageIDs) :
                new ObjectParameter("CommaSeperatedFillingUnitImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingUnitInsert_Result>("MUNSERFillingUnitInsert", companyIDParameter, accountServiceCollectionIDParameter, valueParameter, unitCostParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingUnitImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingUnitUpdate_Result> MUNSERFillingUnitUpdate(Nullable<int> fillingUnitId, Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<decimal> value, Nullable<decimal> unitCost, Nullable<decimal> total, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> filingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingUnitImageIDs, string language, Nullable<bool> applyToAllYear)
        {
            var fillingUnitIdParameter = fillingUnitId.HasValue ?
                new ObjectParameter("fillingUnitId", fillingUnitId) :
                new ObjectParameter("fillingUnitId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var unitCostParameter = unitCost.HasValue ?
                new ObjectParameter("UnitCost", unitCost) :
                new ObjectParameter("UnitCost", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("FilingDate", filingDate) :
                new ObjectParameter("FilingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingUnitImageIDsParameter = commaSeperatedFillingUnitImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingUnitImageIDs", commaSeperatedFillingUnitImageIDs) :
                new ObjectParameter("CommaSeperatedFillingUnitImageIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingUnitUpdate_Result>("MUNSERFillingUnitUpdate", fillingUnitIdParameter, companyIDParameter, accountServiceCollectionIDParameter, valueParameter, unitCostParameter, totalParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, filingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingUnitImageIDsParameter, languageParameter, applyToAllYearParameter);
        }
    
        public virtual int MUNIMPAccountServiceImportMeasureWater(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string customField1, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportMeasureWater", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, customField1Parameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportAutoCreation(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, Nullable<int> year, string segrega, Nullable<int> cURRENT_YEAR_PERIODS_DEBT, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var segregaParameter = segrega != null ?
                new ObjectParameter("Segrega", segrega) :
                new ObjectParameter("Segrega", typeof(string));
    
            var cURRENT_YEAR_PERIODS_DEBTParameter = cURRENT_YEAR_PERIODS_DEBT.HasValue ?
                new ObjectParameter("CURRENT_YEAR_PERIODS_DEBT", cURRENT_YEAR_PERIODS_DEBT) :
                new ObjectParameter("CURRENT_YEAR_PERIODS_DEBT", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportAutoCreation", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, yearParameter, segregaParameter, cURRENT_YEAR_PERIODS_DEBTParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportUnit(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string segrega, Nullable<int> cURRENT_YEAR_PERIODS_DEBT, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var segregaParameter = segrega != null ?
                new ObjectParameter("Segrega", segrega) :
                new ObjectParameter("Segrega", typeof(string));
    
            var cURRENT_YEAR_PERIODS_DEBTParameter = cURRENT_YEAR_PERIODS_DEBT.HasValue ?
                new ObjectParameter("CURRENT_YEAR_PERIODS_DEBT", cURRENT_YEAR_PERIODS_DEBT) :
                new ObjectParameter("CURRENT_YEAR_PERIODS_DEBT", typeof(int));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportUnit", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, segregaParameter, cURRENT_YEAR_PERIODS_DEBTParameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportAutoFilingPayment(Nullable<int> companyID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string numberPrefix, string accountServicePaymentDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var accountServicePaymentDetailJsonParameter = accountServicePaymentDetailJson != null ?
                new ObjectParameter("AccountServicePaymentDetailJson", accountServicePaymentDetailJson) :
                new ObjectParameter("AccountServicePaymentDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportAutoFilingPayment", companyIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, numberPrefixParameter, accountServicePaymentDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual ObjectResult<MUNSERAccountPaymentPlanGetWithPaging_Result> MUNSERAccountPaymentPlanGetWithPaging(Nullable<int> companyID, string locale, string filterText, Nullable<int> accountID, Nullable<int> accountPropertyID, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountPaymentPlanGetWithPaging_Result>("MUNSERAccountPaymentPlanGetWithPaging", companyIDParameter, localeParameter, filterTextParameter, accountIDParameter, accountPropertyIDParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int MUNIMPAccountServiceImportPropertyTaxForPreviousYearWithOwnerBysingleProperty(string fincaID, string taxNumber, string serviceCode, Nullable<int> year, Nullable<decimal> amountSubjectToTax, Nullable<decimal> principal, Nullable<decimal> discount, Nullable<int> exemptionPeriod, Nullable<decimal> payment, Nullable<int> paymentPeriod, Nullable<System.DateTime> fillingDate, string fillingeReference, ObjectParameter result)
        {
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var amountSubjectToTaxParameter = amountSubjectToTax.HasValue ?
                new ObjectParameter("AmountSubjectToTax", amountSubjectToTax) :
                new ObjectParameter("AmountSubjectToTax", typeof(decimal));
    
            var principalParameter = principal.HasValue ?
                new ObjectParameter("Principal", principal) :
                new ObjectParameter("Principal", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var exemptionPeriodParameter = exemptionPeriod.HasValue ?
                new ObjectParameter("ExemptionPeriod", exemptionPeriod) :
                new ObjectParameter("ExemptionPeriod", typeof(int));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(decimal));
    
            var paymentPeriodParameter = paymentPeriod.HasValue ?
                new ObjectParameter("PaymentPeriod", paymentPeriod) :
                new ObjectParameter("PaymentPeriod", typeof(int));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var fillingeReferenceParameter = fillingeReference != null ?
                new ObjectParameter("FillingeReference", fillingeReference) :
                new ObjectParameter("FillingeReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPropertyTaxForPreviousYearWithOwnerBysingleProperty", fincaIDParameter, taxNumberParameter, serviceCodeParameter, yearParameter, amountSubjectToTaxParameter, principalParameter, discountParameter, exemptionPeriodParameter, paymentParameter, paymentPeriodParameter, fillingDateParameter, fillingeReferenceParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportPropertyTaxForPreviousYearWithOwnerByMultipleProperty(string fincaID, string taxNumber, string serviceCode, Nullable<int> year, Nullable<decimal> amountSubjectToTax, Nullable<decimal> principal, Nullable<decimal> discount, Nullable<int> exemptionPeriod, Nullable<System.DateTime> fillingDate, string fillingeReference, ObjectParameter result)
        {
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var amountSubjectToTaxParameter = amountSubjectToTax.HasValue ?
                new ObjectParameter("AmountSubjectToTax", amountSubjectToTax) :
                new ObjectParameter("AmountSubjectToTax", typeof(decimal));
    
            var principalParameter = principal.HasValue ?
                new ObjectParameter("Principal", principal) :
                new ObjectParameter("Principal", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var exemptionPeriodParameter = exemptionPeriod.HasValue ?
                new ObjectParameter("ExemptionPeriod", exemptionPeriod) :
                new ObjectParameter("ExemptionPeriod", typeof(int));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var fillingeReferenceParameter = fillingeReference != null ?
                new ObjectParameter("FillingeReference", fillingeReference) :
                new ObjectParameter("FillingeReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPropertyTaxForPreviousYearWithOwnerByMultipleProperty", fincaIDParameter, taxNumberParameter, serviceCodeParameter, yearParameter, amountSubjectToTaxParameter, principalParameter, discountParameter, exemptionPeriodParameter, fillingDateParameter, fillingeReferenceParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportAutoCreationForPreviousYear(string fincaID, string taxNumber, string serviceCode, Nullable<int> year, string segrega, Nullable<int> pREVIOUS_YEAR_PERIODS_DEBT, ObjectParameter result)
        {
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var segregaParameter = segrega != null ?
                new ObjectParameter("Segrega", segrega) :
                new ObjectParameter("Segrega", typeof(string));
    
            var pREVIOUS_YEAR_PERIODS_DEBTParameter = pREVIOUS_YEAR_PERIODS_DEBT.HasValue ?
                new ObjectParameter("PREVIOUS_YEAR_PERIODS_DEBT", pREVIOUS_YEAR_PERIODS_DEBT) :
                new ObjectParameter("PREVIOUS_YEAR_PERIODS_DEBT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportAutoCreationForPreviousYear", fincaIDParameter, taxNumberParameter, serviceCodeParameter, yearParameter, segregaParameter, pREVIOUS_YEAR_PERIODS_DEBTParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportUnitForPreviousYear(string fincaID, string taxNumber, string serviceCode, Nullable<int> year, string segrega, Nullable<int> pREVIOUS_YEAR_PERIODS_DEBT, Nullable<decimal> amountSubjectToTax, ObjectParameter result)
        {
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var segregaParameter = segrega != null ?
                new ObjectParameter("Segrega", segrega) :
                new ObjectParameter("Segrega", typeof(string));
    
            var pREVIOUS_YEAR_PERIODS_DEBTParameter = pREVIOUS_YEAR_PERIODS_DEBT.HasValue ?
                new ObjectParameter("PREVIOUS_YEAR_PERIODS_DEBT", pREVIOUS_YEAR_PERIODS_DEBT) :
                new ObjectParameter("PREVIOUS_YEAR_PERIODS_DEBT", typeof(int));
    
            var amountSubjectToTaxParameter = amountSubjectToTax.HasValue ?
                new ObjectParameter("AmountSubjectToTax", amountSubjectToTax) :
                new ObjectParameter("AmountSubjectToTax", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportUnitForPreviousYear", fincaIDParameter, taxNumberParameter, serviceCodeParameter, yearParameter, segregaParameter, pREVIOUS_YEAR_PERIODS_DEBTParameter, amountSubjectToTaxParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportPaymentPlan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPaymentPlan");
        }
    
        public virtual int MUNSERTransferServiceUpdateStatus(Nullable<int> iD, Nullable<int> workflowStatusID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter retval)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERTransferServiceUpdateStatus", iDParameter, workflowStatusIDParameter, modifiedUserIDParameter, modifiedDateParameter, retval);
        }
    
        public virtual int MUNSERAccountPaymentPlanForAccount(Nullable<int> companyID, Nullable<int> accountID, string locale, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountPaymentPlanForAccount", companyIDParameter, accountIDParameter, localeParameter, result);
        }
    
        public virtual int MUNSERAccountServiceAdjustmentsBulkInsert(Nullable<int> companyID, Nullable<int> accountServiceID, string accountServiceCollectionDetailID, Nullable<int> serviceCollectionRuleID, Nullable<decimal> adjustmentAmount, string adjustmentReason, string locale, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<bool> isCorrection)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID != null ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(string));
    
            var serviceCollectionRuleIDParameter = serviceCollectionRuleID.HasValue ?
                new ObjectParameter("ServiceCollectionRuleID", serviceCollectionRuleID) :
                new ObjectParameter("ServiceCollectionRuleID", typeof(int));
    
            var adjustmentAmountParameter = adjustmentAmount.HasValue ?
                new ObjectParameter("AdjustmentAmount", adjustmentAmount) :
                new ObjectParameter("AdjustmentAmount", typeof(decimal));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isCorrectionParameter = isCorrection.HasValue ?
                new ObjectParameter("IsCorrection", isCorrection) :
                new ObjectParameter("IsCorrection", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceAdjustmentsBulkInsert", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, serviceCollectionRuleIDParameter, adjustmentAmountParameter, adjustmentReasonParameter, localeParameter, createdUserIDParameter, createdDateParameter, isCorrectionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingPropertyTaxGet_Result> MUNSERAccountServiceCollectionFillingPropertyTaxGet(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<int> fillingPropertyTaxID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var fillingPropertyTaxIDParameter = fillingPropertyTaxID.HasValue ?
                new ObjectParameter("FillingPropertyTaxID", fillingPropertyTaxID) :
                new ObjectParameter("FillingPropertyTaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingPropertyTaxGet_Result>("MUNSERAccountServiceCollectionFillingPropertyTaxGet", companyIDParameter, accountServiceCollectionIDParameter, fillingPropertyTaxIDParameter);
        }
    
        public virtual int MUNSERAccountServiceUpdateForRight(Nullable<int> companyID, Nullable<int> iD, Nullable<int> accountPropertyID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceUpdateForRight", companyIDParameter, iDParameter, accountPropertyIDParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyGetForFilling_Result> MUNAccountPropertyGetForFilling(Nullable<int> companyID, Nullable<int> iD, Nullable<int> accountServiceCollectionDetailId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountServiceCollectionDetailIdParameter = accountServiceCollectionDetailId.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailId", accountServiceCollectionDetailId) :
                new ObjectParameter("AccountServiceCollectionDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyGetForFilling_Result>("MUNAccountPropertyGetForFilling", companyIDParameter, iDParameter, accountServiceCollectionDetailIdParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingPropertyTaxInsert_Result> MUNSERFillingPropertyTaxInsert(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<int> propertyAccountID, string propertyNumber, string rightNumber, Nullable<decimal> terrainArea, Nullable<decimal> terrainValue, Nullable<decimal> totalValue, Nullable<int> movementTypeID, string notes, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> fillingDate, Nullable<decimal> exemptionAmount, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingPropertyTaxImageIDs, string propertyTaxJson, string language, Nullable<bool> applyToAllYear, Nullable<bool> isSplit)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var propertyAccountIDParameter = propertyAccountID.HasValue ?
                new ObjectParameter("PropertyAccountID", propertyAccountID) :
                new ObjectParameter("PropertyAccountID", typeof(int));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var rightNumberParameter = rightNumber != null ?
                new ObjectParameter("RightNumber", rightNumber) :
                new ObjectParameter("RightNumber", typeof(string));
    
            var terrainAreaParameter = terrainArea.HasValue ?
                new ObjectParameter("TerrainArea", terrainArea) :
                new ObjectParameter("TerrainArea", typeof(decimal));
    
            var terrainValueParameter = terrainValue.HasValue ?
                new ObjectParameter("TerrainValue", terrainValue) :
                new ObjectParameter("TerrainValue", typeof(decimal));
    
            var totalValueParameter = totalValue.HasValue ?
                new ObjectParameter("TotalValue", totalValue) :
                new ObjectParameter("TotalValue", typeof(decimal));
    
            var movementTypeIDParameter = movementTypeID.HasValue ?
                new ObjectParameter("MovementTypeID", movementTypeID) :
                new ObjectParameter("MovementTypeID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingPropertyTaxImageIDsParameter = commaSeperatedFillingPropertyTaxImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingPropertyTaxImageIDs", commaSeperatedFillingPropertyTaxImageIDs) :
                new ObjectParameter("CommaSeperatedFillingPropertyTaxImageIDs", typeof(string));
    
            var propertyTaxJsonParameter = propertyTaxJson != null ?
                new ObjectParameter("PropertyTaxJson", propertyTaxJson) :
                new ObjectParameter("PropertyTaxJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            var isSplitParameter = isSplit.HasValue ?
                new ObjectParameter("IsSplit", isSplit) :
                new ObjectParameter("IsSplit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingPropertyTaxInsert_Result>("MUNSERFillingPropertyTaxInsert", companyIDParameter, accountServiceCollectionIDParameter, propertyAccountIDParameter, propertyNumberParameter, rightNumberParameter, terrainAreaParameter, terrainValueParameter, totalValueParameter, movementTypeIDParameter, notesParameter, isFromPortalParameter, fillingByParameter, isActiveParameter, isDeletedParameter, fillingDateParameter, exemptionAmountParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingPropertyTaxImageIDsParameter, propertyTaxJsonParameter, languageParameter, applyToAllYearParameter, isSplitParameter);
        }
    
        public virtual ObjectResult<MUNSERFillingPropertyTaxUpdate_Result> MUNSERFillingPropertyTaxUpdate(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, Nullable<int> propertyAccountID, string propertyNumber, string rightNumber, Nullable<decimal> terrainArea, Nullable<decimal> terrainValue, Nullable<decimal> totalValue, Nullable<int> movementTypeID, string notes, Nullable<bool> isFromPortal, Nullable<System.Guid> fillingBy, Nullable<decimal> exemptionAmount, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<System.DateTime> fillingDate, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion, string commaSeperatedFillingPropertyTaxImageIDs, string propertyTaxJson, string language, Nullable<bool> applyToAllYear, Nullable<bool> isSplit)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var propertyAccountIDParameter = propertyAccountID.HasValue ?
                new ObjectParameter("PropertyAccountID", propertyAccountID) :
                new ObjectParameter("PropertyAccountID", typeof(int));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var rightNumberParameter = rightNumber != null ?
                new ObjectParameter("RightNumber", rightNumber) :
                new ObjectParameter("RightNumber", typeof(string));
    
            var terrainAreaParameter = terrainArea.HasValue ?
                new ObjectParameter("TerrainArea", terrainArea) :
                new ObjectParameter("TerrainArea", typeof(decimal));
    
            var terrainValueParameter = terrainValue.HasValue ?
                new ObjectParameter("TerrainValue", terrainValue) :
                new ObjectParameter("TerrainValue", typeof(decimal));
    
            var totalValueParameter = totalValue.HasValue ?
                new ObjectParameter("TotalValue", totalValue) :
                new ObjectParameter("TotalValue", typeof(decimal));
    
            var movementTypeIDParameter = movementTypeID.HasValue ?
                new ObjectParameter("MovementTypeID", movementTypeID) :
                new ObjectParameter("MovementTypeID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isFromPortalParameter = isFromPortal.HasValue ?
                new ObjectParameter("IsFromPortal", isFromPortal) :
                new ObjectParameter("IsFromPortal", typeof(bool));
    
            var fillingByParameter = fillingBy.HasValue ?
                new ObjectParameter("FillingBy", fillingBy) :
                new ObjectParameter("FillingBy", typeof(System.Guid));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var fillingDateParameter = fillingDate.HasValue ?
                new ObjectParameter("FillingDate", fillingDate) :
                new ObjectParameter("FillingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var commaSeperatedFillingPropertyTaxImageIDsParameter = commaSeperatedFillingPropertyTaxImageIDs != null ?
                new ObjectParameter("CommaSeperatedFillingPropertyTaxImageIDs", commaSeperatedFillingPropertyTaxImageIDs) :
                new ObjectParameter("CommaSeperatedFillingPropertyTaxImageIDs", typeof(string));
    
            var propertyTaxJsonParameter = propertyTaxJson != null ?
                new ObjectParameter("PropertyTaxJson", propertyTaxJson) :
                new ObjectParameter("PropertyTaxJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyToAllYearParameter = applyToAllYear.HasValue ?
                new ObjectParameter("ApplyToAllYear", applyToAllYear) :
                new ObjectParameter("ApplyToAllYear", typeof(bool));
    
            var isSplitParameter = isSplit.HasValue ?
                new ObjectParameter("IsSplit", isSplit) :
                new ObjectParameter("IsSplit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERFillingPropertyTaxUpdate_Result>("MUNSERFillingPropertyTaxUpdate", companyIDParameter, accountServiceCollectionIDParameter, propertyAccountIDParameter, propertyNumberParameter, rightNumberParameter, terrainAreaParameter, terrainValueParameter, totalValueParameter, movementTypeIDParameter, notesParameter, isFromPortalParameter, fillingByParameter, exemptionAmountParameter, isActiveParameter, isDeletedParameter, fillingDateParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter, commaSeperatedFillingPropertyTaxImageIDsParameter, propertyTaxJsonParameter, languageParameter, applyToAllYearParameter, isSplitParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionFillingPropertyTaxHistoryGet_Result> MUNSERAccountServiceCollectionFillingPropertyTaxHistoryGet(Nullable<int> companyID, Nullable<int> propertyAccountID, string propertyNumber, string rightNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var propertyAccountIDParameter = propertyAccountID.HasValue ?
                new ObjectParameter("PropertyAccountID", propertyAccountID) :
                new ObjectParameter("PropertyAccountID", typeof(int));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var rightNumberParameter = rightNumber != null ?
                new ObjectParameter("RightNumber", rightNumber) :
                new ObjectParameter("RightNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionFillingPropertyTaxHistoryGet_Result>("MUNSERAccountServiceCollectionFillingPropertyTaxHistoryGet", companyIDParameter, propertyAccountIDParameter, propertyNumberParameter, rightNumberParameter);
        }
    
        public virtual int MUNSERAccountServiceExemptionUpdate(Nullable<int> companyID, Nullable<int> iD, Nullable<int> accountServiceID, string accountServiceCollectionDetailID, Nullable<decimal> exemptionAmount, string adjustmentReason, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID != null ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(string));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceExemptionUpdate", companyIDParameter, iDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, exemptionAmountParameter, adjustmentReasonParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNSERAccountServiceExemptionDelete(Nullable<int> iD, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceExemptionDelete", iDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceExemptionGet_Result> MUNSERAccountServiceExemptionGet(Nullable<int> companyID, Nullable<int> accountServiceID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceExemptionGet_Result>("MUNSERAccountServiceExemptionGet", companyIDParameter, accountServiceIDParameter, languageParameter);
        }
    
        public virtual int MUNSERAccountServiceExemptionDeleteAll(Nullable<int> accountServiceID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceExemptionDeleteAll", accountServiceIDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceExemptionHistoryGet_Result> MUNSERAccountServiceExemptionHistoryGet(Nullable<int> accountServiceID, string language)
        {
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceExemptionHistoryGet_Result>("MUNSERAccountServiceExemptionHistoryGet", accountServiceIDParameter, languageParameter);
        }
    
        public virtual int MUNIMPAccountServiceImportAutoFilingPaymentForSelectedYearWithPaymentData(Nullable<int> companyID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, Nullable<int> filingTypeID, string numberPrefix, string accountServicePaymentDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var filingTypeIDParameter = filingTypeID.HasValue ?
                new ObjectParameter("FilingTypeID", filingTypeID) :
                new ObjectParameter("FilingTypeID", typeof(int));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var accountServicePaymentDetailJsonParameter = accountServicePaymentDetailJson != null ?
                new ObjectParameter("AccountServicePaymentDetailJson", accountServicePaymentDetailJson) :
                new ObjectParameter("AccountServicePaymentDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportAutoFilingPaymentForSelectedYearWithPaymentData", companyIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, filingTypeIDParameter, numberPrefixParameter, accountServicePaymentDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportPropertyTaxPaymentForSelectedYear(Nullable<int> companyID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string numberPrefix, string accountServicePaymentDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var accountServicePaymentDetailJsonParameter = accountServicePaymentDetailJson != null ?
                new ObjectParameter("AccountServicePaymentDetailJson", accountServicePaymentDetailJson) :
                new ObjectParameter("AccountServicePaymentDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportPropertyTaxPaymentForSelectedYear", companyIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, numberPrefixParameter, accountServicePaymentDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNIMPAccountServiceImportMeasureWaterForManual(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string customField1, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportMeasureWaterForManual", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, customField1Parameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual ObjectResult<MUNSERAccountPaymentPlanGetNotPaid_Result> MUNSERAccountPaymentPlanGetNotPaid(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, Nullable<System.DateTime> date, Nullable<bool> isActive, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountPaymentPlanGetNotPaid_Result>("MUNSERAccountPaymentPlanGetNotPaid", companyIDParameter, accountIDParameter, iDParameter, dateParameter, isActiveParameter, localeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNAccountAddressesGetForExist(Nullable<int> iD, Nullable<int> accountID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNAccountAddressesGetForExist", iDParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNAccountContactsGetForExist(Nullable<int> iD, Nullable<int> accountID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNAccountContactsGetForExist", iDParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetWithPaging_Result> MUNSERAccountServiceGetWithPaging(Nullable<int> companyID, string language, string filterText, string serviceTypeIDs, Nullable<int> accountID, Nullable<int> accountPropertyID, string serviceIDs, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord, string sortColumn, string sortOrder)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var serviceTypeIDsParameter = serviceTypeIDs != null ?
                new ObjectParameter("ServiceTypeIDs", serviceTypeIDs) :
                new ObjectParameter("ServiceTypeIDs", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var serviceIDsParameter = serviceIDs != null ?
                new ObjectParameter("ServiceIDs", serviceIDs) :
                new ObjectParameter("ServiceIDs", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetWithPaging_Result>("MUNSERAccountServiceGetWithPaging", companyIDParameter, languageParameter, filterTextParameter, serviceTypeIDsParameter, accountIDParameter, accountPropertyIDParameter, serviceIDsParameter, pageIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int MUNIMPAccountServiceImportLicense(Nullable<int> companyID, string fincaID, string taxNumber, string serviceCode, Nullable<int> groupID, Nullable<int> serviceTypeID, string segrega, Nullable<int> serviceStartPeriod, Nullable<int> pendingPaymentPeriod, string customField1, string customField2, string customField3, string customField4, string customField5, string customDateField, string accountServiceFilingDetailJson, string language, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter result)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fincaIDParameter = fincaID != null ?
                new ObjectParameter("FincaID", fincaID) :
                new ObjectParameter("FincaID", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var segregaParameter = segrega != null ?
                new ObjectParameter("Segrega", segrega) :
                new ObjectParameter("Segrega", typeof(string));
    
            var serviceStartPeriodParameter = serviceStartPeriod.HasValue ?
                new ObjectParameter("ServiceStartPeriod", serviceStartPeriod) :
                new ObjectParameter("ServiceStartPeriod", typeof(int));
    
            var pendingPaymentPeriodParameter = pendingPaymentPeriod.HasValue ?
                new ObjectParameter("PendingPaymentPeriod", pendingPaymentPeriod) :
                new ObjectParameter("PendingPaymentPeriod", typeof(int));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var customField2Parameter = customField2 != null ?
                new ObjectParameter("CustomField2", customField2) :
                new ObjectParameter("CustomField2", typeof(string));
    
            var customField3Parameter = customField3 != null ?
                new ObjectParameter("CustomField3", customField3) :
                new ObjectParameter("CustomField3", typeof(string));
    
            var customField4Parameter = customField4 != null ?
                new ObjectParameter("CustomField4", customField4) :
                new ObjectParameter("CustomField4", typeof(string));
    
            var customField5Parameter = customField5 != null ?
                new ObjectParameter("CustomField5", customField5) :
                new ObjectParameter("CustomField5", typeof(string));
    
            var customDateFieldParameter = customDateField != null ?
                new ObjectParameter("CustomDateField", customDateField) :
                new ObjectParameter("CustomDateField", typeof(string));
    
            var accountServiceFilingDetailJsonParameter = accountServiceFilingDetailJson != null ?
                new ObjectParameter("AccountServiceFilingDetailJson", accountServiceFilingDetailJson) :
                new ObjectParameter("AccountServiceFilingDetailJson", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNIMPAccountServiceImportLicense", companyIDParameter, fincaIDParameter, taxNumberParameter, serviceCodeParameter, groupIDParameter, serviceTypeIDParameter, segregaParameter, serviceStartPeriodParameter, pendingPaymentPeriodParameter, customField1Parameter, customField2Parameter, customField3Parameter, customField4Parameter, customField5Parameter, customDateFieldParameter, accountServiceFilingDetailJsonParameter, languageParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, result);
        }
    
        public virtual int MUNSERAccountServiceDelete(Nullable<int> iD, string reason, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceDelete", iDParameter, reasonParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNSERAccountServiceCollectionFillingPreviousMeasuredWaterGet(Nullable<int> companyID, Nullable<int> accountServiceCollectionID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNSERAccountServiceCollectionFillingPreviousMeasuredWaterGet", companyIDParameter, accountServiceCollectionIDParameter);
        }
    
        public virtual int MUNSERFillingMeasuredWaterDelete(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, string note, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingMeasuredWaterDelete", companyIDParameter, accountServiceCollectionIDParameter, noteParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNSERFillingPropertyTaxDelete(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, string note, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingPropertyTaxDelete", companyIDParameter, accountServiceCollectionIDParameter, noteParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNSERFillingUnitDelete(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, string note, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingUnitDelete", companyIDParameter, accountServiceCollectionIDParameter, noteParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNSERFillingLicenseDelete(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, string note, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingLicenseDelete", companyIDParameter, accountServiceCollectionIDParameter, noteParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceUpdate_Result> MUNSERAccountServiceUpdate(Nullable<int> companyID, Nullable<int> iD, Nullable<System.DateTime> issueDate, Nullable<bool> isIssued, Nullable<System.Guid> issuedBy, Nullable<bool> isPrint, Nullable<System.DateTime> printDate, Nullable<bool> isLock, Nullable<bool> isVoid, Nullable<bool> isActive, string notes, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var isIssuedParameter = isIssued.HasValue ?
                new ObjectParameter("IsIssued", isIssued) :
                new ObjectParameter("IsIssued", typeof(bool));
    
            var issuedByParameter = issuedBy.HasValue ?
                new ObjectParameter("IssuedBy", issuedBy) :
                new ObjectParameter("IssuedBy", typeof(System.Guid));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(bool));
    
            var printDateParameter = printDate.HasValue ?
                new ObjectParameter("PrintDate", printDate) :
                new ObjectParameter("PrintDate", typeof(System.DateTime));
    
            var isLockParameter = isLock.HasValue ?
                new ObjectParameter("IsLock", isLock) :
                new ObjectParameter("IsLock", typeof(bool));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceUpdate_Result>("MUNSERAccountServiceUpdate", companyIDParameter, iDParameter, issueDateParameter, isIssuedParameter, issuedByParameter, isPrintParameter, printDateParameter, isLockParameter, isVoidParameter, isActiveParameter, notesParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServicePaymentPlanSummaryGet_Result> MUNSERAccountServicePaymentPlanSummaryGet(Nullable<int> companyID, string language, Nullable<int> accountPaymentPlanID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountPaymentPlanIDParameter = accountPaymentPlanID.HasValue ?
                new ObjectParameter("AccountPaymentPlanID", accountPaymentPlanID) :
                new ObjectParameter("AccountPaymentPlanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServicePaymentPlanSummaryGet_Result>("MUNSERAccountServicePaymentPlanSummaryGet", companyIDParameter, languageParameter, accountPaymentPlanIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyRightGet_Result> MUNAccountPropertyRightGet(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyRightGet_Result>("MUNAccountPropertyRightGet", companyIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyRightGetForSearch_Result> MUNAccountPropertyRightGetForSearch(Nullable<int> companyID, string searchText, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyRightGetForSearch_Result>("MUNAccountPropertyRightGetForSearch", companyIDParameter, searchTextParameter, pageIndexParameter, pageSizeParameter, totalRecord);
        }
    
        public virtual int MUNSERAccountServiceInsert(Nullable<int> companyID, Nullable<int> serviceID, Nullable<int> year, Nullable<int> accountID, Nullable<int> serviceExceptionID, Nullable<decimal> serviceExceptionValue, Nullable<System.DateTime> flexibleFilingDueDate, Nullable<System.DateTime> flexiblePaymentDueDate, string customField1, string customField2, string customField3, string customField4, string customField5, Nullable<System.DateTime> customDateField, Nullable<int> accountPropertyID, Nullable<int> serviceStartPeriod, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter accountServiceID, Nullable<bool> isMigration, Nullable<int> licenseAccountServiceID, string autoCreationSegrega, Nullable<decimal> previousMeasure, string createdBy)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceExceptionIDParameter = serviceExceptionID.HasValue ?
                new ObjectParameter("ServiceExceptionID", serviceExceptionID) :
                new ObjectParameter("ServiceExceptionID", typeof(int));
    
            var serviceExceptionValueParameter = serviceExceptionValue.HasValue ?
                new ObjectParameter("ServiceExceptionValue", serviceExceptionValue) :
                new ObjectParameter("ServiceExceptionValue", typeof(decimal));
    
            var flexibleFilingDueDateParameter = flexibleFilingDueDate.HasValue ?
                new ObjectParameter("FlexibleFilingDueDate", flexibleFilingDueDate) :
                new ObjectParameter("FlexibleFilingDueDate", typeof(System.DateTime));
    
            var flexiblePaymentDueDateParameter = flexiblePaymentDueDate.HasValue ?
                new ObjectParameter("FlexiblePaymentDueDate", flexiblePaymentDueDate) :
                new ObjectParameter("FlexiblePaymentDueDate", typeof(System.DateTime));
    
            var customField1Parameter = customField1 != null ?
                new ObjectParameter("CustomField1", customField1) :
                new ObjectParameter("CustomField1", typeof(string));
    
            var customField2Parameter = customField2 != null ?
                new ObjectParameter("CustomField2", customField2) :
                new ObjectParameter("CustomField2", typeof(string));
    
            var customField3Parameter = customField3 != null ?
                new ObjectParameter("CustomField3", customField3) :
                new ObjectParameter("CustomField3", typeof(string));
    
            var customField4Parameter = customField4 != null ?
                new ObjectParameter("CustomField4", customField4) :
                new ObjectParameter("CustomField4", typeof(string));
    
            var customField5Parameter = customField5 != null ?
                new ObjectParameter("CustomField5", customField5) :
                new ObjectParameter("CustomField5", typeof(string));
    
            var customDateFieldParameter = customDateField.HasValue ?
                new ObjectParameter("CustomDateField", customDateField) :
                new ObjectParameter("CustomDateField", typeof(System.DateTime));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var serviceStartPeriodParameter = serviceStartPeriod.HasValue ?
                new ObjectParameter("ServiceStartPeriod", serviceStartPeriod) :
                new ObjectParameter("ServiceStartPeriod", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isMigrationParameter = isMigration.HasValue ?
                new ObjectParameter("IsMigration", isMigration) :
                new ObjectParameter("IsMigration", typeof(bool));
    
            var licenseAccountServiceIDParameter = licenseAccountServiceID.HasValue ?
                new ObjectParameter("LicenseAccountServiceID", licenseAccountServiceID) :
                new ObjectParameter("LicenseAccountServiceID", typeof(int));
    
            var autoCreationSegregaParameter = autoCreationSegrega != null ?
                new ObjectParameter("AutoCreationSegrega", autoCreationSegrega) :
                new ObjectParameter("AutoCreationSegrega", typeof(string));
    
            var previousMeasureParameter = previousMeasure.HasValue ?
                new ObjectParameter("PreviousMeasure", previousMeasure) :
                new ObjectParameter("PreviousMeasure", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceInsert", companyIDParameter, serviceIDParameter, yearParameter, accountIDParameter, serviceExceptionIDParameter, serviceExceptionValueParameter, flexibleFilingDueDateParameter, flexiblePaymentDueDateParameter, customField1Parameter, customField2Parameter, customField3Parameter, customField4Parameter, customField5Parameter, customDateFieldParameter, accountPropertyIDParameter, serviceStartPeriodParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, accountServiceID, isMigrationParameter, licenseAccountServiceIDParameter, autoCreationSegregaParameter, previousMeasureParameter, createdByParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetForTimbre_Result> MUNSERAccountServiceGetForTimbre(Nullable<int> companyID, string language, Nullable<int> accountID, Nullable<int> fiscalYearID, Nullable<int> serviceID, Nullable<int> accountPropertyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetForTimbre_Result>("MUNSERAccountServiceGetForTimbre", companyIDParameter, languageParameter, accountIDParameter, fiscalYearIDParameter, serviceIDParameter, accountPropertyIDParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceFillingGet_Result> MUNSERAccountServiceFillingGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, string language, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceFillingGet_Result>("MUNSERAccountServiceFillingGet", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, languageParameter, filterTextParameter);
        }
    
        public virtual int MUNSERFillingAutoFillingDelete(Nullable<int> companyID, Nullable<int> accountServiceCollectionID, string note, string locale, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERFillingAutoFillingDelete", companyIDParameter, accountServiceCollectionIDParameter, noteParameter, localeParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionAutoFillingGet_Result> MUNSERAccountServiceCollectionAutoFillingGet(Nullable<int> companyId, Nullable<int> accountServiceCollectionID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var accountServiceCollectionIDParameter = accountServiceCollectionID.HasValue ?
                new ObjectParameter("AccountServiceCollectionID", accountServiceCollectionID) :
                new ObjectParameter("AccountServiceCollectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionAutoFillingGet_Result>("MUNSERAccountServiceCollectionAutoFillingGet", companyIdParameter, accountServiceCollectionIDParameter);
        }
    
        public virtual ObjectResult<string> MUNSERAccountServiceFilingExportMeasuredWater(Nullable<int> companyID, string language, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MUNSERAccountServiceFilingExportMeasuredWater", companyIDParameter, languageParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNAccountPropertyDelete(Nullable<int> iD, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNAccountPropertyDelete", iDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNSERAccountServiceFillingRuleGet(Nullable<int> companyID, Nullable<int> accountServiceCollectionDetailID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNSERAccountServiceFillingRuleGet", companyIDParameter, accountServiceCollectionDetailIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyGetWithPaging_Result> MUNAccountPropertyGetWithPaging(Nullable<int> companyID, string locale, string filterText, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> accountID, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyGetWithPaging_Result>("MUNAccountPropertyGetWithPaging", companyIDParameter, localeParameter, filterTextParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, accountIDParameter, totalRecord);
        }
    
        public virtual int MUNAccountPropertyHasDebt(Nullable<int> accountPropertyID, Nullable<int> accountID, ObjectParameter isPendingAmount)
        {
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountPropertyHasDebt", accountPropertyIDParameter, accountIDParameter, isPendingAmount);
        }
    
        public virtual int MUNSERAccountServiceRemainingPeriodGetForTransfer(Nullable<int> companyID, string language, Nullable<int> accountID, Nullable<int> accountPropertyID, ObjectParameter totalPeriod)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceRemainingPeriodGetForTransfer", companyIDParameter, languageParameter, accountIDParameter, accountPropertyIDParameter, totalPeriod);
        }
    
        public virtual int MUNSERAccountServiceNoteDelete(Nullable<int> iD, string reason, Nullable<bool> isAccountServiceNote, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var isAccountServiceNoteParameter = isAccountServiceNote.HasValue ?
                new ObjectParameter("IsAccountServiceNote", isAccountServiceNote) :
                new ObjectParameter("IsAccountServiceNote", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceNoteDelete", iDParameter, reasonParameter, isAccountServiceNoteParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceNoteGet_Result> MUNSERAccountServiceNoteGet(Nullable<int> companyID, string language, Nullable<int> iD, Nullable<int> accountServiceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceNoteGet_Result>("MUNSERAccountServiceNoteGet", companyIDParameter, languageParameter, iDParameter, accountServiceIDParameter);
        }
    
        public virtual int MUNSERAccountServiceLock(Nullable<int> companyID, Nullable<int> iD, Nullable<bool> isLock, Nullable<int> lockReasonTableValue, Nullable<int> lockActionTableValue, string lockComment, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string createdBy, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isLockParameter = isLock.HasValue ?
                new ObjectParameter("IsLock", isLock) :
                new ObjectParameter("IsLock", typeof(bool));
    
            var lockReasonTableValueParameter = lockReasonTableValue.HasValue ?
                new ObjectParameter("LockReasonTableValue", lockReasonTableValue) :
                new ObjectParameter("LockReasonTableValue", typeof(int));
    
            var lockActionTableValueParameter = lockActionTableValue.HasValue ?
                new ObjectParameter("LockActionTableValue", lockActionTableValue) :
                new ObjectParameter("LockActionTableValue", typeof(int));
    
            var lockCommentParameter = lockComment != null ?
                new ObjectParameter("LockComment", lockComment) :
                new ObjectParameter("LockComment", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceLock", companyIDParameter, iDParameter, isLockParameter, lockReasonTableValueParameter, lockActionTableValueParameter, lockCommentParameter, modifiedUserIDParameter, modifiedDateParameter, createdByParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceGetForTransfer_Result> MUNSERAccountServiceGetForTransfer(Nullable<int> companyID, string language, Nullable<int> accountID, Nullable<int> accountPropertyID, Nullable<int> transferTypeID, Nullable<int> transferID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            var transferTypeIDParameter = transferTypeID.HasValue ?
                new ObjectParameter("TransferTypeID", transferTypeID) :
                new ObjectParameter("TransferTypeID", typeof(int));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceGetForTransfer_Result>("MUNSERAccountServiceGetForTransfer", companyIDParameter, languageParameter, accountIDParameter, accountPropertyIDParameter, transferTypeIDParameter, transferIDParameter);
        }
    
        public virtual ObjectResult<MUNSERTransferServiceGetWithPagging_Result> MUNSERTransferServiceGetWithPagging(Nullable<int> companyID, string filterText, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERTransferServiceGetWithPagging_Result>("MUNSERTransferServiceGetWithPagging", companyIDParameter, filterTextParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNAccountPropertyMergeCheckNotAssociatedServices(Nullable<int> companyID, string language, string commaSeparatedPropertyID, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var commaSeparatedPropertyIDParameter = commaSeparatedPropertyID != null ?
                new ObjectParameter("CommaSeparatedPropertyID", commaSeparatedPropertyID) :
                new ObjectParameter("CommaSeparatedPropertyID", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNAccountPropertyMergeCheckNotAssociatedServices", companyIDParameter, languageParameter, commaSeparatedPropertyIDParameter, accountIDParameter);
        }
    
        public virtual int MUNSERAccountServiceCorrection(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<System.DateTime> fILINGDATE, Nullable<decimal> terrainArea, Nullable<decimal> terrainValue, Nullable<int> movementTypeID, Nullable<decimal> fillingAmount, Nullable<int> exemptionPeriod, Nullable<decimal> exemptionAmount, Nullable<int> pendingPeriod, Nullable<decimal> adjustmentAmount, string adjustmentReason, string locale, string propertyTaxJson, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var fILINGDATEParameter = fILINGDATE.HasValue ?
                new ObjectParameter("FILINGDATE", fILINGDATE) :
                new ObjectParameter("FILINGDATE", typeof(System.DateTime));
    
            var terrainAreaParameter = terrainArea.HasValue ?
                new ObjectParameter("TerrainArea", terrainArea) :
                new ObjectParameter("TerrainArea", typeof(decimal));
    
            var terrainValueParameter = terrainValue.HasValue ?
                new ObjectParameter("TerrainValue", terrainValue) :
                new ObjectParameter("TerrainValue", typeof(decimal));
    
            var movementTypeIDParameter = movementTypeID.HasValue ?
                new ObjectParameter("MovementTypeID", movementTypeID) :
                new ObjectParameter("MovementTypeID", typeof(int));
    
            var fillingAmountParameter = fillingAmount.HasValue ?
                new ObjectParameter("FillingAmount", fillingAmount) :
                new ObjectParameter("FillingAmount", typeof(decimal));
    
            var exemptionPeriodParameter = exemptionPeriod.HasValue ?
                new ObjectParameter("ExemptionPeriod", exemptionPeriod) :
                new ObjectParameter("ExemptionPeriod", typeof(int));
    
            var exemptionAmountParameter = exemptionAmount.HasValue ?
                new ObjectParameter("ExemptionAmount", exemptionAmount) :
                new ObjectParameter("ExemptionAmount", typeof(decimal));
    
            var pendingPeriodParameter = pendingPeriod.HasValue ?
                new ObjectParameter("PendingPeriod", pendingPeriod) :
                new ObjectParameter("PendingPeriod", typeof(int));
    
            var adjustmentAmountParameter = adjustmentAmount.HasValue ?
                new ObjectParameter("AdjustmentAmount", adjustmentAmount) :
                new ObjectParameter("AdjustmentAmount", typeof(decimal));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var propertyTaxJsonParameter = propertyTaxJson != null ?
                new ObjectParameter("PropertyTaxJson", propertyTaxJson) :
                new ObjectParameter("PropertyTaxJson", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceCorrection", companyIDParameter, accountServiceIDParameter, fILINGDATEParameter, terrainAreaParameter, terrainValueParameter, movementTypeIDParameter, fillingAmountParameter, exemptionPeriodParameter, exemptionAmountParameter, pendingPeriodParameter, adjustmentAmountParameter, adjustmentReasonParameter, localeParameter, propertyTaxJsonParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int MUNSERAccountPaymentPlanInsert(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> servicePaymentPlanID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> instalmentPercentage, Nullable<decimal> interestPercentage, Nullable<decimal> lateInterestPercentage, Nullable<int> months, Nullable<bool> isEditable, Nullable<decimal> instalmentAmount, Nullable<decimal> monthlyAmount, Nullable<decimal> monthlyInterest, Nullable<decimal> totalInterest, Nullable<decimal> totalPayment, Nullable<decimal> totalDebt, Nullable<bool> applybyAmnesty, Nullable<bool> isActive, Nullable<System.DateTime> inactiveDate, string inactiveReason, Nullable<bool> isDeleted, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string createdBy, string accountPaymentPlanDetailJson, string accountServiceCollectionDetailIDs, ObjectParameter accountPaymentPlanID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var servicePaymentPlanIDParameter = servicePaymentPlanID.HasValue ?
                new ObjectParameter("ServicePaymentPlanID", servicePaymentPlanID) :
                new ObjectParameter("ServicePaymentPlanID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var instalmentPercentageParameter = instalmentPercentage.HasValue ?
                new ObjectParameter("InstalmentPercentage", instalmentPercentage) :
                new ObjectParameter("InstalmentPercentage", typeof(decimal));
    
            var interestPercentageParameter = interestPercentage.HasValue ?
                new ObjectParameter("InterestPercentage", interestPercentage) :
                new ObjectParameter("InterestPercentage", typeof(decimal));
    
            var lateInterestPercentageParameter = lateInterestPercentage.HasValue ?
                new ObjectParameter("LateInterestPercentage", lateInterestPercentage) :
                new ObjectParameter("LateInterestPercentage", typeof(decimal));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var isEditableParameter = isEditable.HasValue ?
                new ObjectParameter("IsEditable", isEditable) :
                new ObjectParameter("IsEditable", typeof(bool));
    
            var instalmentAmountParameter = instalmentAmount.HasValue ?
                new ObjectParameter("InstalmentAmount", instalmentAmount) :
                new ObjectParameter("InstalmentAmount", typeof(decimal));
    
            var monthlyAmountParameter = monthlyAmount.HasValue ?
                new ObjectParameter("MonthlyAmount", monthlyAmount) :
                new ObjectParameter("MonthlyAmount", typeof(decimal));
    
            var monthlyInterestParameter = monthlyInterest.HasValue ?
                new ObjectParameter("MonthlyInterest", monthlyInterest) :
                new ObjectParameter("MonthlyInterest", typeof(decimal));
    
            var totalInterestParameter = totalInterest.HasValue ?
                new ObjectParameter("TotalInterest", totalInterest) :
                new ObjectParameter("TotalInterest", typeof(decimal));
    
            var totalPaymentParameter = totalPayment.HasValue ?
                new ObjectParameter("TotalPayment", totalPayment) :
                new ObjectParameter("TotalPayment", typeof(decimal));
    
            var totalDebtParameter = totalDebt.HasValue ?
                new ObjectParameter("TotalDebt", totalDebt) :
                new ObjectParameter("TotalDebt", typeof(decimal));
    
            var applybyAmnestyParameter = applybyAmnesty.HasValue ?
                new ObjectParameter("ApplybyAmnesty", applybyAmnesty) :
                new ObjectParameter("ApplybyAmnesty", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var inactiveDateParameter = inactiveDate.HasValue ?
                new ObjectParameter("InactiveDate", inactiveDate) :
                new ObjectParameter("InactiveDate", typeof(System.DateTime));
    
            var inactiveReasonParameter = inactiveReason != null ?
                new ObjectParameter("InactiveReason", inactiveReason) :
                new ObjectParameter("InactiveReason", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var accountPaymentPlanDetailJsonParameter = accountPaymentPlanDetailJson != null ?
                new ObjectParameter("AccountPaymentPlanDetailJson", accountPaymentPlanDetailJson) :
                new ObjectParameter("AccountPaymentPlanDetailJson", typeof(string));
    
            var accountServiceCollectionDetailIDsParameter = accountServiceCollectionDetailIDs != null ?
                new ObjectParameter("AccountServiceCollectionDetailIDs", accountServiceCollectionDetailIDs) :
                new ObjectParameter("AccountServiceCollectionDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountPaymentPlanInsert", companyIDParameter, accountIDParameter, servicePaymentPlanIDParameter, startDateParameter, endDateParameter, instalmentPercentageParameter, interestPercentageParameter, lateInterestPercentageParameter, monthsParameter, isEditableParameter, instalmentAmountParameter, monthlyAmountParameter, monthlyInterestParameter, totalInterestParameter, totalPaymentParameter, totalDebtParameter, applybyAmnestyParameter, isActiveParameter, inactiveDateParameter, inactiveReasonParameter, isDeletedParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, createdByParameter, accountPaymentPlanDetailJsonParameter, accountServiceCollectionDetailIDsParameter, accountPaymentPlanID);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDetailGetNotPaid_Result> MUNSERAccountServiceCollectionDetailGetNotPaid(Nullable<int> accountID, Nullable<System.DateTime> paymentDate, Nullable<int> companyId, string language, Nullable<bool> isIvaApply, Nullable<bool> applybyAmnesty)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var isIvaApplyParameter = isIvaApply.HasValue ?
                new ObjectParameter("IsIvaApply", isIvaApply) :
                new ObjectParameter("IsIvaApply", typeof(bool));
    
            var applybyAmnestyParameter = applybyAmnesty.HasValue ?
                new ObjectParameter("ApplybyAmnesty", applybyAmnesty) :
                new ObjectParameter("ApplybyAmnesty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDetailGetNotPaid_Result>("MUNSERAccountServiceCollectionDetailGetNotPaid", accountIDParameter, paymentDateParameter, companyIdParameter, languageParameter, isIvaApplyParameter, applybyAmnestyParameter);
        }
    
        public virtual int MUNSERAccountServiceUpdateForCustomField(Nullable<int> companyID, Nullable<int> iD, Nullable<int> accountID, Nullable<int> serviceID, Nullable<int> year, string customField1OldValue, string customField2OldValue, string customField3OldValue, string customField4OldValue, string customField5OldValue, Nullable<System.DateTime> customDateFieldOldValue, string customField1NewValue, string customField2NewValue, string customField3NewValue, string customField4NewValue, string customField5NewValue, Nullable<System.DateTime> customDateFieldNewValue, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, Nullable<System.DateTime> customField1UpdateDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var customField1OldValueParameter = customField1OldValue != null ?
                new ObjectParameter("CustomField1OldValue", customField1OldValue) :
                new ObjectParameter("CustomField1OldValue", typeof(string));
    
            var customField2OldValueParameter = customField2OldValue != null ?
                new ObjectParameter("CustomField2OldValue", customField2OldValue) :
                new ObjectParameter("CustomField2OldValue", typeof(string));
    
            var customField3OldValueParameter = customField3OldValue != null ?
                new ObjectParameter("CustomField3OldValue", customField3OldValue) :
                new ObjectParameter("CustomField3OldValue", typeof(string));
    
            var customField4OldValueParameter = customField4OldValue != null ?
                new ObjectParameter("CustomField4OldValue", customField4OldValue) :
                new ObjectParameter("CustomField4OldValue", typeof(string));
    
            var customField5OldValueParameter = customField5OldValue != null ?
                new ObjectParameter("CustomField5OldValue", customField5OldValue) :
                new ObjectParameter("CustomField5OldValue", typeof(string));
    
            var customDateFieldOldValueParameter = customDateFieldOldValue.HasValue ?
                new ObjectParameter("CustomDateFieldOldValue", customDateFieldOldValue) :
                new ObjectParameter("CustomDateFieldOldValue", typeof(System.DateTime));
    
            var customField1NewValueParameter = customField1NewValue != null ?
                new ObjectParameter("CustomField1NewValue", customField1NewValue) :
                new ObjectParameter("CustomField1NewValue", typeof(string));
    
            var customField2NewValueParameter = customField2NewValue != null ?
                new ObjectParameter("CustomField2NewValue", customField2NewValue) :
                new ObjectParameter("CustomField2NewValue", typeof(string));
    
            var customField3NewValueParameter = customField3NewValue != null ?
                new ObjectParameter("CustomField3NewValue", customField3NewValue) :
                new ObjectParameter("CustomField3NewValue", typeof(string));
    
            var customField4NewValueParameter = customField4NewValue != null ?
                new ObjectParameter("CustomField4NewValue", customField4NewValue) :
                new ObjectParameter("CustomField4NewValue", typeof(string));
    
            var customField5NewValueParameter = customField5NewValue != null ?
                new ObjectParameter("CustomField5NewValue", customField5NewValue) :
                new ObjectParameter("CustomField5NewValue", typeof(string));
    
            var customDateFieldNewValueParameter = customDateFieldNewValue.HasValue ?
                new ObjectParameter("CustomDateFieldNewValue", customDateFieldNewValue) :
                new ObjectParameter("CustomDateFieldNewValue", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var customField1UpdateDateParameter = customField1UpdateDate.HasValue ?
                new ObjectParameter("CustomField1UpdateDate", customField1UpdateDate) :
                new ObjectParameter("CustomField1UpdateDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceUpdateForCustomField", companyIDParameter, iDParameter, accountIDParameter, serviceIDParameter, yearParameter, customField1OldValueParameter, customField2OldValueParameter, customField3OldValueParameter, customField4OldValueParameter, customField5OldValueParameter, customDateFieldOldValueParameter, customField1NewValueParameter, customField2NewValueParameter, customField3NewValueParameter, customField4NewValueParameter, customField5NewValueParameter, customDateFieldNewValueParameter, modifiedUserIDParameter, modifiedDateParameter, customField1UpdateDateParameter, original_RowVersionParameter);
        }
    
        public virtual int MUNSERAccountServiceUpdateForLicenseNumber(Nullable<int> companyID, Nullable<int> iD, string licenseNumber, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceUpdateForLicenseNumber", companyIDParameter, iDParameter, licenseNumberParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual int MUNSERAccountServiceAdjustmentDelete(Nullable<int> iD, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountServiceAdjustmentDelete", iDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNAccountUpdateForJudicialCollection(Nullable<int> companyID, Nullable<int> iD, Nullable<bool> isInJudicialCollection, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string createdBy, byte[] original_RowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isInJudicialCollectionParameter = isInJudicialCollection.HasValue ?
                new ObjectParameter("IsInJudicialCollection", isInJudicialCollection) :
                new ObjectParameter("IsInJudicialCollection", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountUpdateForJudicialCollection", companyIDParameter, iDParameter, isInJudicialCollectionParameter, modifiedUserIDParameter, modifiedDateParameter, createdByParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceAdjustmentsGet_Result> MUNSERAccountServiceAdjustmentsGet(Nullable<int> companyID, Nullable<int> accountServiceID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceAdjustmentsGet_Result>("MUNSERAccountServiceAdjustmentsGet", companyIDParameter, accountServiceIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDetailSummaryGetNotPaid_Result> MUNSERAccountServiceCollectionDetailSummaryGetNotPaid(Nullable<int> companyID, string language, Nullable<int> accountID, string collectiondetailIDs, Nullable<bool> forEdit, Nullable<bool> applybyAmnesty)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var collectiondetailIDsParameter = collectiondetailIDs != null ?
                new ObjectParameter("collectiondetailIDs", collectiondetailIDs) :
                new ObjectParameter("collectiondetailIDs", typeof(string));
    
            var forEditParameter = forEdit.HasValue ?
                new ObjectParameter("ForEdit", forEdit) :
                new ObjectParameter("ForEdit", typeof(bool));
    
            var applybyAmnestyParameter = applybyAmnesty.HasValue ?
                new ObjectParameter("ApplybyAmnesty", applybyAmnesty) :
                new ObjectParameter("ApplybyAmnesty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDetailSummaryGetNotPaid_Result>("MUNSERAccountServiceCollectionDetailSummaryGetNotPaid", companyIDParameter, languageParameter, accountIDParameter, collectiondetailIDsParameter, forEditParameter, applybyAmnestyParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountPaymentPlanDetailGet_Result> MUNSERAccountPaymentPlanDetailGet(Nullable<int> companyID, Nullable<int> iD, string accountPaymentPlanID, Nullable<bool> isActive, Nullable<bool> isPaid, Nullable<bool> isRemoveInterest, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountPaymentPlanIDParameter = accountPaymentPlanID != null ?
                new ObjectParameter("AccountPaymentPlanID", accountPaymentPlanID) :
                new ObjectParameter("AccountPaymentPlanID", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isRemoveInterestParameter = isRemoveInterest.HasValue ?
                new ObjectParameter("IsRemoveInterest", isRemoveInterest) :
                new ObjectParameter("IsRemoveInterest", typeof(bool));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountPaymentPlanDetailGet_Result>("MUNSERAccountPaymentPlanDetailGet", companyIDParameter, iDParameter, accountPaymentPlanIDParameter, isActiveParameter, isPaidParameter, isRemoveInterestParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyRightGetByOwner_Result> MUNAccountPropertyRightGetByOwner(Nullable<int> companyID, Nullable<int> ownerID, Nullable<int> serviceID, Nullable<int> fiscalYearID, Nullable<int> iD, Nullable<bool> isTransferByRight)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var fiscalYearIDParameter = fiscalYearID.HasValue ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isTransferByRightParameter = isTransferByRight.HasValue ?
                new ObjectParameter("IsTransferByRight", isTransferByRight) :
                new ObjectParameter("IsTransferByRight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyRightGetByOwner_Result>("MUNAccountPropertyRightGetByOwner", companyIDParameter, ownerIDParameter, serviceIDParameter, fiscalYearIDParameter, iDParameter, isTransferByRightParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountServiceCollectionDetailGet_Result> MUNSERAccountServiceCollectionDetailGet(Nullable<int> companyID, Nullable<int> accountServiceID, Nullable<int> accountServiceCollectionDetailID, string language, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountServiceIDParameter = accountServiceID.HasValue ?
                new ObjectParameter("AccountServiceID", accountServiceID) :
                new ObjectParameter("AccountServiceID", typeof(int));
    
            var accountServiceCollectionDetailIDParameter = accountServiceCollectionDetailID.HasValue ?
                new ObjectParameter("AccountServiceCollectionDetailID", accountServiceCollectionDetailID) :
                new ObjectParameter("AccountServiceCollectionDetailID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountServiceCollectionDetailGet_Result>("MUNSERAccountServiceCollectionDetailGet", companyIDParameter, accountServiceIDParameter, accountServiceCollectionDetailIDParameter, languageParameter, filterTextParameter);
        }
    
        public virtual int MUNSERAccountPaymentPlanDelete(Nullable<int> iD, string reason, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, byte[] original_RowVersion)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountPaymentPlanDelete", iDParameter, reasonParameter, modifiedUserIDParameter, modifiedDateParameter, original_RowVersionParameter);
        }
    
        public virtual ObjectResult<MUNSERAccountPaymentPlanGet_Result> MUNSERAccountPaymentPlanGet(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, Nullable<bool> isActive, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERAccountPaymentPlanGet_Result>("MUNSERAccountPaymentPlanGet", companyIDParameter, accountIDParameter, iDParameter, isActiveParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyRightHistoryGet_Result> MUNAccountPropertyRightHistoryGet(Nullable<int> companyID, Nullable<int> accountPropertyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountPropertyIDParameter = accountPropertyID.HasValue ?
                new ObjectParameter("AccountPropertyID", accountPropertyID) :
                new ObjectParameter("AccountPropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyRightHistoryGet_Result>("MUNAccountPropertyRightHistoryGet", companyIDParameter, accountPropertyIDParameter);
        }
    
        public virtual int MUNAccountPropertySplitVoid(Nullable<int> companyID, Nullable<int> transferID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountPropertySplitVoid", companyIDParameter, transferIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountPropertyGet_Result> MUNAccountPropertyGet(Nullable<int> companyID, string locale, Nullable<int> iD, Nullable<bool> isActive, Nullable<int> transferID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountPropertyGet_Result>("MUNAccountPropertyGet", companyIDParameter, localeParameter, iDParameter, isActiveParameter, transferIDParameter);
        }
    
        public virtual int MUNSERAccountPaymentPlanUpdate(Nullable<int> iD, Nullable<int> companyID, Nullable<int> servicePaymentPlanID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> instalmentPercentage, Nullable<decimal> interestPercentage, Nullable<decimal> lateInterestPercentage, Nullable<int> months, Nullable<decimal> instalmentAmount, Nullable<decimal> monthlyAmount, Nullable<decimal> monthlyInterest, Nullable<decimal> totalInterest, Nullable<decimal> totalPayment, Nullable<decimal> totalDebt, Nullable<bool> applybyAmnesty, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string accountPaymentPlanDetailJson)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var servicePaymentPlanIDParameter = servicePaymentPlanID.HasValue ?
                new ObjectParameter("ServicePaymentPlanID", servicePaymentPlanID) :
                new ObjectParameter("ServicePaymentPlanID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var instalmentPercentageParameter = instalmentPercentage.HasValue ?
                new ObjectParameter("InstalmentPercentage", instalmentPercentage) :
                new ObjectParameter("InstalmentPercentage", typeof(decimal));
    
            var interestPercentageParameter = interestPercentage.HasValue ?
                new ObjectParameter("InterestPercentage", interestPercentage) :
                new ObjectParameter("InterestPercentage", typeof(decimal));
    
            var lateInterestPercentageParameter = lateInterestPercentage.HasValue ?
                new ObjectParameter("LateInterestPercentage", lateInterestPercentage) :
                new ObjectParameter("LateInterestPercentage", typeof(decimal));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var instalmentAmountParameter = instalmentAmount.HasValue ?
                new ObjectParameter("InstalmentAmount", instalmentAmount) :
                new ObjectParameter("InstalmentAmount", typeof(decimal));
    
            var monthlyAmountParameter = monthlyAmount.HasValue ?
                new ObjectParameter("MonthlyAmount", monthlyAmount) :
                new ObjectParameter("MonthlyAmount", typeof(decimal));
    
            var monthlyInterestParameter = monthlyInterest.HasValue ?
                new ObjectParameter("MonthlyInterest", monthlyInterest) :
                new ObjectParameter("MonthlyInterest", typeof(decimal));
    
            var totalInterestParameter = totalInterest.HasValue ?
                new ObjectParameter("TotalInterest", totalInterest) :
                new ObjectParameter("TotalInterest", typeof(decimal));
    
            var totalPaymentParameter = totalPayment.HasValue ?
                new ObjectParameter("TotalPayment", totalPayment) :
                new ObjectParameter("TotalPayment", typeof(decimal));
    
            var totalDebtParameter = totalDebt.HasValue ?
                new ObjectParameter("TotalDebt", totalDebt) :
                new ObjectParameter("TotalDebt", typeof(decimal));
    
            var applybyAmnestyParameter = applybyAmnesty.HasValue ?
                new ObjectParameter("ApplybyAmnesty", applybyAmnesty) :
                new ObjectParameter("ApplybyAmnesty", typeof(bool));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var accountPaymentPlanDetailJsonParameter = accountPaymentPlanDetailJson != null ?
                new ObjectParameter("AccountPaymentPlanDetailJson", accountPaymentPlanDetailJson) :
                new ObjectParameter("AccountPaymentPlanDetailJson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNSERAccountPaymentPlanUpdate", iDParameter, companyIDParameter, servicePaymentPlanIDParameter, startDateParameter, endDateParameter, instalmentPercentageParameter, interestPercentageParameter, lateInterestPercentageParameter, monthsParameter, instalmentAmountParameter, monthlyAmountParameter, monthlyInterestParameter, totalInterestParameter, totalPaymentParameter, totalDebtParameter, applybyAmnestyParameter, modifiedUserIDParameter, modifiedDateParameter, accountPaymentPlanDetailJsonParameter);
        }
    
        public virtual ObjectResult<MUNAccountCreditHistoryGet_Result> MUNAccountCreditHistoryGet(Nullable<int> companyID, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountCreditHistoryGet_Result>("MUNAccountCreditHistoryGet", companyIDParameter, accountIDParameter);
        }
    
        public virtual int MUNAccountCreditHistoryInsert(Nullable<int> companyID, Nullable<System.DateTime> date, Nullable<int> accountID, Nullable<decimal> creditAmount, string reason, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountCreditHistoryInsert", companyIDParameter, dateParameter, accountIDParameter, creditAmountParameter, reasonParameter, createdUserIDParameter, createdDateParameter, iD);
        }
    
        public virtual ObjectResult<MUNSERREPPaymentPlanExport_Result> MUNSERREPPaymentPlanExport(string locale, Nullable<int> companyID)
        {
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNSERREPPaymentPlanExport_Result>("MUNSERREPPaymentPlanExport", localeParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNAccountDebitHistoryGet_Result> MUNAccountDebitHistoryGet(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountDebitHistoryGet_Result>("MUNAccountDebitHistoryGet", accountIDParameter);
        }
    
        public virtual int MUNAccountDebitHistoryInsert(Nullable<System.DateTime> date, Nullable<int> accountID, Nullable<decimal> debitAmount, string reason, Nullable<int> paymentID, Nullable<bool> isPaid, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, ObjectParameter iD)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccountDebitHistoryInsert", dateParameter, accountIDParameter, debitAmountParameter, reasonParameter, paymentIDParameter, isPaidParameter, createdUserIDParameter, createdDateParameter, iD);
        }
    
        public virtual ObjectResult<MUNAccountExport_Result> MUNAccountExport(Nullable<int> companyID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNAccountExport_Result>("MUNAccountExport", companyIDParameter, languageParameter);
        }
    }
}
