//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CaseDataModelContainer : DbContext
    {
        public CaseDataModelContainer()
            : base("name=CaseDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<MUNITAXCasePriorityGet_Result> MUNITAXCasePriorityGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCasePriorityGet_Result>("MUNITAXCasePriorityGet", languageParameter);
        }
    
        public virtual ObjectResult<MUNITAXTeamGet_Result> MUNITAXTeamGet(Nullable<System.Guid> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXTeamGet_Result>("MUNITAXTeamGet", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNITAXCasesInsert(Nullable<int> companyID, Nullable<long> accountID, Nullable<int> workflowID, string name, string refrence, string note, Nullable<int> priorityID, Nullable<int> weight, Nullable<System.Guid> ownerID, Nullable<System.Guid> assignToID, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> documentType, string accountSerives)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var priorityIDParameter = priorityID.HasValue ?
                new ObjectParameter("PriorityID", priorityID) :
                new ObjectParameter("PriorityID", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(System.Guid));
    
            var assignToIDParameter = assignToID.HasValue ?
                new ObjectParameter("AssignToID", assignToID) :
                new ObjectParameter("AssignToID", typeof(System.Guid));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var accountSerivesParameter = accountSerives != null ?
                new ObjectParameter("AccountSerives", accountSerives) :
                new ObjectParameter("AccountSerives", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNITAXCasesInsert", companyIDParameter, accountIDParameter, workflowIDParameter, nameParameter, refrenceParameter, noteParameter, priorityIDParameter, weightParameter, ownerIDParameter, assignToIDParameter, createdUserIDParameter, createdDateParameter, documentTypeParameter, accountSerivesParameter);
        }
    
        public virtual ObjectResult<MUNITAXMasterCasesGetWithPaging_Result> MUNITAXMasterCasesGetWithPaging(Nullable<int> companyID, string filterText, Nullable<int> caseID, string keyCode, string bussinessName, Nullable<int> priorityID, Nullable<int> weight, Nullable<System.Guid> asignedTo, Nullable<int> statusID, Nullable<int> reasonID, Nullable<int> currentIndex, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumn, string sort, string language, Nullable<int> workflowID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var keyCodeParameter = keyCode != null ?
                new ObjectParameter("KeyCode", keyCode) :
                new ObjectParameter("KeyCode", typeof(string));
    
            var bussinessNameParameter = bussinessName != null ?
                new ObjectParameter("BussinessName", bussinessName) :
                new ObjectParameter("BussinessName", typeof(string));
    
            var priorityIDParameter = priorityID.HasValue ?
                new ObjectParameter("PriorityID", priorityID) :
                new ObjectParameter("PriorityID", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var asignedToParameter = asignedTo.HasValue ?
                new ObjectParameter("AsignedTo", asignedTo) :
                new ObjectParameter("AsignedTo", typeof(System.Guid));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXMasterCasesGetWithPaging_Result>("MUNITAXMasterCasesGetWithPaging", companyIDParameter, filterTextParameter, caseIDParameter, keyCodeParameter, bussinessNameParameter, priorityIDParameter, weightParameter, asignedToParameter, statusIDParameter, reasonIDParameter, currentIndexParameter, pageSizeParameter, totalRecords, sortColumnParameter, sortParameter, languageParameter, workflowIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowFormGet_Result> MUNDOCDocumentWorkflowFormGet(Nullable<int> formID, string language)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowFormGet_Result>("MUNDOCDocumentWorkflowFormGet", formIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowHistoryLogGet_Result> MUNDOCDocumentWorkflowHistoryLogGet(string caseIDs, string language)
        {
            var caseIDsParameter = caseIDs != null ?
                new ObjectParameter("CaseIDs", caseIDs) :
                new ObjectParameter("CaseIDs", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowHistoryLogGet_Result>("MUNDOCDocumentWorkflowHistoryLogGet", caseIDsParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNITAXCasesGet_Result> MUNITAXCasesGet(Nullable<int> caseID, string language, Nullable<int> companyID)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCasesGet_Result>("MUNITAXCasesGet", caseIDParameter, languageParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNITAXCaseMeetingNotesGetWithPaging_Result> MUNITAXCaseMeetingNotesGetWithPaging(Nullable<int> caseID, Nullable<int> currentIndex, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumn, string sortDirection, string language, Nullable<int> companyID)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCaseMeetingNotesGetWithPaging_Result>("MUNITAXCaseMeetingNotesGetWithPaging", caseIDParameter, currentIndexParameter, pageSizeParameter, totalRecords, sortColumnParameter, sortDirectionParameter, languageParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNITAXMeetingTypeGet_Result> MUNITAXMeetingTypeGet(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXMeetingTypeGet_Result>("MUNITAXMeetingTypeGet", languageParameter);
        }
    
        public virtual int MUNITAXCaseMeetingNotesInsert(Nullable<int> caseID, Nullable<int> meetingTypeID, Nullable<System.DateTime> date, string note, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var meetingTypeIDParameter = meetingTypeID.HasValue ?
                new ObjectParameter("MeetingTypeID", meetingTypeID) :
                new ObjectParameter("MeetingTypeID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNITAXCaseMeetingNotesInsert", caseIDParameter, meetingTypeIDParameter, dateParameter, noteParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<MUNPRNPrintTemplateGetWithPaging_Result> MUNPRNPrintTemplateGetWithPaging(Nullable<int> companyID, string filterText, Nullable<int> currentIndex, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumn, string sortDirection, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNPRNPrintTemplateGetWithPaging_Result>("MUNPRNPrintTemplateGetWithPaging", companyIDParameter, filterTextParameter, currentIndexParameter, pageSizeParameter, totalRecords, sortColumnParameter, sortDirectionParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNITAXMasterCasesGet_Result> MUNITAXMasterCasesGet(Nullable<int> reasonID, Nullable<int> companyID, Nullable<int> statusID, Nullable<int> workflowID, string language, string caseIDs)
        {
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var caseIDsParameter = caseIDs != null ?
                new ObjectParameter("CaseIDs", caseIDs) :
                new ObjectParameter("CaseIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXMasterCasesGet_Result>("MUNITAXMasterCasesGet", reasonIDParameter, companyIDParameter, statusIDParameter, workflowIDParameter, languageParameter, caseIDsParameter);
        }
    
        public virtual ObjectResult<MUNITAXDataSourceGet_Result> MUNITAXDataSourceGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXDataSourceGet_Result>("MUNITAXDataSourceGet", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNPRNPrintCenterInsert(string keyCode, Nullable<int> printTemplateID, Nullable<int> outputFormat, string comments, Nullable<System.DateTime> date, string destinataryName, string destinataryPosition, string destinataryDepartment, Nullable<int> dataSourceID, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, string caseIDs, Nullable<int> caseCount, Nullable<decimal> balance)
        {
            var keyCodeParameter = keyCode != null ?
                new ObjectParameter("KeyCode", keyCode) :
                new ObjectParameter("KeyCode", typeof(string));
    
            var printTemplateIDParameter = printTemplateID.HasValue ?
                new ObjectParameter("PrintTemplateID", printTemplateID) :
                new ObjectParameter("PrintTemplateID", typeof(int));
    
            var outputFormatParameter = outputFormat.HasValue ?
                new ObjectParameter("OutputFormat", outputFormat) :
                new ObjectParameter("OutputFormat", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var destinataryNameParameter = destinataryName != null ?
                new ObjectParameter("DestinataryName", destinataryName) :
                new ObjectParameter("DestinataryName", typeof(string));
    
            var destinataryPositionParameter = destinataryPosition != null ?
                new ObjectParameter("DestinataryPosition", destinataryPosition) :
                new ObjectParameter("DestinataryPosition", typeof(string));
    
            var destinataryDepartmentParameter = destinataryDepartment != null ?
                new ObjectParameter("DestinataryDepartment", destinataryDepartment) :
                new ObjectParameter("DestinataryDepartment", typeof(string));
    
            var dataSourceIDParameter = dataSourceID.HasValue ?
                new ObjectParameter("DataSourceID", dataSourceID) :
                new ObjectParameter("DataSourceID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var caseIDsParameter = caseIDs != null ?
                new ObjectParameter("CaseIDs", caseIDs) :
                new ObjectParameter("CaseIDs", typeof(string));
    
            var caseCountParameter = caseCount.HasValue ?
                new ObjectParameter("CaseCount", caseCount) :
                new ObjectParameter("CaseCount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNPRNPrintCenterInsert", keyCodeParameter, printTemplateIDParameter, outputFormatParameter, commentsParameter, dateParameter, destinataryNameParameter, destinataryPositionParameter, destinataryDepartmentParameter, dataSourceIDParameter, createdUserIDParameter, createdDateParameter, caseIDsParameter, caseCountParameter, balanceParameter);
        }
    
        public virtual ObjectResult<MUNITAXAccountViewGet_Result> MUNITAXAccountViewGet(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXAccountViewGet_Result>("MUNITAXAccountViewGet", companyIDParameter);
        }
    
        public virtual int MUNPRNPrintCenterFileIDUpdate(Nullable<int> iD, Nullable<int> fileID, Nullable<System.Guid> modifidUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var modifidUserIDParameter = modifidUserID.HasValue ?
                new ObjectParameter("ModifidUserID", modifidUserID) :
                new ObjectParameter("ModifidUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNPRNPrintCenterFileIDUpdate", iDParameter, fileIDParameter, modifidUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNITAXCasesKeyCode_Result> MUNITAXCasesKeyCode(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCasesKeyCode_Result>("MUNITAXCasesKeyCode", companyIDParameter);
        }
    
        public virtual int MUNPRNPrintCenterLogInsert(Nullable<System.Guid> userID, Nullable<System.DateTime> generateDate, Nullable<int> fileID, string action, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var generateDateParameter = generateDate.HasValue ?
                new ObjectParameter("GenerateDate", generateDate) :
                new ObjectParameter("GenerateDate", typeof(System.DateTime));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNPRNPrintCenterLogInsert", userIDParameter, generateDateParameter, fileIDParameter, actionParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<MUNITAXCaseImagesGetWithPaging_Result> MUNITAXCaseImagesGetWithPaging(Nullable<int> caseID, Nullable<int> currentIndex, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumn, string sortDirection, Nullable<int> companyID)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCaseImagesGetWithPaging_Result>("MUNITAXCaseImagesGetWithPaging", caseIDParameter, currentIndexParameter, pageSizeParameter, totalRecords, sortColumnParameter, sortDirectionParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNPRNPrintCenterGetWithPaging_Result> MUNPRNPrintCenterGetWithPaging(string filterText, Nullable<int> currentIndex, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumn, string sortDirection, string language, Nullable<int> companyID)
        {
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNPRNPrintCenterGetWithPaging_Result>("MUNPRNPrintCenterGetWithPaging", filterTextParameter, currentIndexParameter, pageSizeParameter, totalRecords, sortColumnParameter, sortDirectionParameter, languageParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNPRNPrintTemplateRelatedStepsGet_Result> MUNPRNPrintTemplateRelatedStepsGet(Nullable<int> companyID, string language, string statusIDs)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNPRNPrintTemplateRelatedStepsGet_Result>("MUNPRNPrintTemplateRelatedStepsGet", companyIDParameter, languageParameter, statusIDsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNPRNPrintTemplateInsert(Nullable<int> companyID, Nullable<int> workFlowID, string code, Nullable<int> fileID, string name, string description, Nullable<int> statusID, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> dataSourceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var dataSourceIDParameter = dataSourceID.HasValue ?
                new ObjectParameter("DataSourceID", dataSourceID) :
                new ObjectParameter("DataSourceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNPRNPrintTemplateInsert", companyIDParameter, workFlowIDParameter, codeParameter, fileIDParameter, nameParameter, descriptionParameter, statusIDParameter, createdUserIDParameter, createdDateParameter, dataSourceIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowReasonGet_Result> MUNDOCDocumentWorkflowReasonGet(Nullable<int> companyID, string language, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowReasonGet_Result>("MUNDOCDocumentWorkflowReasonGet", companyIDParameter, languageParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNITAXMasterCasesGetBalanceByStatus_Result> MUNITAXMasterCasesGetBalanceByStatus(Nullable<int> companyID, string local)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localParameter = local != null ?
                new ObjectParameter("Local", local) :
                new ObjectParameter("Local", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXMasterCasesGetBalanceByStatus_Result>("MUNITAXMasterCasesGetBalanceByStatus", companyIDParameter, localParameter);
        }
    
        public virtual ObjectResult<MUNITAXMasterCasesGetCountByStatus_Result> MUNITAXMasterCasesGetCountByStatus(Nullable<int> companyID, string local)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localParameter = local != null ?
                new ObjectParameter("Local", local) :
                new ObjectParameter("Local", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXMasterCasesGetCountByStatus_Result>("MUNITAXMasterCasesGetCountByStatus", companyIDParameter, localParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MUNPRNPrintTemplateUpdate(Nullable<int> printTemplateID, string code, string name, string description, Nullable<int> workFlowID, Nullable<int> statusID, Nullable<int> dataSourceID, string local, Nullable<System.Guid> modifiesUserID, Nullable<System.DateTime> modifiedDate, Nullable<int> companyID)
        {
            var printTemplateIDParameter = printTemplateID.HasValue ?
                new ObjectParameter("PrintTemplateID", printTemplateID) :
                new ObjectParameter("PrintTemplateID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var dataSourceIDParameter = dataSourceID.HasValue ?
                new ObjectParameter("DataSourceID", dataSourceID) :
                new ObjectParameter("DataSourceID", typeof(int));
    
            var localParameter = local != null ?
                new ObjectParameter("Local", local) :
                new ObjectParameter("Local", typeof(string));
    
            var modifiesUserIDParameter = modifiesUserID.HasValue ?
                new ObjectParameter("ModifiesUserID", modifiesUserID) :
                new ObjectParameter("ModifiesUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MUNPRNPrintTemplateUpdate", printTemplateIDParameter, codeParameter, nameParameter, descriptionParameter, workFlowIDParameter, statusIDParameter, dataSourceIDParameter, localParameter, modifiesUserIDParameter, modifiedDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNPRNPrintTemplateGet_Result> MUNPRNPrintTemplateGet(Nullable<int> companyID, string language, Nullable<int> statusID, Nullable<int> templateID, Nullable<int> workflowID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNPRNPrintTemplateGet_Result>("MUNPRNPrintTemplateGet", companyIDParameter, languageParameter, statusIDParameter, templateIDParameter, workflowIDParameter);
        }
    
        public virtual int MUNITAXCasesUpdate(Nullable<int> iD, Nullable<int> companyID, string name, string refrence, string note, Nullable<int> priorityID, Nullable<int> weight, Nullable<System.Guid> ownerID, Nullable<System.Guid> assignToID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var priorityIDParameter = priorityID.HasValue ?
                new ObjectParameter("PriorityID", priorityID) :
                new ObjectParameter("PriorityID", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(System.Guid));
    
            var assignToIDParameter = assignToID.HasValue ?
                new ObjectParameter("AssignToID", assignToID) :
                new ObjectParameter("AssignToID", typeof(System.Guid));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNITAXCasesUpdate", iDParameter, companyIDParameter, nameParameter, refrenceParameter, noteParameter, priorityIDParameter, weightParameter, ownerIDParameter, assignToIDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNITAXCaseMeetingNotesGet_Result> MUNITAXCaseMeetingNotesGet(Nullable<int> caseID, string language, Nullable<int> companyID, Nullable<int> iD)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNITAXCaseMeetingNotesGet_Result>("MUNITAXCaseMeetingNotesGet", caseIDParameter, languageParameter, companyIDParameter, iDParameter);
        }
    
        public virtual int MUNITAXCaseMeetingNotesUpdate(Nullable<int> iD, Nullable<int> caseID, Nullable<int> meetingTypeID, Nullable<System.DateTime> date, string note, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, Nullable<int> companyID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var meetingTypeIDParameter = meetingTypeID.HasValue ?
                new ObjectParameter("MeetingTypeID", meetingTypeID) :
                new ObjectParameter("MeetingTypeID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNITAXCaseMeetingNotesUpdate", iDParameter, caseIDParameter, meetingTypeIDParameter, dateParameter, noteParameter, modifiedUserIDParameter, modifiedDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusReasonGet_Result> MUNDOCDocumentWorkflowStatusReasonGet(Nullable<int> workflowID, string version, string language, Nullable<int> statusID, Nullable<int> reasonID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusReasonGet_Result>("MUNDOCDocumentWorkflowStatusReasonGet", workflowIDParameter, versionParameter, languageParameter, statusIDParameter, reasonIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowGet_Result> MUNDOCDocumentWorkflowGet(Nullable<int> companyID, string language, Nullable<bool> isActie, Nullable<bool> isDeleted, Nullable<int> iD, Nullable<int> documentTypeID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var isActieParameter = isActie.HasValue ?
                new ObjectParameter("IsActie", isActie) :
                new ObjectParameter("IsActie", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowGet_Result>("MUNDOCDocumentWorkflowGet", companyIDParameter, languageParameter, isActieParameter, isDeletedParameter, iDParameter, documentTypeIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusGet_Result> MUNDOCDocumentWorkflowStatusGet(Nullable<int> workflowID, Nullable<int> companyID, string version, string language, Nullable<bool> isPublic, Nullable<bool> isDeleted, Nullable<int> iD)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusGet_Result>("MUNDOCDocumentWorkflowStatusGet", workflowIDParameter, companyIDParameter, versionParameter, languageParameter, isPublicParameter, isDeletedParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusActivityGet_Result> MUNDOCDocumentWorkflowStatusActivityGet(Nullable<int> companyID, string language, Nullable<int> workFlowID, string version, Nullable<int> statusID, Nullable<byte> type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusActivityGet_Result>("MUNDOCDocumentWorkflowStatusActivityGet", companyIDParameter, languageParameter, workFlowIDParameter, versionParameter, statusIDParameter, typeParameter);
        }
    }
}
