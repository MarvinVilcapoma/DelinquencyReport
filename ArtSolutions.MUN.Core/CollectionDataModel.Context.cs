//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CollectionDataModelContainer : DbContext
    {
        public CollectionDataModelContainer()
            : base("name=CollectionDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int MUNCOLInvoiceGetGrant(Nullable<int> companyID, Nullable<int> invoiceID, Nullable<int> serviceID, Nullable<int> collectionTemplateID, ObjectParameter grantID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var collectionTemplateIDParameter = collectionTemplateID.HasValue ?
                new ObjectParameter("CollectionTemplateID", collectionTemplateID) :
                new ObjectParameter("CollectionTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLInvoiceGetGrant", companyIDParameter, invoiceIDParameter, serviceIDParameter, collectionTemplateIDParameter, grantID);
        }
    
        public virtual ObjectResult<MUNCOLInvoiceGetWithPaging_Result> MUNCOLInvoiceGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLInvoiceGetWithPaging_Result>("MUNCOLInvoiceGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual int MUNCOLInvoiceVoid(Nullable<int> iD, Nullable<int> companyID, string voidReason, byte[] original_RowVersion, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var voidReasonParameter = voidReason != null ?
                new ObjectParameter("VoidReason", voidReason) :
                new ObjectParameter("VoidReason", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLInvoiceVoid", iDParameter, companyIDParameter, voidReasonParameter, original_RowVersionParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNCOLPaymentVoid(Nullable<int> iD, Nullable<int> companyID, string voidReason, byte[] original_RowVersion, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var voidReasonParameter = voidReason != null ?
                new ObjectParameter("VoidReason", voidReason) :
                new ObjectParameter("VoidReason", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLPaymentVoid", iDParameter, companyIDParameter, voidReasonParameter, original_RowVersionParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNCOLClosingGet_Result> MUNCOLClosingGet(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string language, Nullable<bool> onlyPostedDocuments)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var onlyPostedDocumentsParameter = onlyPostedDocuments.HasValue ?
                new ObjectParameter("OnlyPostedDocuments", onlyPostedDocuments) :
                new ObjectParameter("OnlyPostedDocuments", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLClosingGet_Result>("MUNCOLClosingGet", companyIDParameter, accountIDParameter, iDParameter, languageParameter, onlyPostedDocumentsParameter);
        }
    
        public virtual ObjectResult<MUNCOLClosingGetWithPaging_Result> MUNCOLClosingGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isDeposited, Nullable<bool> isVoid, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isDepositedParameter = isDeposited.HasValue ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(bool));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLClosingGetWithPaging_Result>("MUNCOLClosingGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isDepositedParameter, isVoidParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual int MUNCOLClosingInsert(Nullable<int> companyID, Nullable<System.Guid> cashierID, string cashierName, Nullable<int> closingTypeID, Nullable<System.DateTime> date, string description, Nullable<int> paymentOptionID, Nullable<decimal> netClosing, Nullable<int> paymentReceiptCount, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string commaSeperatedPaymentIds, ObjectParameter closingId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var cashierIDParameter = cashierID.HasValue ?
                new ObjectParameter("CashierID", cashierID) :
                new ObjectParameter("CashierID", typeof(System.Guid));
    
            var cashierNameParameter = cashierName != null ?
                new ObjectParameter("CashierName", cashierName) :
                new ObjectParameter("CashierName", typeof(string));
    
            var closingTypeIDParameter = closingTypeID.HasValue ?
                new ObjectParameter("ClosingTypeID", closingTypeID) :
                new ObjectParameter("ClosingTypeID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var paymentOptionIDParameter = paymentOptionID.HasValue ?
                new ObjectParameter("PaymentOptionID", paymentOptionID) :
                new ObjectParameter("PaymentOptionID", typeof(int));
    
            var netClosingParameter = netClosing.HasValue ?
                new ObjectParameter("NetClosing", netClosing) :
                new ObjectParameter("NetClosing", typeof(decimal));
    
            var paymentReceiptCountParameter = paymentReceiptCount.HasValue ?
                new ObjectParameter("PaymentReceiptCount", paymentReceiptCount) :
                new ObjectParameter("PaymentReceiptCount", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var commaSeperatedPaymentIdsParameter = commaSeperatedPaymentIds != null ?
                new ObjectParameter("CommaSeperatedPaymentIds", commaSeperatedPaymentIds) :
                new ObjectParameter("CommaSeperatedPaymentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLClosingInsert", companyIDParameter, cashierIDParameter, cashierNameParameter, closingTypeIDParameter, dateParameter, descriptionParameter, paymentOptionIDParameter, netClosingParameter, paymentReceiptCountParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, commaSeperatedPaymentIdsParameter, closingId);
        }
    
        public virtual ObjectResult<MUNCOLClosingPrint_Result> MUNCOLClosingPrint(Nullable<int> iD, Nullable<int> companyID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLClosingPrint_Result>("MUNCOLClosingPrint", iDParameter, companyIDParameter, languageParameter);
        }
    
        public virtual int MUNCOLClosingVoid(Nullable<int> iD, Nullable<int> companyID, string voidReason, byte[] original_RowVersion, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var voidReasonParameter = voidReason != null ?
                new ObjectParameter("VoidReason", voidReason) :
                new ObjectParameter("VoidReason", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLClosingVoid", iDParameter, companyIDParameter, voidReasonParameter, original_RowVersionParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNCOLDepositVoid(Nullable<int> iD, Nullable<int> companyID, string voidReason, byte[] original_RowVersion, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var voidReasonParameter = voidReason != null ?
                new ObjectParameter("VoidReason", voidReason) :
                new ObjectParameter("VoidReason", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLDepositVoid", iDParameter, companyIDParameter, voidReasonParameter, original_RowVersionParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNCOLPaymentPlanVoid(Nullable<int> iD, Nullable<int> companyID, string voidReason, byte[] original_RowVersion, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var voidReasonParameter = voidReason != null ?
                new ObjectParameter("VoidReason", voidReason) :
                new ObjectParameter("VoidReason", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLPaymentPlanVoid", iDParameter, companyIDParameter, voidReasonParameter, original_RowVersionParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual int MUNCOLInvoiceUpdate(Nullable<int> iD, Nullable<int> companyID, Nullable<int> accountID, Nullable<System.DateTime> date, string reference, string notes, string termsAndConditions, Nullable<decimal> total, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string language, byte[] original_RowVersion, string invoiceDetailJson)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var termsAndConditionsParameter = termsAndConditions != null ?
                new ObjectParameter("TermsAndConditions", termsAndConditions) :
                new ObjectParameter("TermsAndConditions", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var original_RowVersionParameter = original_RowVersion != null ?
                new ObjectParameter("Original_RowVersion", original_RowVersion) :
                new ObjectParameter("Original_RowVersion", typeof(byte[]));
    
            var invoiceDetailJsonParameter = invoiceDetailJson != null ?
                new ObjectParameter("InvoiceDetailJson", invoiceDetailJson) :
                new ObjectParameter("InvoiceDetailJson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLInvoiceUpdate", iDParameter, companyIDParameter, accountIDParameter, dateParameter, referenceParameter, notesParameter, termsAndConditionsParameter, totalParameter, modifiedUserIDParameter, modifiedDateParameter, languageParameter, original_RowVersionParameter, invoiceDetailJsonParameter);
        }
    
        public virtual ObjectResult<MUNCOLInvoiceGet_Result> MUNCOLInvoiceGet(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, Nullable<bool> onlyPendingInvoice, Nullable<bool> onlyPostedInvoice, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var onlyPendingInvoiceParameter = onlyPendingInvoice.HasValue ?
                new ObjectParameter("OnlyPendingInvoice", onlyPendingInvoice) :
                new ObjectParameter("OnlyPendingInvoice", typeof(bool));
    
            var onlyPostedInvoiceParameter = onlyPostedInvoice.HasValue ?
                new ObjectParameter("OnlyPostedInvoice", onlyPostedInvoice) :
                new ObjectParameter("OnlyPostedInvoice", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLInvoiceGet_Result>("MUNCOLInvoiceGet", companyIDParameter, accountIDParameter, iDParameter, onlyPendingInvoiceParameter, onlyPostedInvoiceParameter, languageParameter);
        }
    
        public virtual int MUNCOLPaymentInsertByInvoice(Nullable<int> companyID, Nullable<int> accountID, Nullable<System.DateTime> date, Nullable<int> invoiceID, Nullable<decimal> totalAmount, string notes, Nullable<int> attachmentID, string paymentOptionJSON, string number, string numberPrefix, Nullable<bool> isManual, Nullable<bool> isOfficialReceipt, Nullable<System.Guid> createdUserId, Nullable<System.DateTime> createdDate, string language, Nullable<decimal> applyCreditAmount, ObjectParameter paymentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var attachmentIDParameter = attachmentID.HasValue ?
                new ObjectParameter("AttachmentID", attachmentID) :
                new ObjectParameter("AttachmentID", typeof(int));
    
            var paymentOptionJSONParameter = paymentOptionJSON != null ?
                new ObjectParameter("PaymentOptionJSON", paymentOptionJSON) :
                new ObjectParameter("PaymentOptionJSON", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var isOfficialReceiptParameter = isOfficialReceipt.HasValue ?
                new ObjectParameter("IsOfficialReceipt", isOfficialReceipt) :
                new ObjectParameter("IsOfficialReceipt", typeof(bool));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyCreditAmountParameter = applyCreditAmount.HasValue ?
                new ObjectParameter("ApplyCreditAmount", applyCreditAmount) :
                new ObjectParameter("ApplyCreditAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLPaymentInsertByInvoice", companyIDParameter, accountIDParameter, dateParameter, invoiceIDParameter, totalAmountParameter, notesParameter, attachmentIDParameter, paymentOptionJSONParameter, numberParameter, numberPrefixParameter, isManualParameter, isOfficialReceiptParameter, createdUserIdParameter, createdDateParameter, languageParameter, applyCreditAmountParameter, paymentID);
        }
    
        public virtual ObjectResult<MUNCOLCreditNoteGetWithPaging_Result> MUNCOLCreditNoteGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLCreditNoteGetWithPaging_Result>("MUNCOLCreditNoteGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isVoidParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNCOLInvoiceDetailGet_Result> MUNCOLInvoiceDetailGet(Nullable<int> companyID, Nullable<int> iD, Nullable<int> invoiceID, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLInvoiceDetailGet_Result>("MUNCOLInvoiceDetailGet", companyIDParameter, iDParameter, invoiceIDParameter, languageParameter);
        }
    
        public virtual int MUNCOLCreditNoteUpdateStatus(Nullable<int> iD, Nullable<int> workflowStatusID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter retval)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLCreditNoteUpdateStatus", iDParameter, workflowStatusIDParameter, modifiedUserIDParameter, modifiedDateParameter, retval);
        }
    
        public virtual int MUNACCPostingProcessUpdateStatus(Nullable<int> iD, Nullable<int> workflowStatusID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter retval)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNACCPostingProcessUpdateStatus", iDParameter, workflowStatusIDParameter, modifiedUserIDParameter, modifiedDateParameter, retval);
        }
    
        public virtual ObjectResult<MUNACCPostingProcessGetWithPaging_Result> MUNACCPostingProcessGetWithPaging(Nullable<int> companyID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, string documentTypeID, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var documentTypeIDParameter = documentTypeID != null ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCPostingProcessGetWithPaging_Result>("MUNACCPostingProcessGetWithPaging", companyIDParameter, iDParameter, filterTextParameter, isVoidParameter, documentTypeIDParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual int MUNCOLCreditNoteByPaymentReceipt(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> paymentID, Nullable<System.DateTime> date, Nullable<decimal> amount, string reason, string commaSeperatedImageIDs, Nullable<System.Guid> createdUserId, Nullable<System.DateTime> createdDate, string language, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var commaSeperatedImageIDsParameter = commaSeperatedImageIDs != null ?
                new ObjectParameter("CommaSeperatedImageIDs", commaSeperatedImageIDs) :
                new ObjectParameter("CommaSeperatedImageIDs", typeof(string));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLCreditNoteByPaymentReceipt", companyIDParameter, accountIDParameter, paymentIDParameter, dateParameter, amountParameter, reasonParameter, commaSeperatedImageIDsParameter, createdUserIdParameter, createdDateParameter, languageParameter, iD);
        }
    
        public virtual ObjectResult<MUNACCJournalDetailForPostingProcess_Result> MUNACCJournalDetailForPostingProcess(Nullable<int> companyID, string locale, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string documentTypeID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var documentTypeIDParameter = documentTypeID != null ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCJournalDetailForPostingProcess_Result>("MUNACCJournalDetailForPostingProcess", companyIDParameter, localeParameter, startDateParameter, endDateParameter, documentTypeIDParameter);
        }
    
        public virtual ObjectResult<MUNCOLDepositPrint_Result> MUNCOLDepositPrint(Nullable<int> iD, Nullable<int> companyID, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLDepositPrint_Result>("MUNCOLDepositPrint", iDParameter, companyIDParameter, languageParameter);
        }
    
        public virtual int MUNAccJournalUpdateForFINJournalID(string fINJournalListJSON, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter retval)
        {
            var fINJournalListJSONParameter = fINJournalListJSON != null ?
                new ObjectParameter("FINJournalListJSON", fINJournalListJSON) :
                new ObjectParameter("FINJournalListJSON", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNAccJournalUpdateForFINJournalID", fINJournalListJSONParameter, modifiedUserIDParameter, modifiedDateParameter, retval);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNCOLCreditNoteGetBalance(Nullable<int> companyID, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNCOLCreditNoteGetBalance", companyIDParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<MUNCOLInvoiceGetAsObject_Result> MUNCOLInvoiceGetAsObject(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, Nullable<bool> isPost, string language)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var isPostParameter = isPost.HasValue ?
                new ObjectParameter("IsPost", isPost) :
                new ObjectParameter("IsPost", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLInvoiceGetAsObject_Result>("MUNCOLInvoiceGetAsObject", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isVoidParameter, isPostParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNCOLPaymentGetAsObject_Result> MUNCOLPaymentGetAsObject(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, string language, Nullable<bool> isPost)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var isPostParameter = isPost.HasValue ?
                new ObjectParameter("IsPost", isPost) :
                new ObjectParameter("IsPost", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLPaymentGetAsObject_Result>("MUNCOLPaymentGetAsObject", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isVoidParameter, languageParameter, isPostParameter);
        }
    
        public virtual int MUNCOLDepositInsert(Nullable<int> companyID, Nullable<int> depositTypeID, Nullable<System.DateTime> date, string description, Nullable<decimal> netDeposit, Nullable<int> closingCount, Nullable<int> bankAccountID, string bankAccountCode, string bankAccountName, string bankName, Nullable<int> financeAccountID, string financeAccountCode, string financeAccountName, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, string commaSeperatedClosingIds, ObjectParameter depositId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var depositTypeIDParameter = depositTypeID.HasValue ?
                new ObjectParameter("DepositTypeID", depositTypeID) :
                new ObjectParameter("DepositTypeID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var netDepositParameter = netDeposit.HasValue ?
                new ObjectParameter("NetDeposit", netDeposit) :
                new ObjectParameter("NetDeposit", typeof(decimal));
    
            var closingCountParameter = closingCount.HasValue ?
                new ObjectParameter("ClosingCount", closingCount) :
                new ObjectParameter("ClosingCount", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var bankAccountCodeParameter = bankAccountCode != null ?
                new ObjectParameter("BankAccountCode", bankAccountCode) :
                new ObjectParameter("BankAccountCode", typeof(string));
    
            var bankAccountNameParameter = bankAccountName != null ?
                new ObjectParameter("BankAccountName", bankAccountName) :
                new ObjectParameter("BankAccountName", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var financeAccountIDParameter = financeAccountID.HasValue ?
                new ObjectParameter("FinanceAccountID", financeAccountID) :
                new ObjectParameter("FinanceAccountID", typeof(int));
    
            var financeAccountCodeParameter = financeAccountCode != null ?
                new ObjectParameter("FinanceAccountCode", financeAccountCode) :
                new ObjectParameter("FinanceAccountCode", typeof(string));
    
            var financeAccountNameParameter = financeAccountName != null ?
                new ObjectParameter("FinanceAccountName", financeAccountName) :
                new ObjectParameter("FinanceAccountName", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var commaSeperatedClosingIdsParameter = commaSeperatedClosingIds != null ?
                new ObjectParameter("CommaSeperatedClosingIds", commaSeperatedClosingIds) :
                new ObjectParameter("CommaSeperatedClosingIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLDepositInsert", companyIDParameter, depositTypeIDParameter, dateParameter, descriptionParameter, netDepositParameter, closingCountParameter, bankAccountIDParameter, bankAccountCodeParameter, bankAccountNameParameter, bankNameParameter, financeAccountIDParameter, financeAccountCodeParameter, financeAccountNameParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter, commaSeperatedClosingIdsParameter, depositId);
        }
    
        public virtual ObjectResult<MUNCOLPaymentGetWithPaging_Result> MUNCOLPaymentGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, Nullable<int> year, string filterText, Nullable<bool> isVoid, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLPaymentGetWithPaging_Result>("MUNCOLPaymentGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, yearParameter, filterTextParameter, isVoidParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNCOLInvoiceManualInsert_Result> MUNCOLInvoiceManualInsert(Nullable<int> companyID, Nullable<int> accountID, Nullable<System.DateTime> date, string reference, string notes, string termsAndConditions, Nullable<decimal> total, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, string language, string invoiceDetailJson)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var termsAndConditionsParameter = termsAndConditions != null ?
                new ObjectParameter("TermsAndConditions", termsAndConditions) :
                new ObjectParameter("TermsAndConditions", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var invoiceDetailJsonParameter = invoiceDetailJson != null ?
                new ObjectParameter("InvoiceDetailJson", invoiceDetailJson) :
                new ObjectParameter("InvoiceDetailJson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLInvoiceManualInsert_Result>("MUNCOLInvoiceManualInsert", companyIDParameter, accountIDParameter, dateParameter, referenceParameter, notesParameter, termsAndConditionsParameter, totalParameter, createdUserIDParameter, createdDateParameter, languageParameter, invoiceDetailJsonParameter);
        }
    
        public virtual ObjectResult<MUNACCPostingProcessDetailsGetWithGroupSum_Result> MUNACCPostingProcessDetailsGetWithGroupSum(Nullable<int> companyID, Nullable<int> iD, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCPostingProcessDetailsGetWithGroupSum_Result>("MUNACCPostingProcessDetailsGetWithGroupSum", companyIDParameter, iDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNACCJournalBulkInsertForPayment_Result> MUNACCJournalBulkInsertForPayment(Nullable<int> companyID, Nullable<int> paymentReceiptType, Nullable<System.DateTime> asOfDate, Nullable<System.DateTime> createdDate, Nullable<System.Guid> createdUserID, string language, ObjectParameter journalIDs)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var paymentReceiptTypeParameter = paymentReceiptType.HasValue ?
                new ObjectParameter("PaymentReceiptType", paymentReceiptType) :
                new ObjectParameter("PaymentReceiptType", typeof(int));
    
            var asOfDateParameter = asOfDate.HasValue ?
                new ObjectParameter("AsOfDate", asOfDate) :
                new ObjectParameter("AsOfDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCJournalBulkInsertForPayment_Result>("MUNACCJournalBulkInsertForPayment", companyIDParameter, paymentReceiptTypeParameter, asOfDateParameter, createdDateParameter, createdUserIDParameter, languageParameter, journalIDs);
        }
    
        public virtual ObjectResult<MUNACCPostingProcessGetByLastInserted_Result> MUNACCPostingProcessGetByLastInserted(Nullable<int> companyID, string locale, Nullable<int> documentType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCPostingProcessGetByLastInserted_Result>("MUNACCPostingProcessGetByLastInserted", companyIDParameter, localeParameter, documentTypeParameter);
        }
    
        public virtual int MUNACCPostingProcessInsertForJournal(Nullable<int> companyID, string commaSeparatedJournalID, string documentTypeDetail, Nullable<System.DateTime> asOfDate, Nullable<int> workflowID, Nullable<int> workflowVersionID, Nullable<int> workflowStatusID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> createdUserID, Nullable<int> paymentType, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var commaSeparatedJournalIDParameter = commaSeparatedJournalID != null ?
                new ObjectParameter("CommaSeparatedJournalID", commaSeparatedJournalID) :
                new ObjectParameter("CommaSeparatedJournalID", typeof(string));
    
            var documentTypeDetailParameter = documentTypeDetail != null ?
                new ObjectParameter("DocumentTypeDetail", documentTypeDetail) :
                new ObjectParameter("DocumentTypeDetail", typeof(string));
    
            var asOfDateParameter = asOfDate.HasValue ?
                new ObjectParameter("AsOfDate", asOfDate) :
                new ObjectParameter("AsOfDate", typeof(System.DateTime));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionIDParameter = workflowVersionID.HasValue ?
                new ObjectParameter("WorkflowVersionID", workflowVersionID) :
                new ObjectParameter("WorkflowVersionID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNACCPostingProcessInsertForJournal", companyIDParameter, commaSeparatedJournalIDParameter, documentTypeDetailParameter, asOfDateParameter, workflowIDParameter, workflowVersionIDParameter, workflowStatusIDParameter, createdDateParameter, createdUserIDParameter, paymentTypeParameter, iD);
        }
    
        public virtual int MUNCOLPaymentInsertByOtherService(Nullable<int> companyID, Nullable<int> accountID, Nullable<System.DateTime> date, string notes, Nullable<decimal> totalAmount, Nullable<int> attachmentID, string paymentOptionJSON, string invoiceDetailJson, string number, string numberPrefix, Nullable<bool> isManual, Nullable<bool> isOfficialReceipt, Nullable<System.Guid> createdUserId, Nullable<System.DateTime> createdDate, string language, Nullable<decimal> applyCreditAmount, ObjectParameter paymentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var attachmentIDParameter = attachmentID.HasValue ?
                new ObjectParameter("AttachmentID", attachmentID) :
                new ObjectParameter("AttachmentID", typeof(int));
    
            var paymentOptionJSONParameter = paymentOptionJSON != null ?
                new ObjectParameter("PaymentOptionJSON", paymentOptionJSON) :
                new ObjectParameter("PaymentOptionJSON", typeof(string));
    
            var invoiceDetailJsonParameter = invoiceDetailJson != null ?
                new ObjectParameter("InvoiceDetailJson", invoiceDetailJson) :
                new ObjectParameter("InvoiceDetailJson", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var isOfficialReceiptParameter = isOfficialReceipt.HasValue ?
                new ObjectParameter("IsOfficialReceipt", isOfficialReceipt) :
                new ObjectParameter("IsOfficialReceipt", typeof(bool));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyCreditAmountParameter = applyCreditAmount.HasValue ?
                new ObjectParameter("ApplyCreditAmount", applyCreditAmount) :
                new ObjectParameter("ApplyCreditAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLPaymentInsertByOtherService", companyIDParameter, accountIDParameter, dateParameter, notesParameter, totalAmountParameter, attachmentIDParameter, paymentOptionJSONParameter, invoiceDetailJsonParameter, numberParameter, numberPrefixParameter, isManualParameter, isOfficialReceiptParameter, createdUserIdParameter, createdDateParameter, languageParameter, applyCreditAmountParameter, paymentID);
        }
    
        public virtual ObjectResult<MUNACCPostingProcessGet_Result> MUNACCPostingProcessGet(Nullable<int> companyID, Nullable<int> iD, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNACCPostingProcessGet_Result>("MUNACCPostingProcessGet", companyIDParameter, iDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNCOLPaymentGetForClosingEntry_Result> MUNCOLPaymentGetForClosingEntry(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, Nullable<System.Guid> cashierID, Nullable<System.DateTime> closingDate, string language, Nullable<bool> onlyPostedDocuments, Nullable<int> paymentOptionID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cashierIDParameter = cashierID.HasValue ?
                new ObjectParameter("CashierID", cashierID) :
                new ObjectParameter("CashierID", typeof(System.Guid));
    
            var closingDateParameter = closingDate.HasValue ?
                new ObjectParameter("ClosingDate", closingDate) :
                new ObjectParameter("ClosingDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var onlyPostedDocumentsParameter = onlyPostedDocuments.HasValue ?
                new ObjectParameter("OnlyPostedDocuments", onlyPostedDocuments) :
                new ObjectParameter("OnlyPostedDocuments", typeof(bool));
    
            var paymentOptionIDParameter = paymentOptionID.HasValue ?
                new ObjectParameter("PaymentOptionID", paymentOptionID) :
                new ObjectParameter("PaymentOptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLPaymentGetForClosingEntry_Result>("MUNCOLPaymentGetForClosingEntry", companyIDParameter, accountIDParameter, iDParameter, cashierIDParameter, closingDateParameter, languageParameter, onlyPostedDocumentsParameter, paymentOptionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> MUNCOLPaymentGetAvailableCreditBalance(Nullable<int> companyID, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("MUNCOLPaymentGetAvailableCreditBalance", companyIDParameter, accountIDParameter);
        }
    
        public virtual int MUNCOLDebitNoteByPaymentReceipt(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> paymentID, Nullable<System.DateTime> date, Nullable<decimal> amount, string reason, string commaSeperatedImageIDs, Nullable<System.Guid> createdUserId, Nullable<System.DateTime> createdDate, string language, ObjectParameter iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var commaSeperatedImageIDsParameter = commaSeperatedImageIDs != null ?
                new ObjectParameter("CommaSeperatedImageIDs", commaSeperatedImageIDs) :
                new ObjectParameter("CommaSeperatedImageIDs", typeof(string));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLDebitNoteByPaymentReceipt", companyIDParameter, accountIDParameter, paymentIDParameter, dateParameter, amountParameter, reasonParameter, commaSeperatedImageIDsParameter, createdUserIdParameter, createdDateParameter, languageParameter, iD);
        }
    
        public virtual ObjectResult<MUNCOLDebitNoteGetWithPaging_Result> MUNCOLDebitNoteGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLDebitNoteGetWithPaging_Result>("MUNCOLDebitNoteGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isVoidParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual ObjectResult<MUNCOLDepositGetWithPaging_Result> MUNCOLDepositGetWithPaging(Nullable<int> companyID, Nullable<int> accountID, Nullable<int> iD, string filterText, Nullable<bool> isVoid, string language, Nullable<int> pageIndex, Nullable<int> pageSize, string sortColumn, string sortOrder, ObjectParameter totalRecord)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLDepositGetWithPaging_Result>("MUNCOLDepositGetWithPaging", companyIDParameter, accountIDParameter, iDParameter, filterTextParameter, isVoidParameter, languageParameter, pageIndexParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, totalRecord);
        }
    
        public virtual int MUNCOLDebitNoteUpdateStatus(Nullable<int> iD, Nullable<int> workflowStatusID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate, ObjectParameter retval)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLDebitNoteUpdateStatus", iDParameter, workflowStatusIDParameter, modifiedUserIDParameter, modifiedDateParameter, retval);
        }
    
        public virtual int MUNCOLPaymentInsertByDebitNote(Nullable<int> companyID, Nullable<int> accountID, Nullable<System.DateTime> date, string notes, Nullable<decimal> totalAmount, Nullable<int> attachmentID, string paymentOptionJSON, string debitNotesJson, string number, string numberPrefix, Nullable<bool> isManual, Nullable<bool> isOfficialReceipt, Nullable<System.Guid> createdUserId, Nullable<System.DateTime> createdDate, string language, Nullable<decimal> applyCreditAmount, ObjectParameter paymentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var attachmentIDParameter = attachmentID.HasValue ?
                new ObjectParameter("AttachmentID", attachmentID) :
                new ObjectParameter("AttachmentID", typeof(int));
    
            var paymentOptionJSONParameter = paymentOptionJSON != null ?
                new ObjectParameter("PaymentOptionJSON", paymentOptionJSON) :
                new ObjectParameter("PaymentOptionJSON", typeof(string));
    
            var debitNotesJsonParameter = debitNotesJson != null ?
                new ObjectParameter("DebitNotesJson", debitNotesJson) :
                new ObjectParameter("DebitNotesJson", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var numberPrefixParameter = numberPrefix != null ?
                new ObjectParameter("NumberPrefix", numberPrefix) :
                new ObjectParameter("NumberPrefix", typeof(string));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var isOfficialReceiptParameter = isOfficialReceipt.HasValue ?
                new ObjectParameter("IsOfficialReceipt", isOfficialReceipt) :
                new ObjectParameter("IsOfficialReceipt", typeof(bool));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var applyCreditAmountParameter = applyCreditAmount.HasValue ?
                new ObjectParameter("ApplyCreditAmount", applyCreditAmount) :
                new ObjectParameter("ApplyCreditAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLPaymentInsertByDebitNote", companyIDParameter, accountIDParameter, dateParameter, notesParameter, totalAmountParameter, attachmentIDParameter, paymentOptionJSONParameter, debitNotesJsonParameter, numberParameter, numberPrefixParameter, isManualParameter, isOfficialReceiptParameter, createdUserIdParameter, createdDateParameter, languageParameter, applyCreditAmountParameter, paymentID);
        }
    
        public virtual int MUNCOLDebitNoteExistByAccount(Nullable<int> companyID, Nullable<int> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNCOLDebitNoteExistByAccount", companyIDParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<MUNCOLDebitNoteGet_Result> MUNCOLDebitNoteGet(Nullable<int> accountID, Nullable<int> companyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNCOLDebitNoteGet_Result>("MUNCOLDebitNoteGet", accountIDParameter, companyIDParameter);
        }
    }
}
