//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FileDataModelContainer : DbContext
    {
        public FileDataModelContainer()
            : base("name=FileDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<MUNImagesGet_Result> MUNImagesGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNImagesGet_Result>("MUNImagesGet", iDParameter);
        }
    
        public virtual ObjectResult<MUNImagesInsert_Result> MUNImagesInsert(Nullable<int> companyID, byte[] data, Nullable<long> length, string contentType, string fileName, string fileExtension, Nullable<bool> isListedInFolders, Nullable<int> folderID, Nullable<bool> isPublicImage, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<int> sort, Nullable<int> imageID, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(long));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var isListedInFoldersParameter = isListedInFolders.HasValue ?
                new ObjectParameter("IsListedInFolders", isListedInFolders) :
                new ObjectParameter("IsListedInFolders", typeof(bool));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var isPublicImageParameter = isPublicImage.HasValue ?
                new ObjectParameter("IsPublicImage", isPublicImage) :
                new ObjectParameter("IsPublicImage", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNImagesInsert_Result>("MUNImagesInsert", companyIDParameter, dataParameter, lengthParameter, contentTypeParameter, fileNameParameter, fileExtensionParameter, isListedInFoldersParameter, folderIDParameter, isPublicImageParameter, isDeletedParameter, isActiveParameter, sortParameter, imageIDParameter, createdUserIDParameter, createdDateParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<MUNImagesUpdate_Result> MUNImagesUpdate(Nullable<int> id, Nullable<int> companyID, byte[] data, Nullable<long> length, string contentType, string fileName, string fileExtension, Nullable<bool> isListedInFolders, Nullable<int> folderID, Nullable<bool> isPublicImage, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<int> sort, Nullable<int> imageID, Nullable<System.Guid> modifiedUserID, Nullable<System.DateTime> modifiedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(long));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var isListedInFoldersParameter = isListedInFolders.HasValue ?
                new ObjectParameter("IsListedInFolders", isListedInFolders) :
                new ObjectParameter("IsListedInFolders", typeof(bool));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var isPublicImageParameter = isPublicImage.HasValue ?
                new ObjectParameter("IsPublicImage", isPublicImage) :
                new ObjectParameter("IsPublicImage", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNImagesUpdate_Result>("MUNImagesUpdate", idParameter, companyIDParameter, dataParameter, lengthParameter, contentTypeParameter, fileNameParameter, fileExtensionParameter, isListedInFoldersParameter, folderIDParameter, isPublicImageParameter, isDeletedParameter, isActiveParameter, sortParameter, imageIDParameter, modifiedUserIDParameter, modifiedDateParameter);
        }
    }
}
