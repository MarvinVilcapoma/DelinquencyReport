//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExceptionHandlerDataModelContainer : DbContext
    {
        public ExceptionHandlerDataModelContainer()
            : base("name=ExceptionHandlerDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<EXCLogInsert_Result> EXCLogInsert(Nullable<System.Guid> featureID, Nullable<System.Guid> token, Nullable<System.DateTime> exceptionDateTime, string thread, string level, string logger, string message, string exception, string source, string host)
        {
            var featureIDParameter = featureID.HasValue ?
                new ObjectParameter("FeatureID", featureID) :
                new ObjectParameter("FeatureID", typeof(System.Guid));
    
            var tokenParameter = token.HasValue ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(System.Guid));
    
            var exceptionDateTimeParameter = exceptionDateTime.HasValue ?
                new ObjectParameter("ExceptionDateTime", exceptionDateTime) :
                new ObjectParameter("ExceptionDateTime", typeof(System.DateTime));
    
            var threadParameter = thread != null ?
                new ObjectParameter("Thread", thread) :
                new ObjectParameter("Thread", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("Logger", logger) :
                new ObjectParameter("Logger", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("Exception", exception) :
                new ObjectParameter("Exception", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXCLogInsert_Result>("EXCLogInsert", featureIDParameter, tokenParameter, exceptionDateTimeParameter, threadParameter, levelParameter, loggerParameter, messageParameter, exceptionParameter, sourceParameter, hostParameter);
        }
    
        public virtual ObjectResult<string> EXCMessageGet(Nullable<int> iD, string languageID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EXCMessageGet", iDParameter, languageIDParameter);
        }
    }
}
