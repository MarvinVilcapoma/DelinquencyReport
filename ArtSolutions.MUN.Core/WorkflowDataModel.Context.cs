//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtSolutions.MUN.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WorkflowDataModelContainer : DbContext
    {
        public WorkflowDataModelContainer()
            : base("name=WorkflowDataModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowGetByPaging_Result> MUNDOCDocumentWorkflowGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, string filterText, Nullable<int> documentTyepID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            var documentTyepIDParameter = documentTyepID.HasValue ?
                new ObjectParameter("DocumentTyepID", documentTyepID) :
                new ObjectParameter("DocumentTyepID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowGetByPaging_Result>("MUNDOCDocumentWorkflowGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, filterTextParameter, documentTyepIDParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowActiveStatusUpdate(Nullable<int> iD, Nullable<int> companyID, Nullable<bool> isActive, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowActiveStatusUpdate", iDParameter, companyIDParameter, isActiveParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityGroupGet_Result> MUNDOCDocumentWorkflowSecurityGroupGet(Nullable<int> companyID, string langauge, Nullable<int> groupID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var langaugeParameter = langauge != null ?
                new ObjectParameter("Langauge", langauge) :
                new ObjectParameter("Langauge", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityGroupGet_Result>("MUNDOCDocumentWorkflowSecurityGroupGet", companyIDParameter, langaugeParameter, groupIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusSequenceGet_Result> MUNDOCDocumentWorkflowStatusSequenceGet(Nullable<int> companyID, string language, Nullable<int> workflowID, Nullable<int> workflowVersionID, Nullable<int> workflowStatusID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionIDParameter = workflowVersionID.HasValue ?
                new ObjectParameter("WorkflowVersionID", workflowVersionID) :
                new ObjectParameter("WorkflowVersionID", typeof(int));
    
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusSequenceGet_Result>("MUNDOCDocumentWorkflowStatusSequenceGet", companyIDParameter, languageParameter, workflowIDParameter, workflowVersionIDParameter, workflowStatusIDParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowStatusSequenceDelete(Nullable<int> workflowStatusID, Nullable<int> workflowID, Nullable<int> workflowVersionID, Nullable<int> workflowStatusTargetID, Nullable<int> companyID)
        {
            var workflowStatusIDParameter = workflowStatusID.HasValue ?
                new ObjectParameter("WorkflowStatusID", workflowStatusID) :
                new ObjectParameter("WorkflowStatusID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionIDParameter = workflowVersionID.HasValue ?
                new ObjectParameter("WorkflowVersionID", workflowVersionID) :
                new ObjectParameter("WorkflowVersionID", typeof(int));
    
            var workflowStatusTargetIDParameter = workflowStatusTargetID.HasValue ?
                new ObjectParameter("WorkflowStatusTargetID", workflowStatusTargetID) :
                new ObjectParameter("WorkflowStatusTargetID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowStatusSequenceDelete", workflowStatusIDParameter, workflowIDParameter, workflowVersionIDParameter, workflowStatusTargetIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusSequenceGetByPaging_Result> MUNDOCDocumentWorkflowStatusSequenceGetByPaging(Nullable<int> companyID, string language, Nullable<int> workflowID, Nullable<int> workflowVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionParameter = workflowVersion.HasValue ?
                new ObjectParameter("WorkflowVersion", workflowVersion) :
                new ObjectParameter("WorkflowVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusSequenceGetByPaging_Result>("MUNDOCDocumentWorkflowStatusSequenceGetByPaging", companyIDParameter, languageParameter, workflowIDParameter, workflowVersionParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusGetByPaging_Result> MUNDOCDocumentWorkflowStatusGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, Nullable<int> workflowID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusGetByPaging_Result>("MUNDOCDocumentWorkflowStatusGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, workflowIDParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowStatusUpdate(Nullable<int> iD, Nullable<int> companyID, Nullable<int> workflowID, Nullable<int> workflowVersion, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, string name, string activity, string description, Nullable<bool> initialStatus, Nullable<bool> allowEdit, Nullable<bool> allowDelete, Nullable<bool> post, Nullable<bool> @void, string groups, string language, string reasons)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionParameter = workflowVersion.HasValue ?
                new ObjectParameter("WorkflowVersion", workflowVersion) :
                new ObjectParameter("WorkflowVersion", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var initialStatusParameter = initialStatus.HasValue ?
                new ObjectParameter("InitialStatus", initialStatus) :
                new ObjectParameter("InitialStatus", typeof(bool));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            var allowDeleteParameter = allowDelete.HasValue ?
                new ObjectParameter("AllowDelete", allowDelete) :
                new ObjectParameter("AllowDelete", typeof(bool));
    
            var postParameter = post.HasValue ?
                new ObjectParameter("Post", post) :
                new ObjectParameter("Post", typeof(bool));
    
            var voidParameter = @void.HasValue ?
                new ObjectParameter("Void", @void) :
                new ObjectParameter("Void", typeof(bool));
    
            var groupsParameter = groups != null ?
                new ObjectParameter("Groups", groups) :
                new ObjectParameter("Groups", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var reasonsParameter = reasons != null ?
                new ObjectParameter("Reasons", reasons) :
                new ObjectParameter("Reasons", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowStatusUpdate", iDParameter, companyIDParameter, workflowIDParameter, workflowVersionParameter, createdUserIDParameter, createdDateParameter, nameParameter, activityParameter, descriptionParameter, initialStatusParameter, allowEditParameter, allowDeleteParameter, postParameter, voidParameter, groupsParameter, languageParameter, reasonsParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityStatusInGroupGet_Result> MUNDOCDocumentWorkflowSecurityStatusInGroupGet(Nullable<int> statusID, Nullable<int> groupID, string language)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityStatusInGroupGet_Result>("MUNDOCDocumentWorkflowSecurityStatusInGroupGet", statusIDParameter, groupIDParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowReasonGetByPaging_Result> MUNDOCDocumentWorkflowReasonGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, Nullable<int> workflowID, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowReasonGetByPaging_Result>("MUNDOCDocumentWorkflowReasonGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, workflowIDParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowReasonGetByWorkflowID_Result> MUNDOCDocumentWorkflowReasonGetByWorkflowID(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, Nullable<int> workflowID, Nullable<int> workfowVersionID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workfowVersionIDParameter = workfowVersionID.HasValue ?
                new ObjectParameter("WorkfowVersionID", workfowVersionID) :
                new ObjectParameter("WorkfowVersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowReasonGetByWorkflowID_Result>("MUNDOCDocumentWorkflowReasonGetByWorkflowID", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, workflowIDParameter, workfowVersionIDParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowReasonUpdate(Nullable<int> companyID, string name, string description, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> iD, string locale)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowReasonUpdate", companyIDParameter, nameParameter, descriptionParameter, createdUserIDParameter, createdDateParameter, iDParameter, localeParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityGroupGetByPaging_Result> MUNDOCDocumentWorkflowSecurityGroupGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityGroupGetByPaging_Result>("MUNDOCDocumentWorkflowSecurityGroupGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityGroupGetByWorkflowID_Result> MUNDOCDocumentWorkflowSecurityGroupGetByWorkflowID(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, Nullable<int> workflowID, Nullable<int> workflowVersionID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionIDParameter = workflowVersionID.HasValue ?
                new ObjectParameter("WorkflowVersionID", workflowVersionID) :
                new ObjectParameter("WorkflowVersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityGroupGetByWorkflowID_Result>("MUNDOCDocumentWorkflowSecurityGroupGetByWorkflowID", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, workflowIDParameter, workflowVersionIDParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowSecurityGroupInsert(Nullable<int> companyID, string name, string description, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowSecurityGroupInsert", companyIDParameter, nameParameter, descriptionParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int MUNDOCDocumentWorkflowSecurityGroupUpdate(Nullable<int> iD, Nullable<int> companyID, string name, string description, Nullable<System.Guid> createdUserID, Nullable<System.DateTime> createdDate, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUNDOCDocumentWorkflowSecurityGroupUpdate", iDParameter, companyIDParameter, nameParameter, descriptionParameter, createdUserIDParameter, createdDateParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityGroupUsersGetByPaging_Result> MUNDOCDocumentWorkflowSecurityGroupUsersGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, Nullable<int> workflowID, Nullable<int> workflowVersionID, string sortColumn, string sortDirection)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowVersionIDParameter = workflowVersionID.HasValue ?
                new ObjectParameter("WorkflowVersionID", workflowVersionID) :
                new ObjectParameter("WorkflowVersionID", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityGroupUsersGetByPaging_Result>("MUNDOCDocumentWorkflowSecurityGroupUsersGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, workflowIDParameter, workflowVersionIDParameter, sortColumnParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<MUNDocumentWorkflowSecurityGroupUsersGet_Result> MUNDocumentWorkflowSecurityGroupUsersGet(Nullable<int> statusID, Nullable<int> companyID, Nullable<int> groupID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDocumentWorkflowSecurityGroupUsersGet_Result>("MUNDocumentWorkflowSecurityGroupUsersGet", statusIDParameter, companyIDParameter, groupIDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowFormGetByPaging_Result> MUNDOCDocumentWorkflowFormGetByPaging(Nullable<int> companyID, string language, Nullable<int> currentIndex, Nullable<long> pageSize, ObjectParameter totalRecord, string sortColumn, string sortDirection, string filterText)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var currentIndexParameter = currentIndex.HasValue ?
                new ObjectParameter("CurrentIndex", currentIndex) :
                new ObjectParameter("CurrentIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(long));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var filterTextParameter = filterText != null ?
                new ObjectParameter("FilterText", filterText) :
                new ObjectParameter("FilterText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowFormGetByPaging_Result>("MUNDOCDocumentWorkflowFormGetByPaging", companyIDParameter, languageParameter, currentIndexParameter, pageSizeParameter, totalRecord, sortColumnParameter, sortDirectionParameter, filterTextParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowStatusGet_Result> MUNDOCDocumentWorkflowStatusGet(Nullable<int> workflowID, Nullable<int> companyID, string version, string language, Nullable<bool> isPublic, Nullable<bool> isDeleted, Nullable<int> iD)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowStatusGet_Result>("MUNDOCDocumentWorkflowStatusGet", workflowIDParameter, companyIDParameter, versionParameter, languageParameter, isPublicParameter, isDeletedParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentTypeGet_Result> MUNDOCDocumentTypeGet(Nullable<int> iD, Nullable<bool> isMunicipalityOnly, string language)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isMunicipalityOnlyParameter = isMunicipalityOnly.HasValue ?
                new ObjectParameter("IsMunicipalityOnly", isMunicipalityOnly) :
                new ObjectParameter("IsMunicipalityOnly", typeof(bool));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentTypeGet_Result>("MUNDOCDocumentTypeGet", iDParameter, isMunicipalityOnlyParameter, languageParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowSecurityGroupUsersUpdateProfile_Result> MUNDOCDocumentWorkflowSecurityGroupUsersUpdateProfile(Nullable<int> companyID, Nullable<System.Guid> userID, string firstName, string lastName)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowSecurityGroupUsersUpdateProfile_Result>("MUNDOCDocumentWorkflowSecurityGroupUsersUpdateProfile", companyIDParameter, userIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowReasonGet_Result> MUNDOCDocumentWorkflowReasonGet(Nullable<int> companyID, string language, Nullable<int> iD)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowReasonGet_Result>("MUNDOCDocumentWorkflowReasonGet", companyIDParameter, languageParameter, iDParameter);
        }
    
        public virtual ObjectResult<MUNDOCDocumentWorkflowHistoryLogGetForSplit_Result> MUNDOCDocumentWorkflowHistoryLogGetForSplit(Nullable<int> transferID, string language)
        {
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MUNDOCDocumentWorkflowHistoryLogGetForSplit_Result>("MUNDOCDocumentWorkflowHistoryLogGetForSplit", transferIDParameter, languageParameter);
        }
    }
}
